digraph "Identified"
{
  edge [fontname="FreeSans.ttf",fontsize="10",labelfontname="FreeSans.ttf",labelfontsize="10"];
  node [fontname="FreeSans.ttf",fontsize="10",shape=record];
  Node0 [label="{Identified\n|+ persistentIdentity\l+ displayId\l+ version\l+ wasDerivedFrom\l+ wasGeneratedBy\l+ name\l+ description\l|+ Identified()\l+ generate()\l+ ~Identified()\l+ copy()\l# copy()\l# simpleCopy()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node1 [label="{SBOLObject\n|+ identity\l|+ SBOLObject()\l+ ~SBOLObject()\l+ getTypeURI()\l+ getClassName()\l+ find()\l+ find_property()\l+ find_property_value()\l+ find_reference()\l+ compare()\l+ getPropertyValue()\land 10 more...\l# register_extension\l_class()\l# SBOLObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_s_b_o_l_object.html",tooltip="An SBOLObject converts a C++ class data structure into an RDF triple store and contains methods for s..."];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node2 [label="{Association\n|+ agent\l+ roles\l+ plan\l|+ Association()\l+ Association()\l+ ~Association()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_association.html",tooltip="An Association is linked to an Agent through the agent relationship. The Association includes the had..."];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node3 [label="{Document\n|+ designs\l+ builds\l+ tests\l+ analyses\l+ componentDefinitions\l+ moduleDefinitions\l+ models\l+ sequences\l+ collections\l+ activities\land 9 more...\l|+ Document()\l+ Document()\l+ ~Document()\l+ add()\l+ add()\l+ get()\l+ getAll()\l+ write()\l+ read()\l+ readString()\land 26 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_document.html",tooltip="Read and write SBOL using a Document class. The Document is a container for Components, Modules, and all other SBOLObjects. "];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node4 [label="{Interaction\n|+ types\l+ participations\l+ functionalComponents\l|+ Interaction()\l+ Interaction()\l+ ~Interaction()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_interaction.html",tooltip="The Interaction class provides more detailed descriptionof how the FunctionalComponents are intended ..."];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node5 [label="{Location\n|+ orientation\l|+ Location()\l+ ~Location()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_location.html",tooltip="The Location class specifies the strand orientation of a Component and can be further extended by the..."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node6 [label="{Cut\n|+ at\l|+ Cut()\l+ ~Cut()\l# Cut()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_cut.html",tooltip="The Cut class specifies a location between two coordinates of a Sequence&#39;s elements. class Cut : public Location. "];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node7 [label="{GenericLocation\n||+ GenericLocation()\l+ ~GenericLocation()\l# GenericLocation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_generic_location.html",tooltip="the GenericLocation class is included as a starting point for specifying regions on Sequence objects ..."];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node8 [label="{Range\n|+ start\l+ end\l|+ Range()\l+ precedes()\l+ follows()\l+ contains()\l+ overlaps()\l+ length()\l+ adjoins()\l+ ~Range()\l# Range()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_range.html",tooltip="A Range object specifies a region via discrete, inclusive start and end positions that correspond to ..."];
  Node0 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node9 [label="{MapsTo\n|+ refinement\l+ local\l+ remote\l|+ MapsTo()\l+ ~MapsTo()\l# MapsTo()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_maps_to.html",tooltip="The purpose of the MapsTo class is to make identity relationships between different ComponentInstance..."];
  Node0 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node10 [label="{Module\n|+ definition\l+ mapsTos\l|+ Module()\l+ Module()\l+ ~Module()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_module.html",tooltip="The Module class represents a submodule of a ModuleDefinition within a hierarchical design..."];
  Node0 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node11 [label="{Participation\n|+ roles\l+ participant\l|+ Participation()\l+ Participation()\l+ Participation()\l+ define()\l+ ~Participation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_participation.html",tooltip="Each Participation represents how a particular FunctionalComponent behaves in its parent Interaction..."];
  Node0 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node12 [label="{SequenceAnnotation\n|+ component\l+ locations\l+ roles\l|+ SequenceAnnotation()\l+ precedes()\l+ follows()\l+ contains()\l+ overlaps()\l+ precedes()\l+ follows()\l+ contains()\l+ overlaps()\l+ extract()\l+ length()\l+ ~SequenceAnnotation()\l# SequenceAnnotation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_sequence_annotation.html",tooltip="The SequenceAnnotation class describes one or more regions of interest on the Sequence objects referr..."];
  Node0 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node13 [label="{SequenceConstraint\n|+ subject\l+ object\l+ restriction\l|+ SequenceConstraint()\l+ ~SequenceConstraint()\l# SequenceConstraint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_sequence_constraint.html",tooltip="The SequenceConstraint class can be used to assert restrictions on the relative, sequence-based posit..."];
  Node0 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node14 [label="{TopLevel\n|+ attachments\l|+ TopLevel()\l+ addToDocument()\l+ ~TopLevel()\l+ copy()\l+ simpleCopy()\l+ generate()\l+ generate()\l+ initialize()\l+ generate()\l+ generate()\land 15 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_top_level.html",tooltip="All SBOL classes derived from TopLevel appear as top level nodes in the RDF/XML document tree and SBO..."];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node15 [label="{Activity\n|+ startedAtTime\l+ endedAtTime\l+ wasInformedBy\l+ associations\l+ usages\l+ agent\l+ plan\l|+ Activity()\l+ Activity()\l+ ~Activity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_activity.html",tooltip="A generated Entity is linked through a wasGeneratedBy relationship to an Activity, which is used to describe how different Agents and other entities were used. An Activity is linked through a qualifiedAssociation to Associations, to describe the role of agents, and is linked through qualifiedUsage to Usages to describe the role of other entities used as part of the activity. Moreover, each Activity includes optional startedAtTime and endedAtTime properties. When using Activity to capture how an entity was derived, it is expected that any additional information needed will be attached as annotations. This may include software settings or textual notes. Activities can also be linked together using the wasInformedBy relationship to provide dependency without explicitly specifying start and end times. "];
  Node14 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node16 [label="{Agent\n||+ Agent()\l+ Agent()\l+ ~Agent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_agent.html",tooltip="Examples of agents are person, organisation or software. These agents should be annotated with additi..."];
  Node14 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node17 [label="{Attachment\n|+ source\l+ format\l+ size\l+ hash\l|+ Attachment()\l+ Attachment()\l+ ~Attachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_attachment.html",tooltip="The Attachment class is a general container for data files, especially experimental data files..."];
  Node14 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node18 [label="{Collection\n|+ members\l|+ Collection()\l+ Collection()\l+ ~Collection()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_collection.html",tooltip="The Collection class is a class that groups together a set of TopLevel objects that have something in..."];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node19 [label="{SampleRoster\n|+ samples\l|+ SampleRoster()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_sample_roster.html",tooltip="A SampleRoster is a container used to group Builds that are included in an experiment together..."];
  Node18 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node20 [label="{Test\n|+ samples\l+ dataFiles\l|+ Test()\l+ ~Test()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_test.html",tooltip="A Test is a container for experimental data. A Test is the product of the third step of libSBOL&#39;s for..."];
  Node14 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node21 [label="{CombinatorialDerivation\n|+ strategy\l+ masterTemplate\l+ variableComponents\l|+ CombinatorialDerivation()\l+ CombinatorialDerivation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_combinatorial_derivation.html",tooltip="A ComponentDeriviation specifies the composition of a combinatorial design or variant library for com..."];
  Node14 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node22 [label="{ComponentDefinition\n|+ types\l+ roles\l+ components\l+ sequences\l+ sequence\l+ sequenceAnnotations\l+ sequenceConstraints\l|+ ComponentDefinition()\l+ ComponentDefinition()\l+ assemble()\l+ assemble()\l+ assemblePrimaryStructure()\l+ assemblePrimaryStructure()\l+ assemblePrimaryStructure()\l+ assemble()\l+ compile()\l+ updateSequence()\land 23 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_component_definition.html",tooltip="The ComponentDefinition class represents the structural entities of a biological design. "];
  Node14 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node23 [label="{Design\n|+ structure\l+ function\l+ characterization\l|+ Design()\l+ Design()\l+ ~Design()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_design.html",tooltip="This class represents a biological Design. A Design is a conceptual representation of a biological sy..."];
  Node14 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node24 [label="{Implementation\n|+ built\l|+ Implementation()\l+ Implementation()\l+ ~Implementation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_implementation.html",tooltip="An Implementation represents a real, physical instance of a synthetic biological construct which may ..."];
  Node24 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node25 [label="{Build\n|+ design\l+ structure\l+ behavior\l+ sysbio_type\l+ _structure\l+ _behavior\l|+ Build()\l+ Build()\l+ ~Build()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_build.html",tooltip="A Build is a realization of a Design. For practical purposes, a Build can represent a biological clon..."];
  Node14 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node26 [label="{Model\n|+ source\l+ language\l+ framework\l|+ Model()\l+ Model()\l+ ~Model()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_model.html",tooltip="The purpose of the Model class is to serve as a placeholder for an external computational model and p..."];
  Node14 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node27 [label="{ModuleDefinition\n|+ roles\l+ modules\l+ interactions\l+ functionalComponents\l+ models\l|+ ModuleDefinition()\l+ ModuleDefinition()\l+ setOutput()\l+ setInput()\l+ setOutput()\l+ setInput()\l+ connect()\l+ override()\l+ ~ModuleDefinition()\l+ assemble()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_module_definition.html",tooltip="The ModuleDefinition class represents a grouping of structural and functional entities in a biologica..."];
  Node14 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node28 [label="{Plan\n||+ Plan()\l+ Plan()\l+ ~Plan()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_plan.html",tooltip="Examples of agents are person, organisation or software. These agents should be annotated with additi..."];
  Node14 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node29 [label="{SearchQuery\n|+ objectType\l+ limit\l+ offset\l|+ SearchQuery()\l+ operator[]()\l+ ~SearchQuery()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_search_query.html",tooltip="A SearchQuery object is used to configure advanced searches for bioparts in a PartShop. Advanced searches are useful for matching values across multiple fields, or to specify multiple values in a single field. "];
  Node14 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node30 [label="{SearchResponse\n|+ records\l+ python_iter\l|+ extend()\l+ SearchResponse()\l+ ~SearchResponse()\l+ size()\l+ operator[]()\l+ begin()\l+ end()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_search_response.html",tooltip="A SearchResponse is a container of search records returned by a search request. "];
  Node14 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node31 [label="{Sequence\n|+ elements\l+ encoding\l|+ Sequence()\l+ Sequence()\l+ assemble()\l+ compile()\l+ length()\l+ synthesize()\l+ ~Sequence()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_sequence.html",tooltip="The primary structure (eg, nucleotide or amino acid sequence) of a ComponentDefinition object..."];
  Node0 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node32 [label="{Usage\n|+ entity\l+ roles\l|+ Usage()\l+ Usage()\l+ ~Usage()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_usage.html",tooltip="How different entities are used in an Activity is specified with the Usage class, which is linked fro..."];
  Node0 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node33 [label="{VariableComponent\n|+ variable\l+ repeat\l+ variants\l+ variantCollections\l+ variantDerivations\l|+ VariableComponent()\l+ VariableComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_variable_component.html",tooltip="The VariableComponent class can be used to specify a choice of ComponentDefinition objects for any ne..."];
}
