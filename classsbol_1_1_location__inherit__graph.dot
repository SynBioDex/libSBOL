digraph "Location"
{
  edge [fontname="FreeSans.ttf",fontsize="10",labelfontname="FreeSans.ttf",labelfontsize="10"];
  node [fontname="FreeSans.ttf",fontsize="10",shape=record];
  Node0 [label="{Location\n|+ orientation\l|+ Location()\l+ ~Location()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node1 [label="{Identified\n|+ persistentIdentity\l+ displayId\l+ version\l+ wasDerivedFrom\l+ wasGeneratedBy\l+ name\l+ description\l|+ Identified()\l+ generate()\l+ ~Identified()\l+ copy()\l# copy()\l# simpleCopy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_identified.html",tooltip="All SBOL-defined classes are directly or indirectly derived from the Identified abstract class..."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node2 [label="{SBOLObject\n|+ identity\l|+ SBOLObject()\l+ ~SBOLObject()\l+ getTypeURI()\l+ getClassName()\l+ find()\l+ find_property()\l+ find_property_value()\l+ find_reference()\l+ compare()\l+ getPropertyValue()\land 10 more...\l# register_extension\l_class()\l# SBOLObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_s_b_o_l_object.html",tooltip="An SBOLObject converts a C++ class data structure into an RDF triple store and contains methods for s..."];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node3 [label="{Cut\n|+ at\l|+ Cut()\l+ ~Cut()\l# Cut()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_cut.html",tooltip="The Cut class specifies a location between two coordinates of a Sequence&#39;s elements. class Cut : public Location. "];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node4 [label="{GenericLocation\n||+ GenericLocation()\l+ ~GenericLocation()\l# GenericLocation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_generic_location.html",tooltip="the GenericLocation class is included as a starting point for specifying regions on Sequence objects ..."];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans.ttf"];
  Node5 [label="{Range\n|+ start\l+ end\l|+ Range()\l+ precedes()\l+ follows()\l+ contains()\l+ overlaps()\l+ length()\l+ adjoins()\l+ ~Range()\l# Range()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsbol_1_1_range.html",tooltip="A Range object specifies a region via discrete, inclusive start and end positions that correspond to ..."];
}
