<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classsbol_1_1_component_definition" kind="class" language="C++" prot="public">
    <compoundname>sbol::ComponentDefinition</compoundname>
    <basecompoundref refid="classsbol_1_1_top_level" prot="public" virt="non-virtual">TopLevel</basecompoundref>
    <includes local="no">/Users/bryan/Dev/libSBOL/source/componentdefinition.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsbol_1_1_component_definition_1ab563237ddc0363ecbd245b5f791f2900" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref> &gt;</type>
        <definition>List&lt;URIProperty&gt; types</definition>
        <argsstring></argsstring>
        <name>types</name>
        <briefdescription>
<para>The types property is a REQUIRED set of URIs that specifies the category of biochemical or physical entity (for example DNA, protein, or small molecule) that a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> object abstracts for the purpose of engineering design. </para>        </briefdescription>
        <detaileddescription>
<para>The types property of every <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> MUST contain one or more URIs that MUST identify terms from appropriate ontologies, such as the BioPAX ontology or the ontology of Chemical Entities of Biological Interest. See the table below for examples. <table rows="6" cols="3"><row>
<entry thead="yes"><para>Type </para></entry><entry thead="yes"><para>URI for BioPAX Term </para></entry><entry thead="yes"><para>LibSBOL symbol  </para></entry></row>
<row>
<entry thead="no"><para>DNA </para></entry><entry thead="no"><para><ulink url="http://www.biopax.org/release/biopax-level3.owl#DnaRegion">http://www.biopax.org/release/biopax-level3.owl#DnaRegion</ulink> </para></entry><entry thead="no"><para>BIOPAX_DNA </para></entry></row>
<row>
<entry thead="no"><para>RNA </para></entry><entry thead="no"><para><ulink url="http://www.biopax.org/release/biopax-level3.owl#RnaRegion">http://www.biopax.org/release/biopax-level3.owl#RnaRegion</ulink> </para></entry><entry thead="no"><para>BIOPAX_RNA </para></entry></row>
<row>
<entry thead="no"><para>Protein </para></entry><entry thead="no"><para><ulink url="http://www.biopax.org/release/biopax-level3.owl#Protein">http://www.biopax.org/release/biopax-level3.owl#Protein</ulink> </para></entry><entry thead="no"><para>BIOPAX_PROTEIN </para></entry></row>
<row>
<entry thead="no"><para>Small Molecule </para></entry><entry thead="no"><para><ulink url="http://www.biopax.org/release/biopax-level3.owl#SmallMolecule">http://www.biopax.org/release/biopax-level3.owl#SmallMolecule</ulink> </para></entry><entry thead="no"><para>BIOPAX_SMALL_MOLECULE </para></entry></row>
<row>
<entry thead="no"><para>Complex </para></entry><entry thead="no"><para><ulink url="http://www.biopax.org/release/biopax-level3.owl#Complex">http://www.biopax.org/release/biopax-level3.owl#Complex</ulink> </para></entry><entry thead="no"><para>BIOPAX_COMPLEX </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="57" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_component_definition_1a554ef7c2d135daea2b27c8328d04469f" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref> &gt;</type>
        <definition>List&lt;URIProperty&gt; roles</definition>
        <argsstring></argsstring>
        <name>roles</name>
        <briefdescription>
<para>The roles property is an OPTIONAL set of URIs that clarifies the potential function of the entity represented by a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> in a biochemical or physical context. </para>        </briefdescription>
        <detaileddescription>
<para>The roles property of a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> MAY contain one or more URIs that MUST identify terms from ontologies that are consistent with the types property of the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>. For example, the roles property of a DNA or RNA <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> could contain URIs identifying terms from the <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> Ontology (SO). See the table below for common examples <table rows="11" cols="3"><row>
<entry thead="yes"><para>Role </para></entry><entry thead="yes"><para>URI for <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> Ontology Term </para></entry><entry thead="yes"><para>LibSBOL symbol  </para></entry></row>
<row>
<entry thead="no"><para>Miscellaneous </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000001">http://identifiers.org/so/SO:0000001</ulink> </para></entry><entry thead="no"><para>SO_MISC </para></entry></row>
<row>
<entry thead="no"><para>Promoter </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000167">http://identifiers.org/so/SO:0000167</ulink> </para></entry><entry thead="no"><para>SO_PROMOTER </para></entry></row>
<row>
<entry thead="no"><para>RBS </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000139">http://identifiers.org/so/SO:0000139</ulink> </para></entry><entry thead="no"><para>SO_RBS </para></entry></row>
<row>
<entry thead="no"><para>CDS </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000316">http://identifiers.org/so/SO:0000316</ulink> </para></entry><entry thead="no"><para>SO_CDS </para></entry></row>
<row>
<entry thead="no"><para>Terminator </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000141">http://identifiers.org/so/SO:0000141</ulink> </para></entry><entry thead="no"><para>SO_TERMINATOR </para></entry></row>
<row>
<entry thead="no"><para>Gene </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000704">http://identifiers.org/so/SO:0000704</ulink> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Operator </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000057">http://identifiers.org/so/SO:0000057</ulink> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Engineered Gene </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000280">http://identifiers.org/so/SO:0000280</ulink> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>mRNA </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/so/SO:0000234">http://identifiers.org/so/SO:0000234</ulink> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Effector </para></entry><entry thead="no"><para><ulink url="http://identifiers.org/chebi/CHEBI:35224">http://identifiers.org/chebi/CHEBI:35224</ulink> </para></entry><entry thead="no"><para></para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="72" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_component_definition_1a9ba130a49d9f50e5c3be54a417ea3512" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_owned_object" kindref="compound">OwnedObject</ref>&lt; <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &gt; &gt;</type>
        <definition>List&lt;OwnedObject&lt;Component&gt; &gt; components</definition>
        <argsstring></argsstring>
        <name>components</name>
        <briefdescription>
<para>The components property is OPTIONAL and MAY specify a set of <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> objects that are contained by the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>. The components properties of <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> objects can be used to construct a hierarchy of <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> and <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> objects. If a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> in such a hierarchy refers to one or more <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> objects, and there exist <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> objects lower in the hierarchy that refer to <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> objects with the same encoding, then the elements properties of these <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> objects SHOULD be consistent with each other, such that well-defined mappings exist from the “lower level” elements to the “higher level” elements. This mapping is also subject to any restrictions on the positions of the <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> objects in the hierarchy that are imposed by the <ref refid="classsbol_1_1_sequence_annotation" kindref="compound">SequenceAnnotation</ref> or <ref refid="classsbol_1_1_sequence_constraint" kindref="compound">SequenceConstraint</ref> objects contained by the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> objects in the hierarchy. The set of relations between <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> and <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> objects is strictly acyclic. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="75" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_component_definition_1a5df8c4893ad6d7c46ab60b6a3c004dff" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_referenced_object" kindref="compound">ReferencedObject</ref></type>
        <definition>ReferencedObject sequences</definition>
        <argsstring></argsstring>
        <name>sequences</name>
        <briefdescription>
<para>The sequences property is OPTIONAL and MAY include a URI that refer to a <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> object. The referenced object defines the primary structure of the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="78" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_component_definition_1a6370970075dac494920780d3b6a72e61" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_owned_object" kindref="compound">OwnedObject</ref>&lt; <ref refid="classsbol_1_1_sequence_annotation" kindref="compound">SequenceAnnotation</ref> &gt; &gt;</type>
        <definition>List&lt;OwnedObject&lt;SequenceAnnotation&gt; &gt; sequenceAnnotations</definition>
        <argsstring></argsstring>
        <name>sequenceAnnotations</name>
        <briefdescription>
<para>The sequenceAnnotations property is OPTIONAL and MAY contain a set of <ref refid="classsbol_1_1_sequence_annotation" kindref="compound">SequenceAnnotation</ref> objects. Each <ref refid="classsbol_1_1_sequence_annotation" kindref="compound">SequenceAnnotation</ref> specifies and describes a potentially discontiguous region on the <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> objects referred to by the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="81" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_component_definition_1aaf7117785844b3ae127ed1e9de48591a" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_owned_object" kindref="compound">OwnedObject</ref>&lt; <ref refid="classsbol_1_1_sequence_constraint" kindref="compound">SequenceConstraint</ref> &gt; &gt;</type>
        <definition>List&lt;OwnedObject&lt;SequenceConstraint&gt; &gt; sequenceConstraints</definition>
        <argsstring></argsstring>
        <name>sequenceConstraints</name>
        <briefdescription>
<para>The sequenceConstraints property is OPTIONAL and MAY contain a set of <ref refid="classsbol_1_1_sequence_constraint" kindref="compound">SequenceConstraint</ref> objects. These objects describe any restrictions on the relative, sequence-based positions and/or orientations of the <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> objects contained by the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>. For example, the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> of a gene might specify that the position of its promoter <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> precedes that of its CDS <ref refid="classsbol_1_1_component" kindref="compound">Component</ref>. This is particularly useful when a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> lacks a <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> and therefore cannot specify the precise, sequence-based positions of its <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> objects using <ref refid="classsbol_1_1_sequence_annotation" kindref="compound">SequenceAnnotation</ref> objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="84" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a7931f7b2727acb83c549e08550707713" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref></type>
        <definition>URIProperty persistentIdentity</definition>
        <argsstring></argsstring>
        <name>persistentIdentity</name>
        <briefdescription>
<para>The persistentIdentity property is OPTIONAL and has a data type of URI. This URI serves to uniquely refer to a set of SBOL objects that are different versions of each other. An <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object MUST be referred to using either its identity URI or its persistentIdentity URI. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="45" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a3190523b5224923d54bdd3a36fb944c3" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_text_property" kindref="compound">TextProperty</ref></type>
        <definition>TextProperty displayId</definition>
        <argsstring></argsstring>
        <name>displayId</name>
        <briefdescription>
<para>The displayId property is an OPTIONAL identifier with a data type of String. This property is intended to be an intermediate between name and identity that is machine-readable, but more human-readable than the full URI of an identity. If the displayId property is used, then its String value SHOULD be locally unique (global uniqueness is not necessary) and MUST be composed of only alphanumeric or underscore characters and MUST NOT begin with a digit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="48" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a5079b9e48247695504e3705983b06ab5" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_version_property" kindref="compound">VersionProperty</ref></type>
        <definition>VersionProperty version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <briefdescription>
<para>If the version property is used, then it is RECOMMENDED that version numbering follow the conventions of <ulink url="http://semver.org/">semantic versioning</ulink>, particularly as implemented by <ulink url="http://maven.apache.org/">Maven</ulink>. This convention represents versions as sequences of numbers and qualifiers that are separated by the characters “.” and “-” and are compared in lexicographical order (for example, 1 &lt; 1.3.1 &lt; 2.0-beta). For a full explanation, see the linked resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="51" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1acc70a7be39e8fb18e4b82ec8069cefd7" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref></type>
        <definition>URIProperty wasDerivedFrom</definition>
        <argsstring></argsstring>
        <name>wasDerivedFrom</name>
        <briefdescription>
<para>The wasDerivedFrom property is OPTIONAL and has a data type of URI. An SBOL object with this property refers to another SBOL object or non-SBOL resource from which this object was derived. If the wasDerivedFrom property of an SBOL object A that refers to an SBOL object B has an identical persistentIdentity, and both A and B have a version, then the version of B MUST precede that of A. In addition, an SBOL object MUST NOT refer to itself via its own wasDerivedFrom property or form a cyclical chain of references via its wasDerivedFrom property and those of other SBOL objects. For example, the reference chain “ A was derived from B and B was derived from A” is cyclical. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="54" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a09b31bcba9970529f7c5e5cf8d80177a" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_referenced_object" kindref="compound">ReferencedObject</ref></type>
        <definition>ReferencedObject wasGeneratedBy</definition>
        <argsstring></argsstring>
        <name>wasGeneratedBy</name>
        <briefdescription>
<para>An <ref refid="classsbol_1_1_activity" kindref="compound">Activity</ref> which generated this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>, eg., a design process like codon-optimization or a construction process like Gibson Assembly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="57" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a47492e4ca2acc9db3be38b80b380ec43" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_text_property" kindref="compound">TextProperty</ref></type>
        <definition>TextProperty name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>The name property is OPTIONAL and has a data type of String. This property is intended to be displayed to a human when visualizing an <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object. If an <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object lacks a name, then software tools SHOULD instead display the object’s displayId or identity. It is RECOMMENDED that software tools give users the ability to switch perspectives between name properties that are human-readable and displayId properties that are less human-readable, but are more likely to be unique. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="60" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a5429303f21e7bc531219954eddca1971" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_text_property" kindref="compound">TextProperty</ref></type>
        <definition>TextProperty description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>The description property is OPTIONAL and has a data type of String. This property is intended to contain a more thorough text description of an <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="63" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_s_b_o_l_object_1aff815c97277df80818d4f77c1eec9ac6" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref></type>
        <definition>URIProperty identity</definition>
        <argsstring></argsstring>
        <name>identity</name>
        <briefdescription>
<para>The identity property is REQUIRED by all <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> objects and has a data type of URI. A given <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object’s identity URI MUST be globally unique among all other identity URIs. The identity of a compliant SBOL object MUST begin with a URI prefix that maps to a domain over which the user has control. Namely, the user can guarantee uniqueness of identities within this domain. For other best practices regarding URIs see Section 11.2 of the <ulink url="http://sbolstandard.org/wp-content/uploads/2015/08/SBOLv2.0.1.pdf">SBOL specification doucment</ulink>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="90" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a830840ee9103e8e0f1209fefb4ebfabd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComponentDefinition</definition>
        <argsstring>(std::string uri=&quot;example&quot;, std::string type=BIOPAX_DNA, std::string version=&quot;1.0.0&quot;)</argsstring>
        <name>ComponentDefinition</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
          <defval>&quot;example&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>type</declname>
          <defval><ref refid="constants_8h_1aa08e807e9ad29c17c56e3b17f088f6cc" kindref="member">BIOPAX_DNA</ref></defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
          <defval>&quot;1.0.0&quot;</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A full URI including a scheme, namespace, and identifier. If SBOLCompliance configuration is enabled, then this argument is simply the displayId for the new object and a full URI will automatically be constructed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>A BioPAX ontology term that indicates whether the <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> is DNA, RNA, protein, or some other molecule type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>An arbitrary version string. If SBOLCompliance is enabled, this should be a Maven version string of the form &quot;major.minor.patch&quot;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="90" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a27161b83d63eab567db7ed752fd1b432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assemble</definition>
        <argsstring>(std::vector&lt; ComponentDefinition * &gt; list_of_components)</argsstring>
        <name>assemble</name>
        <param>
          <type>std::vector&lt; <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> * &gt;</type>
          <declname>list_of_components</declname>
        </param>
        <briefdescription>
<para>Assembles the provided vector of Components into a structural hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>Autoconstructs the required Components and SequenceConstraints. The resulting data structure is an abstract design, still lacking a specific DNA (or other) sequence. To fully realize a design, use <ref refid="classsbol_1_1_sequence_1a7e7e46c2233496d813007261441efcff" kindref="member">Sequence::assemble()</ref>. This method assumes all arguments are already contained in a <ref refid="classsbol_1_1_document" kindref="compound">Document</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_of_components</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of subcomponents that will compose this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1abb20b3681056bbc6d1f376ebcc49ef87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assemble</definition>
        <argsstring>(std::vector&lt; ComponentDefinition * &gt; list_of_components, Document &amp;doc)</argsstring>
        <name>assemble</name>
        <param>
          <type>std::vector&lt; <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> * &gt;</type>
          <declname>list_of_components</declname>
        </param>
        <param>
          <type><ref refid="classsbol_1_1_document" kindref="compound">Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Assembles the provided vector of Components into a structural hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>Autoconstructs the required Components and SequenceConstraints. The resulting data structure is a partial design, still lacking a specific DNA (or other) sequence. To fully realize a design, use <ref refid="classsbol_1_1_sequence_1a7e7e46c2233496d813007261441efcff" kindref="member">Sequence::assemble()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_of_components</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of subcomponents that will compose this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classsbol_1_1_document" kindref="compound">Document</ref> to which the assembled ComponentDefinitions will be added </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1adfa0a8867aab5246e09cf38b6e73701d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string updateSequence</definition>
        <argsstring>(std::string composite_sequence=&quot;&quot;)</argsstring>
        <name>updateSequence</name>
        <param>
          <type>std::string</type>
          <declname>composite_sequence</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Assemble a parent <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>&apos;s <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> from its subcomponent Sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>composite_sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>A recursive parameter, use default value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The assembled parent sequence </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="105" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="183" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a2b8ecda127d02e42838e9d22808fb17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> * &gt;</type>
        <definition>vector&lt; Component * &gt; getInSequentialOrder</definition>
        <argsstring>()</argsstring>
        <name>getInSequentialOrder</name>
        <briefdescription>
<para>Orders this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>&apos;s member Components into a linear arrangement based on <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> Constraints. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Primary sequence structure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="109" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="162" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a27287e7d20ffe00b3a0b5070d3c9b052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hasUpstreamComponent</definition>
        <argsstring>(Component &amp;current_component)</argsstring>
        <name>hasUpstreamComponent</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>current_component</declname>
        </param>
        <briefdescription>
<para>Checks if the specified <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> has a <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> upstream in linear arrangement on the DNA strand. </para>        </briefdescription>
        <detaileddescription>
<para>Checks that the appropriate <ref refid="classsbol_1_1_sequence_constraint" kindref="compound">SequenceConstraint</ref> exists. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_component</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> in this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if found, 0 if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="114" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="34" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1aeaad1c8965a1eb32eb8df404dbc71627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
        <definition>Component &amp; getUpstreamComponent</definition>
        <argsstring>(Component &amp;current_component)</argsstring>
        <name>getUpstreamComponent</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>current_component</declname>
        </param>
        <briefdescription>
<para>Get the upstream <ref refid="classsbol_1_1_component" kindref="compound">Component</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The upstream component </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="118" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="74" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a96a1b04568b582070aff16b0cdf29545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hasDownstreamComponent</definition>
        <argsstring>(Component &amp;current_component)</argsstring>
        <name>hasDownstreamComponent</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>current_component</declname>
        </param>
        <briefdescription>
<para>Checks if the specified <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> has a <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> downstream in linear arrangement on the DNA strand. </para>        </briefdescription>
        <detaileddescription>
<para>Checks that the appropriate <ref refid="classsbol_1_1_sequence_constraint" kindref="compound">SequenceConstraint</ref> exists. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_component</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> in this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if found, 0 if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="123" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="54" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a24beb7eec4f540c77220218931525e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
        <definition>Component &amp; getDownstreamComponent</definition>
        <argsstring>(Component &amp;current_component)</argsstring>
        <name>getDownstreamComponent</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>current_component</declname>
        </param>
        <briefdescription>
<para>Get the downstream <ref refid="classsbol_1_1_component" kindref="compound">Component</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The downstream component </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="127" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="97" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a43a587726be3af52752d8707f9799b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
        <definition>Component &amp; getFirstComponent</definition>
        <argsstring>()</argsstring>
        <name>getFirstComponent</name>
        <briefdescription>
<para>Gets the first <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> in a linear sequence. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first component in sequential order </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="131" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="120" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a50cf12cd8946082a79d31887790a00f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
        <definition>Component &amp; getLastComponent</definition>
        <argsstring>()</argsstring>
        <name>getLastComponent</name>
        <briefdescription>
<para>Gets the last <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> in a linear sequence. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last component in sequential order </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="135" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="139" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a3708125150de209027c120f0cbf2192a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> * &gt;</type>
        <definition>vector&lt; ComponentDefinition * &gt; applyToComponentHierarchy</definition>
        <argsstring>(void(*callback_fn)(ComponentDefinition *, void *)=NULL, void *user_data=NULL)</argsstring>
        <name>applyToComponentHierarchy</name>
        <param>
          <type>void(*)(<ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> *, void *)</type>
          <declname>callback_fn</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Perform an operation on every <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> in a structurally-linked hierarchy of Components by applying a callback function. </para>        </briefdescription>
        <detaileddescription>
<para>If no callback is specified, the default behavior is to return a pointer list of each <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> in the hierarchy. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback_fun</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a callback function with signature void callback_fn(ComponentDefinition *, void *). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary user data which can be passed in and out of the callback as an argument or return value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a flat list of pointers to all Components in the hierarchy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="141" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="832" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a63869c3a2bdda51b52bea31fcc745f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> * &gt;</type>
        <definition>std::vector&lt; ComponentDefinition * &gt; getPrimaryStructure</definition>
        <argsstring>()</argsstring>
        <name>getPrimaryStructure</name>
        <briefdescription>
<para>Get the primary sequence of a design in terms of its sequentially ordered Components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="144" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="1276" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1ab6b3cafbc6849e0987bc16ea17c5935f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertDownstream</definition>
        <argsstring>(Component &amp;target, ComponentDefinition &amp;insert)</argsstring>
        <name>insertDownstream</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> &amp;</type>
          <declname>insert</declname>
        </param>
        <briefdescription>
<para>Insert a <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> downstream of another in a primary sequence, shifting any adjacent Components dowstream as well. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> will be upstream of the insert <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> after this operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert</parametername>
</parameternamelist>
<parameterdescription>
<para>The insert <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> is inserted downstream of the target <ref refid="classsbol_1_1_component" kindref="compound">Component</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="149" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="1028" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a52ba233177a1f2ac358169af4398ffcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertUpstream</definition>
        <argsstring>(Component &amp;target, ComponentDefinition &amp;insert)</argsstring>
        <name>insertUpstream</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> &amp;</type>
          <declname>insert</declname>
        </param>
        <briefdescription>
<para>Insert a <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> upstream of another in a primary sequence, shifting any adjacent Components upstream as well. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> will be downstream of the insert <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> after this operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert</parametername>
</parameternamelist>
<parameterdescription>
<para>The insert <ref refid="classsbol_1_1_component" kindref="compound">Component</ref> is inserted upstream of the target <ref refid="classsbol_1_1_component" kindref="compound">Component</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="154" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="1099" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a7e3f6c5e39e12d07f26163c6972edfd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addUpstreamFlank</definition>
        <argsstring>(Component &amp;target, std::string elements)</argsstring>
        <name>addUpstreamFlank</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
<para>This may be a useful method when building up SBOL representations of natural DNA sequences. </para>        </briefdescription>
        <detaileddescription>
<para>For example it is often necessary to specify components that are assumed to have no meaningful role in the design, but are nevertheless important to fill in regions of sequence. This method autoconstructs a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> and <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> object to create an arbitrary flanking sequence around design Components. The new <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> will have <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> Ontology type of flanking_region or SO:0000239 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The new flanking sequence will be placed upstream of the target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>The primary sequence elements will be assigned to the autoconstructed <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> object. The encoding is inferred </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="159" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="1168" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1ad3c98287da0e654a948decf949c185a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addDownstreamFlank</definition>
        <argsstring>(Component &amp;target, std::string elements)</argsstring>
        <name>addDownstreamFlank</name>
        <param>
          <type><ref refid="classsbol_1_1_component" kindref="compound">Component</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
<para>This may be a useful method when building up SBOL representations of natural DNA sequences. </para>        </briefdescription>
        <detaileddescription>
<para>For example it is often necessary to specify components that are assumed to have no meaningful role in the design, but are nevertheless important to fill in regions of sequence. This method autoconstructs a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> and <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> object to create an arbitrary flanking sequence around design Components. The new <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> will have <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> Ontology type of flanking_sequence. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The new flanking sequence will be placed downstream of the target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>The primary sequence elements will be assigned to the autoconstructed <ref refid="classsbol_1_1_sequence" kindref="compound">Sequence</ref> object. The encoding is inferred </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="164" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="1222" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1a8e67828577192ba8b2cb8aabb28128b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> &amp;</type>
        <definition>ComponentDefinition &amp; build</definition>
        <argsstring>()</argsstring>
        <name>build</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="167" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="677" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1ab1954c9bd44750d212d4a068f3c30f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void participate</definition>
        <argsstring>(Participation &amp;species)</argsstring>
        <name>participate</name>
        <param>
          <type><ref refid="classsbol_1_1_participation" kindref="compound">Participation</ref> &amp;</type>
          <declname>species</declname>
        </param>
        <briefdescription>
<para>A convenience method that assigns a component to participate in a biochemical reaction. </para>        </briefdescription>
        <detaileddescription>
<para>Behind the scenes, it auto-constructs a <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> for this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> and assigns it to a <ref refid="classsbol_1_1_participation" kindref="compound">Participation</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>species</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classsbol_1_1_participation" kindref="compound">Participation</ref> object (ie, participant species in a biochemical <ref refid="classsbol_1_1_interaction" kindref="compound">Interaction</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="171" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="682" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1af2efd2e5c8f9ebcb3d4e4c1c405ba995" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~ComponentDefinition</definition>
        <argsstring>()</argsstring>
        <name>~ComponentDefinition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="173" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_component_definition_1ab655526c05874e990dbd6e397e1fbc0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComponentDefinition</definition>
        <argsstring>(sbol_type type, std::string uri, std::string component_type, std::string version)</argsstring>
        <name>ComponentDefinition</name>
        <param>
          <type><ref refid="property_8h_1addc3413015529a8d51e055f32748821f" kindref="member">sbol_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>component_type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="176" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="176" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_top_level_1ac920fa6a4205992d8cfe2254083d62ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addToDocument</definition>
        <argsstring>(sbol::Document &amp;)</argsstring>
        <name>addToDocument</name>
        <param>
          <type><ref refid="classsbol_1_1_document" kindref="compound">sbol::Document</ref> &amp;</type>
          <defname>doc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/toplevel.h" line="60" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.cpp" bodystart="1047" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_top_level_1ac9c905af9efe1c313a0b284a1bef25d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SBOLClass</type>
          </param>
        </templateparamlist>
        <type>SBOLClass &amp;</type>
        <definition>SBOLClass &amp; copy</definition>
        <argsstring>(Document *target_doc=NULL, std::string ns=&quot;&quot;, std::string version=&quot;&quot;)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classsbol_1_1_document" kindref="compound">Document</ref> *</type>
          <declname>target_doc</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>ns</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Recursively copies an object. </para>        </briefdescription>
        <detaileddescription>
<para>Use this to copy an object to a new document, a new namespace, or to increment its version recursively. An object be recursively copied into a new document and a new namespace, assuming compliant URIs. If the optional version argument is specified, it will be used instead of incrementing the copied object&apos;s version (this can be used when using a custom versioning scheme other than libSBOL&apos;s default). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SBOLClass</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of SBOL object being copied </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The new copies will be attached to this <ref refid="classsbol_1_1_document" kindref="compound">Document</ref>. NULL by default. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ns</parametername>
</parameternamelist>
<parameterdescription>
<para>This namespace will be substituted for the current namespace (as configured by setHomespace) in all SBOL-compliant URIs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>A new version </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The copied object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/toplevel.h" line="69" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.h" bodystart="788" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_identified_1a8d8d8b67ca7d18b4e98b9289234e1ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SBOLClass</type>
          </param>
        </templateparamlist>
        <type>SBOLClass &amp;</type>
        <definition>SBOLClass &amp; copy</definition>
        <argsstring>(std::string ns=&quot;&quot;, std::string version=&quot;&quot;)</argsstring>
        <name>copy</name>
        <param>
          <type>std::string</type>
          <declname>ns</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="66" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_top_level_1a3ab528aa9cdfed95062856759a6e952d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SBOLClass</type>
          </param>
        </templateparamlist>
        <type>SBOLClass &amp;</type>
        <definition>SBOLClass &amp; simpleCopy</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>simpleCopy</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Copies an object. </para>        </briefdescription>
        <detaileddescription>
<para>No child objects are copied. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A URI for the new object, or a displayId if operating in SBOLCompliant mode </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/toplevel.h" line="73" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.h" bodystart="804" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1aaeae46cf11cccb87655dc22526bacf3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="property_8h_1addc3413015529a8d51e055f32748821f" kindref="member">sbol_type</ref></type>
        <definition>sbol_type getTypeURI</definition>
        <argsstring>()</argsstring>
        <name>getTypeURI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The uniform resource identifier that describes the RDF-type of this SBOL Object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="101" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a31646e8a2306697fd0a183eeb7313271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getClassName</definition>
        <argsstring>(std::string type)</argsstring>
        <name>getClassName</name>
        <param>
          <type>std::string</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Parses a local class name from the RDF-type of this SBOL Object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="104" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ad2b19c3408c3dd28816c2329d6ef7d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> *</type>
        <definition>SBOLObject * find</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>find</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Search this object recursively to see if an object with the URI already exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to theobject with this URI if it exists, NULL otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="109" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="249" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ae38856f1013ce2e9171c8f898833e0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> *</type>
        <definition>SBOLObject * find_property</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>find_property</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Search this object recursively to see if it contains a member property with the given RDF type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The RDF type of the property to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the object that contains a member property with the specified RDF type, NULL otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="114" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="266" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1acb2e46c6541e8201a5ceddcc390fbb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> * &gt;</type>
        <definition>vector&lt; SBOLObject * &gt; find_reference</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>find_reference</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="116" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="283" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ad593fa86924521afaff0e888083da20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare</definition>
        <argsstring>(SBOLObject *comparand)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> *</type>
          <declname>comparand</declname>
        </param>
        <briefdescription>
<para>Compare two SBOL objects or Documents. </para>        </briefdescription>
        <detaileddescription>
<para>The behavior is currently undefined for objects with custom annotations or extension classes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comparand</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the object being compared to this one. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the objects are identical, 0 if they are different </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="121" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="91" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a473e3642b7aae350da342aed2aba8063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getPropertyValue</definition>
        <argsstring>(std::string property_uri)</argsstring>
        <name>getPropertyValue</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <briefdescription>
<para>Get the value of a custom annotation property by its URI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the property or SBOL_ERROR_NOT_FOUND </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="126" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="320" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ac77c72928e1e50863f519c049b1c05c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; getPropertyValues</definition>
        <argsstring>(std::string property_uri)</argsstring>
        <name>getPropertyValues</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <briefdescription>
<para>Get all values of a custom annotation property by its URI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of property values or SBOL_ERROR_NOT_FOUND </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="131" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="346" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a35bda67dde48ab7e2ad5444854c59115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; getProperties</definition>
        <argsstring>()</argsstring>
        <name>getProperties</name>
        <briefdescription>
<para>Gets URIs for all properties contained by this object. </para>        </briefdescription>
        <detaileddescription>
<para>This includes SBOL core properties as well as custom annotations. Use this to find custom extension data in an SBOL file. <simplesect kind="return"><para>A vector of URIs that identify the properties contained in this object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="135" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="362" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ac51e845ed09e37c89fcb445ebf115e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPropertyValue</definition>
        <argsstring>(std::string property_uri, std::string val)</argsstring>
        <name>setPropertyValue</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the value for a user-defined annotation property. </para>        </briefdescription>
        <detaileddescription>
<para>If the value is a URI, it should be surrounded by angle brackets, else it will be interpreted as a literal value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="139" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="331" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a52bb01a95f41305fe14e32746f77b177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setAnnotation</definition>
        <argsstring>(std::string property_uri, std::string val)</argsstring>
        <name>setAnnotation</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the value for a user-defined annotation property. </para>        </briefdescription>
        <detaileddescription>
<para>Synonymous with setPropertyValue  If the value is a URI, it should be surrounded by angle brackets, else it will be interpreted as a literal value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="143" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a66461d609a9b787c2c331c9b98df6370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getAnnotation</definition>
        <argsstring>(std::string property_uri)</argsstring>
        <name>getAnnotation</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <briefdescription>
<para>Get the value of a custom annotation property by its URI. </para>        </briefdescription>
        <detaileddescription>
<para>Synonymous with getPropertyValue <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the property or SBOL_ERROR_NOT_FOUND </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="148" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Use this method to destroy an SBOL object that is not contained by a parent <ref refid="classsbol_1_1_document" kindref="compound">Document</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the object does have a parent <ref refid="classsbol_1_1_document" kindref="compound">Document</ref>, instead use doc.close() with the object&apos;s URI identity as an argument.  Recurse through child objects and delete them. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="153" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsbol_1_1_s_b_o_l_object_1a9b3ae362e4afcfc5aafc65ecb74ccd55" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::string &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::string&gt; namespaces</definition>
        <argsstring></argsstring>
        <name>namespaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="59" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1afd4700481a78488d61e0e3d69d255447" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(raptor_serializer *sbol_serializer, raptor_world *sbol_world=NULL)</argsstring>
        <name>serialize</name>
        <param>
          <type>raptor_serializer *</type>
          <declname>sbol_serializer</declname>
        </param>
        <param>
          <type>raptor_world *</type>
          <declname>sbol_world</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="60" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.cpp" bodystart="902" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1aef9af938cf38da9936de185e82f79128" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nest</definition>
        <argsstring>(std::string &amp;rdfxml_buffer)</argsstring>
        <name>nest</name>
        <param>
          <type>std::string &amp;</type>
          <declname>rdfxml_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="61" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.cpp" bodystart="425" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1aa6a71b75eb2b9b011984b60bde291f96" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string makeQName</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>makeQName</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="62" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="307" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a05b892a9ebcc8529df597d3578560ccf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExtensionClass</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void register_extension_class</definition>
        <argsstring>(std::string ns, std::string ns_prefix, std::string class_name)</argsstring>
        <name>register_extension_class</name>
        <param>
          <type>std::string</type>
          <declname>ns</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ns_prefix</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>class_name</declname>
        </param>
        <briefdescription>
<para>Register an extension class and its namespace, so custom data can be embedded into and read from SBOL files. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ExtensionClass</parametername>
</parameternamelist>
<parameterdescription>
<para>The new class </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ns</parametername>
</parameternamelist>
<parameterdescription>
<para>The extension namespace, eg, <ulink url="http://myhome.org/my_extension#">http://myhome.org/my_extension#</ulink>. It&apos;s important that the namespace ends in a forward-slash or hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ns_prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>A shorthand symbol for the full namespace as it will appear in the output file, eg, my_extension </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="68" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.h" bodystart="815" bodyend="820"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> class represents the structural entities of a biological design. </para>    </briefdescription>
    <detaileddescription>
<para>The primary usage of this class is to represent structural entities with designed sequences, such as DNA, RNA, and proteins, but it can also be used to represent any other entity that is part of a design, such as small molecules, proteins, and complexes </para>    </detaileddescription>
    <inheritancegraph>
      <node id="284">
        <label>Identified</label>
        <link refid="classsbol_1_1_identified"/>
        <childnode refid="285" relation="public-inheritance">
        </childnode>
      </node>
      <node id="283">
        <label>TopLevel</label>
        <link refid="classsbol_1_1_top_level"/>
        <childnode refid="284" relation="public-inheritance">
        </childnode>
      </node>
      <node id="282">
        <label>ComponentDefinition</label>
        <link refid="classsbol_1_1_component_definition"/>
        <childnode refid="283" relation="public-inheritance">
        </childnode>
      </node>
      <node id="285">
        <label>SBOLObject</label>
        <link refid="classsbol_1_1_s_b_o_l_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="292">
        <label>iterator</label>
        <link refid="classsbol_1_1_property_1_1iterator"/>
      </node>
      <node id="304">
        <label>List&lt; sbol::OwnedObject&lt; sbol::SequenceAnnotation &gt; &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="305" relation="public-inheritance">
        </childnode>
      </node>
      <node id="288">
        <label>Identified</label>
        <link refid="classsbol_1_1_identified"/>
        <childnode refid="289" relation="public-inheritance">
        </childnode>
        <childnode refid="290" relation="usage">
          <edgelabel>+wasDerivedFrom</edgelabel>
          <edgelabel>+persistentIdentity</edgelabel>
        </childnode>
        <childnode refid="293" relation="usage">
          <edgelabel>+version</edgelabel>
        </childnode>
        <childnode refid="295" relation="usage">
          <edgelabel>+wasGeneratedBy</edgelabel>
        </childnode>
        <childnode refid="294" relation="usage">
          <edgelabel>+name</edgelabel>
          <edgelabel>+description</edgelabel>
          <edgelabel>+displayId</edgelabel>
        </childnode>
      </node>
      <node id="297">
        <label>List&lt; sbol::OwnedObject&lt; sbol::Component &gt; &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="298" relation="public-inheritance">
        </childnode>
      </node>
      <node id="296">
        <label>iterator</label>
        <link refid="classsbol_1_1_referenced_object_1_1iterator"/>
      </node>
      <node id="291">
        <label>Property&lt; std::string &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="289" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="292" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="301">
        <label>List&lt; sbol::OwnedObject&lt; sbol::SequenceConstraint &gt; &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="302" relation="public-inheritance">
        </childnode>
      </node>
      <node id="305">
        <label>OwnedObject&lt; sbol::SequenceAnnotation &gt;</label>
        <link refid="classsbol_1_1_owned_object"/>
        <childnode refid="306" relation="public-inheritance">
        </childnode>
      </node>
      <node id="287">
        <label>TopLevel</label>
        <link refid="classsbol_1_1_top_level"/>
        <childnode refid="288" relation="public-inheritance">
        </childnode>
      </node>
      <node id="286">
        <label>ComponentDefinition</label>
        <link refid="classsbol_1_1_component_definition"/>
        <childnode refid="287" relation="public-inheritance">
        </childnode>
        <childnode refid="297" relation="usage">
          <edgelabel>+components</edgelabel>
        </childnode>
        <childnode refid="300" relation="usage">
          <edgelabel>+types</edgelabel>
          <edgelabel>+roles</edgelabel>
        </childnode>
        <childnode refid="301" relation="usage">
          <edgelabel>+sequenceConstraints</edgelabel>
        </childnode>
        <childnode refid="304" relation="usage">
          <edgelabel>+sequenceAnnotations</edgelabel>
        </childnode>
        <childnode refid="295" relation="usage">
          <edgelabel>+sequences</edgelabel>
        </childnode>
      </node>
      <node id="294">
        <label>TextProperty</label>
        <link refid="classsbol_1_1_text_property"/>
        <childnode refid="291" relation="public-inheritance">
        </childnode>
      </node>
      <node id="298">
        <label>OwnedObject&lt; sbol::Component &gt;</label>
        <link refid="classsbol_1_1_owned_object"/>
        <childnode refid="299" relation="public-inheritance">
        </childnode>
      </node>
      <node id="295">
        <label>ReferencedObject</label>
        <link refid="classsbol_1_1_referenced_object"/>
        <childnode refid="290" relation="public-inheritance">
        </childnode>
        <childnode refid="296" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="302">
        <label>OwnedObject&lt; sbol::SequenceConstraint &gt;</label>
        <link refid="classsbol_1_1_owned_object"/>
        <childnode refid="303" relation="public-inheritance">
        </childnode>
      </node>
      <node id="289">
        <label>SBOLObject</label>
        <link refid="classsbol_1_1_s_b_o_l_object"/>
        <childnode refid="290" relation="usage">
          <edgelabel>+identity</edgelabel>
        </childnode>
      </node>
      <node id="303">
        <label>Property&lt; sbol::SequenceConstraint &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="289" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="292" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="290">
        <label>URIProperty</label>
        <link refid="classsbol_1_1_u_r_i_property"/>
        <childnode refid="291" relation="public-inheritance">
        </childnode>
      </node>
      <node id="306">
        <label>Property&lt; sbol::SequenceAnnotation &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="289" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="292" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="293">
        <label>VersionProperty</label>
        <link refid="classsbol_1_1_version_property"/>
        <childnode refid="294" relation="public-inheritance">
        </childnode>
      </node>
      <node id="300">
        <label>List&lt; sbol::URIProperty &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="290" relation="public-inheritance">
        </childnode>
      </node>
      <node id="299">
        <label>Property&lt; sbol::Component &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="289" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="292" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" line="46" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/componentdefinition.h" bodystart="45" bodyend="197"/>
    <listofallmembers>
      <member refid="classsbol_1_1_component_definition_1ad3c98287da0e654a948decf949c185a0" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>addDownstreamFlank</name></member>
      <member refid="classsbol_1_1_top_level_1ac920fa6a4205992d8cfe2254083d62ae" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>addToDocument</name></member>
      <member refid="classsbol_1_1_component_definition_1a7e3f6c5e39e12d07f26163c6972edfd8" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>addUpstreamFlank</name></member>
      <member refid="classsbol_1_1_component_definition_1a3708125150de209027c120f0cbf2192a" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>applyToComponentHierarchy</name></member>
      <member refid="classsbol_1_1_component_definition_1a27161b83d63eab567db7ed752fd1b432" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>assemble</name></member>
      <member refid="classsbol_1_1_component_definition_1abb20b3681056bbc6d1f376ebcc49ef87" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>assemble</name></member>
      <member refid="classsbol_1_1_component_definition_1a8e67828577192ba8b2cb8aabb28128b0" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>build</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>close</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ad593fa86924521afaff0e888083da20d" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>compare</name></member>
      <member refid="classsbol_1_1_component_definition_1a830840ee9103e8e0f1209fefb4ebfabd" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>ComponentDefinition</name></member>
      <member refid="classsbol_1_1_component_definition_1ab655526c05874e990dbd6e397e1fbc0e" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>ComponentDefinition</name></member>
      <member refid="classsbol_1_1_component_definition_1a9ba130a49d9f50e5c3be54a417ea3512" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>components</name></member>
      <member refid="classsbol_1_1_top_level_1ac9c905af9efe1c313a0b284a1bef25d7" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>copy</name></member>
      <member refid="classsbol_1_1_identified_1a8d8d8b67ca7d18b4e98b9289234e1ee6" prot="public" virt="non-virtual" ambiguityscope="sbol::Identified::"><scope>sbol::ComponentDefinition</scope><name>copy</name></member>
      <member refid="classsbol_1_1_identified_1a5429303f21e7bc531219954eddca1971" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>description</name></member>
      <member refid="classsbol_1_1_identified_1a3190523b5224923d54bdd3a36fb944c3" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>displayId</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ad2b19c3408c3dd28816c2329d6ef7d07" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>find</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ae38856f1013ce2e9171c8f898833e0ab" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>find_property</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1acb2e46c6541e8201a5ceddcc390fbb20" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>find_reference</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a66461d609a9b787c2c331c9b98df6370" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getAnnotation</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a31646e8a2306697fd0a183eeb7313271" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getClassName</name></member>
      <member refid="classsbol_1_1_component_definition_1a24beb7eec4f540c77220218931525e9e" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getDownstreamComponent</name></member>
      <member refid="classsbol_1_1_component_definition_1a43a587726be3af52752d8707f9799b32" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getFirstComponent</name></member>
      <member refid="classsbol_1_1_component_definition_1a2b8ecda127d02e42838e9d22808fb17c" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getInSequentialOrder</name></member>
      <member refid="classsbol_1_1_component_definition_1a50cf12cd8946082a79d31887790a00f4" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getLastComponent</name></member>
      <member refid="classsbol_1_1_component_definition_1a63869c3a2bdda51b52bea31fcc745f23" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getPrimaryStructure</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a35bda67dde48ab7e2ad5444854c59115" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getProperties</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a473e3642b7aae350da342aed2aba8063" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getPropertyValue</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ac77c72928e1e50863f519c049b1c05c4" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getPropertyValues</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aaeae46cf11cccb87655dc22526bacf3e" prot="public" virt="virtual"><scope>sbol::ComponentDefinition</scope><name>getTypeURI</name></member>
      <member refid="classsbol_1_1_component_definition_1aeaad1c8965a1eb32eb8df404dbc71627" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>getUpstreamComponent</name></member>
      <member refid="classsbol_1_1_component_definition_1a96a1b04568b582070aff16b0cdf29545" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>hasDownstreamComponent</name></member>
      <member refid="classsbol_1_1_component_definition_1a27287e7d20ffe00b3a0b5070d3c9b052" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>hasUpstreamComponent</name></member>
      <member refid="classsbol_1_1_identified_1af758b0c868587dd04b42248df4510f31" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>Identified</name></member>
      <member refid="classsbol_1_1_identified_1a9007fe0b6a11bf369de86f7320e929ac" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>Identified</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aff815c97277df80818d4f77c1eec9ac6" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>identity</name></member>
      <member refid="classsbol_1_1_component_definition_1ab6b3cafbc6849e0987bc16ea17c5935f" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>insertDownstream</name></member>
      <member refid="classsbol_1_1_component_definition_1a52ba233177a1f2ac358169af4398ffcc" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>insertUpstream</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aa6a71b75eb2b9b011984b60bde291f96" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>makeQName</name></member>
      <member refid="classsbol_1_1_identified_1a47492e4ca2acc9db3be38b80b380ec43" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>name</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a9b3ae362e4afcfc5aafc65ecb74ccd55" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>namespaces</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aef9af938cf38da9936de185e82f79128" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>nest</name></member>
      <member refid="classsbol_1_1_component_definition_1ab1954c9bd44750d212d4a068f3c30f60" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>participate</name></member>
      <member refid="classsbol_1_1_identified_1a7931f7b2727acb83c549e08550707713" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>persistentIdentity</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a05b892a9ebcc8529df597d3578560ccf" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>register_extension_class</name></member>
      <member refid="classsbol_1_1_component_definition_1a554ef7c2d135daea2b27c8328d04469f" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>roles</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a81769444e287f550fa7f20d1390a3ce2" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ad900b14a1efe773614d3845ef1fa97a6" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a3d8574d4b5b196c42578877048db06d2" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aa275e4a05b4bb5f36ed95df70409aeb0" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_component_definition_1a6370970075dac494920780d3b6a72e61" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>sequenceAnnotations</name></member>
      <member refid="classsbol_1_1_component_definition_1aaf7117785844b3ae127ed1e9de48591a" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>sequenceConstraints</name></member>
      <member refid="classsbol_1_1_component_definition_1a5df8c4893ad6d7c46ab60b6a3c004dff" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>sequences</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1afd4700481a78488d61e0e3d69d255447" prot="protected" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>serialize</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a52bb01a95f41305fe14e32746f77b177" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>setAnnotation</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ac51e845ed09e37c89fcb445ebf115e0d" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>setPropertyValue</name></member>
      <member refid="classsbol_1_1_top_level_1a3ab528aa9cdfed95062856759a6e952d" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>simpleCopy</name></member>
      <member refid="classsbol_1_1_top_level_1a0beff4a6982fe2bc3acf5f917321b28e" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>TopLevel</name></member>
      <member refid="classsbol_1_1_component_definition_1ab563237ddc0363ecbd245b5f791f2900" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>types</name></member>
      <member refid="classsbol_1_1_component_definition_1adfa0a8867aab5246e09cf38b6e73701d" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>updateSequence</name></member>
      <member refid="classsbol_1_1_identified_1a5079b9e48247695504e3705983b06ab5" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>version</name></member>
      <member refid="classsbol_1_1_identified_1acc70a7be39e8fb18e4b82ec8069cefd7" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>wasDerivedFrom</name></member>
      <member refid="classsbol_1_1_identified_1a09b31bcba9970529f7c5e5cf8d80177a" prot="public" virt="non-virtual"><scope>sbol::ComponentDefinition</scope><name>wasGeneratedBy</name></member>
      <member refid="classsbol_1_1_component_definition_1af2efd2e5c8f9ebcb3d4e4c1c405ba995" prot="public" virt="virtual"><scope>sbol::ComponentDefinition</scope><name>~ComponentDefinition</name></member>
      <member refid="classsbol_1_1_identified_1a501a7c997382e52c756b9da4e7cb7339" prot="public" virt="virtual"><scope>sbol::ComponentDefinition</scope><name>~Identified</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ac68c7e3661d1acc561312bc2904b60f8" prot="public" virt="virtual"><scope>sbol::ComponentDefinition</scope><name>~SBOLObject</name></member>
      <member refid="classsbol_1_1_top_level_1aec4c34135bcc56b1b122b80bb56ad756" prot="public" virt="virtual"><scope>sbol::ComponentDefinition</scope><name>~TopLevel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
