<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classsbol_1_1_module_definition" kind="class" language="C++" prot="public">
    <compoundname>sbol::ModuleDefinition</compoundname>
    <basecompoundref refid="classsbol_1_1_top_level" prot="public" virt="non-virtual">TopLevel</basecompoundref>
    <includes local="no">/Users/bryan/Dev/libSBOL/source/moduledefinition.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsbol_1_1_module_definition_1a554ef7c2d135daea2b27c8328d04469f" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref> &gt;</type>
        <definition>List&lt;URIProperty&gt; roles</definition>
        <argsstring></argsstring>
        <name>roles</name>
        <briefdescription>
<para>The roles property is an OPTIONAL set of URIs that clarifies the intended function of a <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>. These URIs might identify descriptive biological roles, such as “metabolic pathway” and “signaling cascade,” but they can also identify identify “logical” roles, such as “inverter” or “AND gate”, or other abstract roles for describing the function of design. Interpretation of the meaning of such roles currently depends on the software tools that read and write them. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="48" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_module_definition_1a0248a46d5c76787d2590b0d062efc792" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_owned_object" kindref="compound">OwnedObject</ref>&lt; <ref refid="classsbol_1_1_module" kindref="compound">Module</ref> &gt; &gt;</type>
        <definition>List&lt;OwnedObject&lt;Module&gt; &gt; modules</definition>
        <argsstring></argsstring>
        <name>modules</name>
        <briefdescription>
<para>The modules property is OPTIONAL and MAY specify a set of <ref refid="classsbol_1_1_module" kindref="compound">Module</ref> objects contained by the <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>. While the <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> class is analogous to a specification sheet for a system of interacting biological elements, the <ref refid="classsbol_1_1_module" kindref="compound">Module</ref> class represents the occurrence of a particular subsystem within the system. Hence, this class allows a system design to include multiple instances of a subsystem, all defined by reference to the same <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>. For example, consider the <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> for a network of two-input repressor devices in which the particular repressors have not been chosen yet. This <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> could contain multiple <ref refid="classsbol_1_1_module" kindref="compound">Module</ref> objects that refer to the same <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> of an abstract two-input repressor device. Note that the set of relations between <ref refid="classsbol_1_1_module" kindref="compound">Module</ref> and <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> objects is strictly acyclic. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="51" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_module_definition_1aa6c8f307f079672360dd746e7058fd43" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_owned_object" kindref="compound">OwnedObject</ref>&lt; <ref refid="classsbol_1_1_interaction" kindref="compound">Interaction</ref> &gt; &gt;</type>
        <definition>List&lt;OwnedObject&lt;Interaction&gt; &gt; interactions</definition>
        <argsstring></argsstring>
        <name>interactions</name>
        <briefdescription>
<para>The interactions property is OPTIONAL and MAY specify a set of <ref refid="classsbol_1_1_interaction" kindref="compound">Interaction</ref> objects within the <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>. The <ref refid="classsbol_1_1_interaction" kindref="compound">Interaction</ref> class provides an abstract, machine-readable representation of entity behavior within a <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>. Each <ref refid="classsbol_1_1_interaction" kindref="compound">Interaction</ref> contains <ref refid="classsbol_1_1_participation" kindref="compound">Participation</ref> objects that indicate the roles of the <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> objects involved in the <ref refid="classsbol_1_1_interaction" kindref="compound">Interaction</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="54" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_module_definition_1a7dbc7eb36a087aa983d0cf2cc69c1ed4" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_list" kindref="compound">List</ref>&lt; <ref refid="classsbol_1_1_owned_object" kindref="compound">OwnedObject</ref>&lt; <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> &gt; &gt;</type>
        <definition>List&lt;OwnedObject&lt;FunctionalComponent&gt; &gt; functionalComponents</definition>
        <argsstring></argsstring>
        <name>functionalComponents</name>
        <briefdescription>
<para>The functionalComponents property is OPTIONAL and MAY specify a set of <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> objects contained by the <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>. Just as a <ref refid="classsbol_1_1_module" kindref="compound">Module</ref> represents an instance of a subsystem in the overall system represented by a <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>, a <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> represents an instance of a structural entity (represented by a <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>) in the system. This concept allows a <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> to assert different interactions for separate copies of the same structural entity if needed. For example, a <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> might contain multiple <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> objects that refer to the same promoter <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>, but assert different interactions for these promoter copies based on their separate positions in another <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> that represents the structure of the entire system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="57" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_module_definition_1aa89d5d0aa863d4566c31b96ef76e549c" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_referenced_object" kindref="compound">ReferencedObject</ref></type>
        <definition>ReferencedObject models</definition>
        <argsstring></argsstring>
        <name>models</name>
        <briefdescription>
<para>The models property is OPTIONAL and MAY specify a set of URI references to <ref refid="classsbol_1_1_model" kindref="compound">Model</ref> objects. <ref refid="classsbol_1_1_model" kindref="compound">Model</ref> objects are placeholders that link <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> objects to computational models of any format. A <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> object can link to more than one <ref refid="classsbol_1_1_model" kindref="compound">Model</ref> since each might encode system behavior in a different way or at a different level of detail. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="60" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a7931f7b2727acb83c549e08550707713" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref></type>
        <definition>URIProperty persistentIdentity</definition>
        <argsstring></argsstring>
        <name>persistentIdentity</name>
        <briefdescription>
<para>The persistentIdentity property is OPTIONAL and has a data type of URI. This URI serves to uniquely refer to a set of SBOL objects that are different versions of each other. An <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object MUST be referred to using either its identity URI or its persistentIdentity URI. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="45" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a3190523b5224923d54bdd3a36fb944c3" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_text_property" kindref="compound">TextProperty</ref></type>
        <definition>TextProperty displayId</definition>
        <argsstring></argsstring>
        <name>displayId</name>
        <briefdescription>
<para>The displayId property is an OPTIONAL identifier with a data type of String. This property is intended to be an intermediate between name and identity that is machine-readable, but more human-readable than the full URI of an identity. If the displayId property is used, then its String value SHOULD be locally unique (global uniqueness is not necessary) and MUST be composed of only alphanumeric or underscore characters and MUST NOT begin with a digit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="48" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a5079b9e48247695504e3705983b06ab5" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_version_property" kindref="compound">VersionProperty</ref></type>
        <definition>VersionProperty version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <briefdescription>
<para>If the version property is used, then it is RECOMMENDED that version numbering follow the conventions of <ulink url="http://semver.org/">semantic versioning</ulink>, particularly as implemented by <ulink url="http://maven.apache.org/">Maven</ulink>. This convention represents versions as sequences of numbers and qualifiers that are separated by the characters “.” and “-” and are compared in lexicographical order (for example, 1 &lt; 1.3.1 &lt; 2.0-beta). For a full explanation, see the linked resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="51" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1acc70a7be39e8fb18e4b82ec8069cefd7" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref></type>
        <definition>URIProperty wasDerivedFrom</definition>
        <argsstring></argsstring>
        <name>wasDerivedFrom</name>
        <briefdescription>
<para>The wasDerivedFrom property is OPTIONAL and has a data type of URI. An SBOL object with this property refers to another SBOL object or non-SBOL resource from which this object was derived. If the wasDerivedFrom property of an SBOL object A that refers to an SBOL object B has an identical persistentIdentity, and both A and B have a version, then the version of B MUST precede that of A. In addition, an SBOL object MUST NOT refer to itself via its own wasDerivedFrom property or form a cyclical chain of references via its wasDerivedFrom property and those of other SBOL objects. For example, the reference chain “ A was derived from B and B was derived from A” is cyclical. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="54" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a09b31bcba9970529f7c5e5cf8d80177a" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_referenced_object" kindref="compound">ReferencedObject</ref></type>
        <definition>ReferencedObject wasGeneratedBy</definition>
        <argsstring></argsstring>
        <name>wasGeneratedBy</name>
        <briefdescription>
<para>An <ref refid="classsbol_1_1_activity" kindref="compound">Activity</ref> which generated this <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref>, eg., a design process like codon-optimization or a construction process like Gibson Assembly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="57" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a47492e4ca2acc9db3be38b80b380ec43" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_text_property" kindref="compound">TextProperty</ref></type>
        <definition>TextProperty name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>The name property is OPTIONAL and has a data type of String. This property is intended to be displayed to a human when visualizing an <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object. If an <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object lacks a name, then software tools SHOULD instead display the object’s displayId or identity. It is RECOMMENDED that software tools give users the ability to switch perspectives between name properties that are human-readable and displayId properties that are less human-readable, but are more likely to be unique. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="60" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_identified_1a5429303f21e7bc531219954eddca1971" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_text_property" kindref="compound">TextProperty</ref></type>
        <definition>TextProperty description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>The description property is OPTIONAL and has a data type of String. This property is intended to contain a more thorough text description of an <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="63" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsbol_1_1_s_b_o_l_object_1aff815c97277df80818d4f77c1eec9ac6" prot="public" static="no" mutable="no">
        <type><ref refid="classsbol_1_1_u_r_i_property" kindref="compound">URIProperty</ref></type>
        <definition>URIProperty identity</definition>
        <argsstring></argsstring>
        <name>identity</name>
        <briefdescription>
<para>The identity property is REQUIRED by all <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> objects and has a data type of URI. A given <ref refid="classsbol_1_1_identified" kindref="compound">Identified</ref> object’s identity URI MUST be globally unique among all other identity URIs. The identity of a compliant SBOL object MUST begin with a URI prefix that maps to a domain over which the user has control. Namely, the user can guarantee uniqueness of identities within this domain. For other best practices regarding URIs see Section 11.2 of the <ulink url="http://sbolstandard.org/wp-content/uploads/2015/08/SBOLv2.0.1.pdf">SBOL specification doucment</ulink>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="90" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsbol_1_1_module_definition_1a169818ec8c175a38e8178f6505d4d07a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ModuleDefinition</definition>
        <argsstring>(std::string uri=DEFAULT_NS&quot;/ModuleDefinition/example&quot;, std::string version=&quot;1.0.0&quot;)</argsstring>
        <name>ModuleDefinition</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
          <defval>DEFAULT_NS&quot;/ModuleDefinition/example&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
          <defval>&quot;1.0.0&quot;</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A full URI including a scheme, namespace, and identifier. If SBOLCompliance configuration is enabled, then this argument is simply the displayId for the new object and a full URI will automatically be constructed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>An arbitrary version string. If SBOLCompliance is enabled, this should be a valid <ulink url="http://maven.apache.org/">Maven version string</ulink>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="65" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_module_definition_1a74f8d25b0121407dff31d299d682457a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> &amp;</type>
        <definition>FunctionalComponent &amp; setOutput</definition>
        <argsstring>(ComponentDefinition &amp;output)</argsstring>
        <name>setOutput</name>
        <param>
          <type><ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Defines an output for a system module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> that defines the output </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> that is derived from the argument <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> and configured as this <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>&apos;s output (it&apos;s direction property is set to SBOL_DIRECTION_OUT) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="70" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="366" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_module_definition_1a22cea07a5abf85d2ed0d4b89096bf808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> &amp;</type>
        <definition>FunctionalComponent &amp; setInput</definition>
        <argsstring>(ComponentDefinition &amp;input)</argsstring>
        <name>setInput</name>
        <param>
          <type><ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Defines an input for a system module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> that defines the input </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classsbol_1_1_functional_component" kindref="compound">FunctionalComponent</ref> that is derived from the argument <ref refid="classsbol_1_1_component_definition" kindref="compound">ComponentDefinition</ref> and configured as this <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref>&apos;s input (it&apos;s direction property is set to SBOL_DIRECTION_IN) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="75" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="388" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_module_definition_1a63288ba19c175df9bac5cc87674c2821" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~ModuleDefinition</definition>
        <argsstring>()</argsstring>
        <name>~ModuleDefinition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="77" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_module_definition_1a83b72faf6b481cf82a076d78433631c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assemble</definition>
        <argsstring>(std::vector&lt; ModuleDefinition * &gt; list_of_modules)</argsstring>
        <name>assemble</name>
        <param>
          <type>std::vector&lt; <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> * &gt;</type>
          <declname>list_of_modules</declname>
        </param>
        <briefdescription>
<para>Assemble a high-level <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> from lower-level submodules. </para>        </briefdescription>
        <detaileddescription>
<para>Autoconstructs <ref refid="classsbol_1_1_module" kindref="compound">Module</ref> objects in the process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_of_modules</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of pointers to the submodule ModuleDefinitions </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="81" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/assembly.cpp" bodystart="344" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_module_definition_1a1efda2f7aaba60a07afe03345ef5b4a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ModuleDefinition</definition>
        <argsstring>(sbol_type sbol_type_uri, std::string uri, std::string version)</argsstring>
        <name>ModuleDefinition</name>
        <param>
          <type><ref refid="property_8h_1addc3413015529a8d51e055f32748821f" kindref="member">sbol_type</ref></type>
          <declname>sbol_type_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="85" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_top_level_1ac920fa6a4205992d8cfe2254083d62ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addToDocument</definition>
        <argsstring>(sbol::Document &amp;)</argsstring>
        <name>addToDocument</name>
        <param>
          <type><ref refid="classsbol_1_1_document" kindref="compound">sbol::Document</ref> &amp;</type>
          <defname>doc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/toplevel.h" line="60" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.cpp" bodystart="1047" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_top_level_1ac9c905af9efe1c313a0b284a1bef25d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SBOLClass</type>
          </param>
        </templateparamlist>
        <type>SBOLClass &amp;</type>
        <definition>SBOLClass &amp; copy</definition>
        <argsstring>(Document *target_doc=NULL, std::string ns=&quot;&quot;, std::string version=&quot;&quot;)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classsbol_1_1_document" kindref="compound">Document</ref> *</type>
          <declname>target_doc</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>ns</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Recursively copies an object. </para>        </briefdescription>
        <detaileddescription>
<para>Use this to copy an object to a new document, a new namespace, or to increment its version recursively. An object be recursively copied into a new document and a new namespace, assuming compliant URIs. If the optional version argument is specified, it will be used instead of incrementing the copied object&apos;s version (this can be used when using a custom versioning scheme other than libSBOL&apos;s default). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SBOLClass</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of SBOL object being copied </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The new copies will be attached to this <ref refid="classsbol_1_1_document" kindref="compound">Document</ref>. NULL by default. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ns</parametername>
</parameternamelist>
<parameterdescription>
<para>This namespace will be substituted for the current namespace (as configured by setHomespace) in all SBOL-compliant URIs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>A new version </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The copied object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/toplevel.h" line="69" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.h" bodystart="788" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_identified_1a8d8d8b67ca7d18b4e98b9289234e1ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SBOLClass</type>
          </param>
        </templateparamlist>
        <type>SBOLClass &amp;</type>
        <definition>SBOLClass &amp; copy</definition>
        <argsstring>(std::string ns=&quot;&quot;, std::string version=&quot;&quot;)</argsstring>
        <name>copy</name>
        <param>
          <type>std::string</type>
          <declname>ns</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>version</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/identified.h" line="66" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/identified.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_top_level_1a3ab528aa9cdfed95062856759a6e952d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SBOLClass</type>
          </param>
        </templateparamlist>
        <type>SBOLClass &amp;</type>
        <definition>SBOLClass &amp; simpleCopy</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>simpleCopy</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Copies an object. </para>        </briefdescription>
        <detaileddescription>
<para>No child objects are copied. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A URI for the new object, or a displayId if operating in SBOLCompliant mode </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/toplevel.h" line="73" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.h" bodystart="804" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1aaeae46cf11cccb87655dc22526bacf3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="property_8h_1addc3413015529a8d51e055f32748821f" kindref="member">sbol_type</ref></type>
        <definition>sbol_type getTypeURI</definition>
        <argsstring>()</argsstring>
        <name>getTypeURI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The uniform resource identifier that describes the RDF-type of this SBOL Object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="101" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a31646e8a2306697fd0a183eeb7313271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getClassName</definition>
        <argsstring>(std::string type)</argsstring>
        <name>getClassName</name>
        <param>
          <type>std::string</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Parses a local class name from the RDF-type of this SBOL Object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="104" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ad2b19c3408c3dd28816c2329d6ef7d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> *</type>
        <definition>SBOLObject * find</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>find</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Search this object recursively to see if an object with the URI already exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to theobject with this URI if it exists, NULL otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="109" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="249" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ae38856f1013ce2e9171c8f898833e0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> *</type>
        <definition>SBOLObject * find_property</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>find_property</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Search this object recursively to see if it contains a member property with the given RDF type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The RDF type of the property to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the object that contains a member property with the specified RDF type, NULL otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="114" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="266" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1acb2e46c6541e8201a5ceddcc390fbb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> * &gt;</type>
        <definition>vector&lt; SBOLObject * &gt; find_reference</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>find_reference</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="116" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="283" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ad593fa86924521afaff0e888083da20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare</definition>
        <argsstring>(SBOLObject *comparand)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classsbol_1_1_s_b_o_l_object" kindref="compound">SBOLObject</ref> *</type>
          <declname>comparand</declname>
        </param>
        <briefdescription>
<para>Compare two SBOL objects or Documents. </para>        </briefdescription>
        <detaileddescription>
<para>The behavior is currently undefined for objects with custom annotations or extension classes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comparand</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the object being compared to this one. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the objects are identical, 0 if they are different </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="121" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="91" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a473e3642b7aae350da342aed2aba8063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getPropertyValue</definition>
        <argsstring>(std::string property_uri)</argsstring>
        <name>getPropertyValue</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <briefdescription>
<para>Get the value of a custom annotation property by its URI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the property or SBOL_ERROR_NOT_FOUND </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="126" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="320" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ac77c72928e1e50863f519c049b1c05c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; getPropertyValues</definition>
        <argsstring>(std::string property_uri)</argsstring>
        <name>getPropertyValues</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <briefdescription>
<para>Get all values of a custom annotation property by its URI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of property values or SBOL_ERROR_NOT_FOUND </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="131" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="346" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a35bda67dde48ab7e2ad5444854c59115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; getProperties</definition>
        <argsstring>()</argsstring>
        <name>getProperties</name>
        <briefdescription>
<para>Gets URIs for all properties contained by this object. </para>        </briefdescription>
        <detaileddescription>
<para>This includes SBOL core properties as well as custom annotations. Use this to find custom extension data in an SBOL file. <simplesect kind="return"><para>A vector of URIs that identify the properties contained in this object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="135" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="362" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1ac51e845ed09e37c89fcb445ebf115e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPropertyValue</definition>
        <argsstring>(std::string property_uri, std::string val)</argsstring>
        <name>setPropertyValue</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the value for a user-defined annotation property. </para>        </briefdescription>
        <detaileddescription>
<para>If the value is a URI, it should be surrounded by angle brackets, else it will be interpreted as a literal value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="139" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="331" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a52bb01a95f41305fe14e32746f77b177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setAnnotation</definition>
        <argsstring>(std::string property_uri, std::string val)</argsstring>
        <name>setAnnotation</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the value for a user-defined annotation property. </para>        </briefdescription>
        <detaileddescription>
<para>Synonymous with setPropertyValue  If the value is a URI, it should be surrounded by angle brackets, else it will be interpreted as a literal value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="143" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a66461d609a9b787c2c331c9b98df6370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getAnnotation</definition>
        <argsstring>(std::string property_uri)</argsstring>
        <name>getAnnotation</name>
        <param>
          <type>std::string</type>
          <declname>property_uri</declname>
        </param>
        <briefdescription>
<para>Get the value of a custom annotation property by its URI. </para>        </briefdescription>
        <detaileddescription>
<para>Synonymous with getPropertyValue <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the property or SBOL_ERROR_NOT_FOUND </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="148" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Use this method to destroy an SBOL object that is not contained by a parent <ref refid="classsbol_1_1_document" kindref="compound">Document</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the object does have a parent <ref refid="classsbol_1_1_document" kindref="compound">Document</ref>, instead use doc.close() with the object&apos;s URI identity as an argument.  Recurse through child objects and delete them. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="153" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsbol_1_1_s_b_o_l_object_1a9b3ae362e4afcfc5aafc65ecb74ccd55" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::string &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::string&gt; namespaces</definition>
        <argsstring></argsstring>
        <name>namespaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="59" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1afd4700481a78488d61e0e3d69d255447" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(raptor_serializer *sbol_serializer, raptor_world *sbol_world=NULL)</argsstring>
        <name>serialize</name>
        <param>
          <type>raptor_serializer *</type>
          <declname>sbol_serializer</declname>
        </param>
        <param>
          <type>raptor_world *</type>
          <declname>sbol_world</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="60" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.cpp" bodystart="902" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1aef9af938cf38da9936de185e82f79128" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nest</definition>
        <argsstring>(std::string &amp;rdfxml_buffer)</argsstring>
        <name>nest</name>
        <param>
          <type>std::string &amp;</type>
          <declname>rdfxml_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="61" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.cpp" bodystart="425" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1aa6a71b75eb2b9b011984b60bde291f96" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string makeQName</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>makeQName</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="62" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/object.cpp" bodystart="307" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classsbol_1_1_s_b_o_l_object_1a05b892a9ebcc8529df597d3578560ccf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExtensionClass</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void register_extension_class</definition>
        <argsstring>(std::string ns, std::string ns_prefix, std::string class_name)</argsstring>
        <name>register_extension_class</name>
        <param>
          <type>std::string</type>
          <declname>ns</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ns_prefix</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>class_name</declname>
        </param>
        <briefdescription>
<para>Register an extension class and its namespace, so custom data can be embedded into and read from SBOL files. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ExtensionClass</parametername>
</parameternamelist>
<parameterdescription>
<para>The new class </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ns</parametername>
</parameternamelist>
<parameterdescription>
<para>The extension namespace, eg, <ulink url="http://myhome.org/my_extension#">http://myhome.org/my_extension#</ulink>. It&apos;s important that the namespace ends in a forward-slash or hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ns_prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>A shorthand symbol for the full namespace as it will appear in the output file, eg, my_extension </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bryan/Dev/libSBOL/source/object.h" line="68" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/document.h" bodystart="815" bodyend="820"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classsbol_1_1_module_definition" kindref="compound">ModuleDefinition</ref> class represents a grouping of structural and functional entities in a biological design. The primary usage of this class is to assert the molecular interactions and abstract function of its child entities. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="537">
        <label>ModuleDefinition</label>
        <link refid="classsbol_1_1_module_definition"/>
        <childnode refid="538" relation="public-inheritance">
        </childnode>
      </node>
      <node id="539">
        <label>Identified</label>
        <link refid="classsbol_1_1_identified"/>
        <childnode refid="540" relation="public-inheritance">
        </childnode>
      </node>
      <node id="538">
        <label>TopLevel</label>
        <link refid="classsbol_1_1_top_level"/>
        <childnode refid="539" relation="public-inheritance">
        </childnode>
      </node>
      <node id="540">
        <label>SBOLObject</label>
        <link refid="classsbol_1_1_s_b_o_l_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="547">
        <label>iterator</label>
        <link refid="classsbol_1_1_property_1_1iterator"/>
      </node>
      <node id="556">
        <label>List&lt; sbol::OwnedObject&lt; sbol::Module &gt; &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="557" relation="public-inheritance">
        </childnode>
      </node>
      <node id="541">
        <label>ModuleDefinition</label>
        <link refid="classsbol_1_1_module_definition"/>
        <childnode refid="542" relation="public-inheritance">
        </childnode>
        <childnode refid="552" relation="usage">
          <edgelabel>+functionalComponents</edgelabel>
        </childnode>
        <childnode refid="555" relation="usage">
          <edgelabel>+roles</edgelabel>
        </childnode>
        <childnode refid="556" relation="usage">
          <edgelabel>+modules</edgelabel>
        </childnode>
        <childnode refid="559" relation="usage">
          <edgelabel>+interactions</edgelabel>
        </childnode>
        <childnode refid="550" relation="usage">
          <edgelabel>+models</edgelabel>
        </childnode>
      </node>
      <node id="554">
        <label>Property&lt; sbol::FunctionalComponent &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="544" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="547" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="543">
        <label>Identified</label>
        <link refid="classsbol_1_1_identified"/>
        <childnode refid="544" relation="public-inheritance">
        </childnode>
        <childnode refid="545" relation="usage">
          <edgelabel>+wasDerivedFrom</edgelabel>
          <edgelabel>+persistentIdentity</edgelabel>
        </childnode>
        <childnode refid="548" relation="usage">
          <edgelabel>+version</edgelabel>
        </childnode>
        <childnode refid="550" relation="usage">
          <edgelabel>+wasGeneratedBy</edgelabel>
        </childnode>
        <childnode refid="549" relation="usage">
          <edgelabel>+name</edgelabel>
          <edgelabel>+description</edgelabel>
          <edgelabel>+displayId</edgelabel>
        </childnode>
      </node>
      <node id="551">
        <label>iterator</label>
        <link refid="classsbol_1_1_referenced_object_1_1iterator"/>
      </node>
      <node id="546">
        <label>Property&lt; std::string &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="544" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="547" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="557">
        <label>OwnedObject&lt; sbol::Module &gt;</label>
        <link refid="classsbol_1_1_owned_object"/>
        <childnode refid="558" relation="public-inheritance">
        </childnode>
      </node>
      <node id="552">
        <label>List&lt; sbol::OwnedObject&lt; sbol::FunctionalComponent &gt; &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="553" relation="public-inheritance">
        </childnode>
      </node>
      <node id="542">
        <label>TopLevel</label>
        <link refid="classsbol_1_1_top_level"/>
        <childnode refid="543" relation="public-inheritance">
        </childnode>
      </node>
      <node id="558">
        <label>Property&lt; sbol::Module &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="544" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="547" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="549">
        <label>TextProperty</label>
        <link refid="classsbol_1_1_text_property"/>
        <childnode refid="546" relation="public-inheritance">
        </childnode>
      </node>
      <node id="560">
        <label>OwnedObject&lt; sbol::Interaction &gt;</label>
        <link refid="classsbol_1_1_owned_object"/>
        <childnode refid="561" relation="public-inheritance">
        </childnode>
      </node>
      <node id="550">
        <label>ReferencedObject</label>
        <link refid="classsbol_1_1_referenced_object"/>
        <childnode refid="545" relation="public-inheritance">
        </childnode>
        <childnode refid="551" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="544">
        <label>SBOLObject</label>
        <link refid="classsbol_1_1_s_b_o_l_object"/>
        <childnode refid="545" relation="usage">
          <edgelabel>+identity</edgelabel>
        </childnode>
      </node>
      <node id="545">
        <label>URIProperty</label>
        <link refid="classsbol_1_1_u_r_i_property"/>
        <childnode refid="546" relation="public-inheritance">
        </childnode>
      </node>
      <node id="548">
        <label>VersionProperty</label>
        <link refid="classsbol_1_1_version_property"/>
        <childnode refid="549" relation="public-inheritance">
        </childnode>
      </node>
      <node id="559">
        <label>List&lt; sbol::OwnedObject&lt; sbol::Interaction &gt; &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="560" relation="public-inheritance">
        </childnode>
      </node>
      <node id="555">
        <label>List&lt; sbol::URIProperty &gt;</label>
        <link refid="classsbol_1_1_list"/>
        <childnode refid="545" relation="public-inheritance">
        </childnode>
      </node>
      <node id="561">
        <label>Property&lt; sbol::Interaction &gt;</label>
        <link refid="classsbol_1_1_property"/>
        <childnode refid="544" relation="usage">
          <edgelabel>#sbol_owner</edgelabel>
        </childnode>
        <childnode refid="547" relation="usage">
          <edgelabel>+python_iter</edgelabel>
        </childnode>
      </node>
      <node id="553">
        <label>OwnedObject&lt; sbol::FunctionalComponent &gt;</label>
        <link refid="classsbol_1_1_owned_object"/>
        <childnode refid="554" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" line="43" column="1" bodyfile="/Users/bryan/Dev/libSBOL/source/moduledefinition.h" bodystart="42" bodyend="95"/>
    <listofallmembers>
      <member refid="classsbol_1_1_top_level_1ac920fa6a4205992d8cfe2254083d62ae" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>addToDocument</name></member>
      <member refid="classsbol_1_1_module_definition_1a83b72faf6b481cf82a076d78433631c2" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>assemble</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>close</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ad593fa86924521afaff0e888083da20d" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>compare</name></member>
      <member refid="classsbol_1_1_top_level_1ac9c905af9efe1c313a0b284a1bef25d7" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>copy</name></member>
      <member refid="classsbol_1_1_identified_1a8d8d8b67ca7d18b4e98b9289234e1ee6" prot="public" virt="non-virtual" ambiguityscope="sbol::Identified::"><scope>sbol::ModuleDefinition</scope><name>copy</name></member>
      <member refid="classsbol_1_1_identified_1a5429303f21e7bc531219954eddca1971" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>description</name></member>
      <member refid="classsbol_1_1_identified_1a3190523b5224923d54bdd3a36fb944c3" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>displayId</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ad2b19c3408c3dd28816c2329d6ef7d07" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>find</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ae38856f1013ce2e9171c8f898833e0ab" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>find_property</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1acb2e46c6541e8201a5ceddcc390fbb20" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>find_reference</name></member>
      <member refid="classsbol_1_1_module_definition_1a7dbc7eb36a087aa983d0cf2cc69c1ed4" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>functionalComponents</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a66461d609a9b787c2c331c9b98df6370" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>getAnnotation</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a31646e8a2306697fd0a183eeb7313271" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>getClassName</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a35bda67dde48ab7e2ad5444854c59115" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>getProperties</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a473e3642b7aae350da342aed2aba8063" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>getPropertyValue</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ac77c72928e1e50863f519c049b1c05c4" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>getPropertyValues</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aaeae46cf11cccb87655dc22526bacf3e" prot="public" virt="virtual"><scope>sbol::ModuleDefinition</scope><name>getTypeURI</name></member>
      <member refid="classsbol_1_1_identified_1af758b0c868587dd04b42248df4510f31" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>Identified</name></member>
      <member refid="classsbol_1_1_identified_1a9007fe0b6a11bf369de86f7320e929ac" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>Identified</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aff815c97277df80818d4f77c1eec9ac6" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>identity</name></member>
      <member refid="classsbol_1_1_module_definition_1aa6c8f307f079672360dd746e7058fd43" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>interactions</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aa6a71b75eb2b9b011984b60bde291f96" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>makeQName</name></member>
      <member refid="classsbol_1_1_module_definition_1aa89d5d0aa863d4566c31b96ef76e549c" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>models</name></member>
      <member refid="classsbol_1_1_module_definition_1a169818ec8c175a38e8178f6505d4d07a" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>ModuleDefinition</name></member>
      <member refid="classsbol_1_1_module_definition_1a1efda2f7aaba60a07afe03345ef5b4a8" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>ModuleDefinition</name></member>
      <member refid="classsbol_1_1_module_definition_1a0248a46d5c76787d2590b0d062efc792" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>modules</name></member>
      <member refid="classsbol_1_1_identified_1a47492e4ca2acc9db3be38b80b380ec43" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>name</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a9b3ae362e4afcfc5aafc65ecb74ccd55" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>namespaces</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aef9af938cf38da9936de185e82f79128" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>nest</name></member>
      <member refid="classsbol_1_1_identified_1a7931f7b2727acb83c549e08550707713" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>persistentIdentity</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a05b892a9ebcc8529df597d3578560ccf" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>register_extension_class</name></member>
      <member refid="classsbol_1_1_module_definition_1a554ef7c2d135daea2b27c8328d04469f" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>roles</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a81769444e287f550fa7f20d1390a3ce2" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ad900b14a1efe773614d3845ef1fa97a6" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a3d8574d4b5b196c42578877048db06d2" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1aa275e4a05b4bb5f36ed95df70409aeb0" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>SBOLObject</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1afd4700481a78488d61e0e3d69d255447" prot="protected" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>serialize</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1a52bb01a95f41305fe14e32746f77b177" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>setAnnotation</name></member>
      <member refid="classsbol_1_1_module_definition_1a22cea07a5abf85d2ed0d4b89096bf808" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>setInput</name></member>
      <member refid="classsbol_1_1_module_definition_1a74f8d25b0121407dff31d299d682457a" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>setOutput</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ac51e845ed09e37c89fcb445ebf115e0d" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>setPropertyValue</name></member>
      <member refid="classsbol_1_1_top_level_1a3ab528aa9cdfed95062856759a6e952d" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>simpleCopy</name></member>
      <member refid="classsbol_1_1_top_level_1a0beff4a6982fe2bc3acf5f917321b28e" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>TopLevel</name></member>
      <member refid="classsbol_1_1_identified_1a5079b9e48247695504e3705983b06ab5" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>version</name></member>
      <member refid="classsbol_1_1_identified_1acc70a7be39e8fb18e4b82ec8069cefd7" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>wasDerivedFrom</name></member>
      <member refid="classsbol_1_1_identified_1a09b31bcba9970529f7c5e5cf8d80177a" prot="public" virt="non-virtual"><scope>sbol::ModuleDefinition</scope><name>wasGeneratedBy</name></member>
      <member refid="classsbol_1_1_identified_1a501a7c997382e52c756b9da4e7cb7339" prot="public" virt="virtual"><scope>sbol::ModuleDefinition</scope><name>~Identified</name></member>
      <member refid="classsbol_1_1_module_definition_1a63288ba19c175df9bac5cc87674c2821" prot="public" virt="virtual"><scope>sbol::ModuleDefinition</scope><name>~ModuleDefinition</name></member>
      <member refid="classsbol_1_1_s_b_o_l_object_1ac68c7e3661d1acc561312bc2904b60f8" prot="public" virt="virtual"><scope>sbol::ModuleDefinition</scope><name>~SBOLObject</name></member>
      <member refid="classsbol_1_1_top_level_1aec4c34135bcc56b1b122b80bb56ad756" prot="public" virt="virtual"><scope>sbol::ModuleDefinition</scope><name>~TopLevel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
