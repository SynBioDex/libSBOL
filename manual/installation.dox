//////////////////////////////////////////////////////////////////////
/// @page installation Installation
///
/// We provide two ways to install libSBOL: One is to use the binary installers and other is the build from the source.
///
/// For help configuring a client project, see @ref visual_studio or @ref xcode below.
///
/// @section binary_installers Download Binary Installers
/// 
/// [Get the latest binary installers](https://github.com/SynBioDex/libSBOL/releases/latest)
///
/// Installation through binary installers is the simplest way to obtain libSBOL.
/// 
/// Installer contains pre-compiled libSBOL library. Simply install it to whichever path you want and use it.
/// Currently, we only distribute binary installers for Windows and Mac OSX.
///
///
/// @section build_from_source Build from Source
///
/// To build libSBOL from source, you will need:
/// * [git](https://git-scm.com/) for downloading the source code
/// * [CMake](https://cmake.org/download/) for generating platform-specific build instructions
/// * a C++ compiler, such as MSVC, g++, clang, or [MinGW](http://www.mingw.org/wiki/InstallationHOWTOforMinGW)
/// * If building on Mac or Linux, you will need to obtain Raptor RDF from a 3rd party distribution service such as Homebrew or APT (see platform-specific instructions)
/// * OPTIONAL: [Doxygen](http://www.stack.nl/~dimitri/doxygen/) for creating documentation
/// * OPTIONAL: [SWIG](http://www.swig.org/) for generating Python wrappers
/// 
/// All the development has been done using "default native compilers" and MinGW on Windows or Unix makefiles on Mac/Linux. CMake can be used to generate projects for Eclipse, Visual Studio, XCode, etc. 
///
/// If you don't want to use CMake to generate make files, following is an example command line for building the library on Mac:
/// ```
/// $ mkdir release
/// $ cd release
/// $ g++ -c ../source/*.cpp -I../source -I/usr/local/include/raptor2 -std=c++11
/// $ ar rcs libsbol.a *.o
/// ```
/// Now link and run your client application:
/// ```
/// $ g++ -std=c++11 -I../source -I/usr/local/include/raptor2 -L/usr/local/lib -lraptor2 -lsbol client_app.cpp -o client_app
/// $ ./client_app
/// ```
/// Windows
/// -------
/// 1. [Install git for Windows](https://git-scm.com/)
/// 
/// 2. [Install CMake for Windows](https://cmake.org/download/)
///
/// 3. Clone the repository by running the following command in git application or command console:
/// ```
/// git clone https://github.com/SynBioDex/libSBOL.git
/// ```
///
/// 4. Run CMake. For "Where is the source code" enter the path to your libSBOL folder. Choose build path by setting "Where to build the binaries". After setting the paths, click Configure, and choose what type of compiler you want to generate instructions for (e.g. Visual Studio 14 2015).
///
/// 5. (optional) Set optional targets, e.g. examples, tests, manual, or Python wrapper. To add them check the appropriate boxes and then press Configure again. CMAKE_INSTALL_PREFIX is of particular interest, since it determines the path the output will be located (by default C:\SBOL).
/// * SBOL_BUILD_STATIC: Builds static archive.  Enabled by default on Windows
/// * SBOL_BUILD_SHARED: Currently unavailable on Windows
/// * SBOL_BUILD_32: Build for 32-bit architectures
/// * SBOL_BUILD_64: Build for 64-bit architectures. Currently unavailable on Windows.
/// * SBOL_BUILD_PYTHON2: Build SWIG-Python wrappers for Python version 2
/// * SBOL_BUILD_PYTHON3: Build SWIG-Python wrappers for Python version 3 (not reverse compatible)
///
/// 6. Once it's all set, click Generate to create the compiler instructions.
/// 
/// 7. The last step is to build the libraries. We recommend minGW or Visual Studio for this purpose.
/// When using minGW, first go to 'build' folder and run the compiler by using
/// ```
/// mingw32-make
/// ```
/// or
/// ```
/// mingw32-make install
/// ```
/// You will need administrator privileges for a make install.
/// When using Visual Studio, open 'SBOL.sln' under 'build' folder. Right click INSTALL under Solution Explorer on the right and press Build.
///
/// 8. (optional) For Python bindings, copy and paste the sbol folder with Python bindings to your local Python site-packages folder.
///
///
/// Mac
/// ---
/// 1. [Install git for Mac OSX](https://git-scm.com/)
///
/// 2. Clone the repository by running the following command in terminal:
/// ```
/// git clone https://github.com/SynBioDex/libSBOL.git
/// ```
///
/// 3. LibSBOL depends on the RaptorRDF library which can be obtained using the [Homebrew](brew.sh) package manager. Install Raptor by running the following command in terminal:
/// ```
/// brew install raptor
/// ```
/// Homebrew isnâ€™t the only option. Other package installers are MacPorts and Fink.
///
/// 4. You can use the cmake utility on Mac as well. One important difference about CMake on Mac versus Windows is that there is no GUI application.  However, there is an interactive utility that runs in a terminal window.
/// ```
/// ccmake .
/// ```
///
/// 5. For "Where is the source code" enter the path to your libSBOL folder. Choose build path by setting "Where to build the binaries". After setting the paths, click Configure, and choose what type of compiler you want to generate instructions for. 
/// 
/// 6. (optional) Set optional targets, e.g. examples, tests, manual, or Python wrapper. To add them check the appropriate boxes and then press Configure again. CMAKE_INSTALL_PREFIX is of particular interest, since it determines the path the output will be located. By default on Mac OSX, the library will be installed to /usr/local/lib
/// * SBOL_BUILD_STATIC: Builds static archive.
/// * SBOL_BUILD_SHARED: Builds a dynamically linked library
/// * SBOL_BUILD_32: Build for 32-bit architectures.
/// * SBOL_BUILD_64: Build for 64-bit architectures.
/// * SBOL_BUILD_PYTHON2: Build SWIG-Python wrappers for Python version 2
/// * SBOL_BUILD_PYTHON3: Build SWIG-Python wrappers for Python version 3 (not reverse compatible)
///
/// 7. Once it's all set, click Generate to create the compiler instructions.
///
/// 8. In terminal, go to the build directory and run:
/// ```
/// make 
/// ```
/// to compile locally in the release directory
/// ```
/// make install
/// ```
/// to compile and install to /usr/local/lib.
/// 
/// Debian/Ubuntu
/// -------------
/// 1. If you're on Debian/Ubuntu you can get git and cmake by running the following command in terminal.
/// ```
/// sudo apt-get install git cmake-qt-gui
/// ```
/// Running this command will require sudo privilege.
/// All the other necessary libraries can be acquired by running the following command in terminal.
/// ```
/// sudo apt-get install build-essential libxml2-dev gcc-multilib g++-multilib libraptor2-dev
/// ```
/// 
/// 2. (optional) If you want to generate Python wrapper you will need SWIG. To install run:
/// ```
/// sudo apt-get install swig python-dev
/// ```
///
/// 3. (optional) To update the documentation you will need Doxygen. To install run: 
/// ```
/// sudo apt-get install doxygen-gui
/// ```
///
/// 4. Clone the repository by running the following command in terminal:
/// ```
/// git clone https://github.com/SynBioDex/libSBOL.git
/// ```
/// This will create a libSBOL directory with the source. 
///
/// 5. Run CMake (type cmake-gui or cmake-qt-gui in terminal). For "Where is the source code" enter the path to your libSBOL folder. Choose build path by setting "Where to build the binaries". After setting the paths, click Configure, and choose what type of compiler you want to generate instructions for. 
/// 
/// 6. (optional) Set optional targets, e.g. examples, tests, manual, or Python wrapper. To add them check the appropriate boxes and then press Configure again. CMAKE_INSTALL_PREFIX is of particular interest, since it determines the path the output will be located. If you wish to create Python wrapper, check SBOL_GENERATE_PYTHON, press Configure, and specify SWIG path.
///
/// 7. Once it's all set, click Generate to create the compiler instructions.
/// 
/// 8. In terminal, go to the build directory and run:
/// ```
/// make 
/// ```
/// or
/// ```
/// mingw32-make.exe
/// ```
/// to compile.
///
/// 9. (optional) For Python bindings, you might want to add the path of Python bindings as part of PYTHONPATH environment. To do so, run:
/// ```
/// export PYTHONPATH=$PYTHONPATH:/path-to-your-Python-bindings
/// ```
/// 
/// @section dependencies Dependencies
/// LibSBOL depends on libxml2 and raptor libraries for I/O in XML and RDF formats. Windows releases include precompiled binaries for these dependencies libSBOL  On Mac, these libraries are typically installed by default.
/// 
/// Optionally, LibSBOL also depends on Restbed for web integration.  This is useful for features like querying biological parts in a repository or validating SBOL files.  This dependency also has subdependencies and is managed by Git's submodule feature.  After cloning the libSBOL project, you will also need to clone the submodules:
/// ```
/// git submodule update --init --recursive
/// ```
/// A .gitmodules configuration file is included in the project root.
///
/// @section xcode Creating an XCode project on Mac OSX
///
/// The libSBOL repository contains example Xcode (for Mac) and Visual Studio (for Windows) project files. In Xcode open the example.xcodeproj file included in the example/Xcode directory. This project assumes that you have already installed libSBOL via an installer executable or have run `make install`, assuming you have built libSBOL from source. (See @ref index "Introduction" for build instructions) Running `make install` places the headers in /usr/local/include/sbol/ and the library in /usr/local/lib. This project targets OS 10.9 and later. If you have an older system you will have to change the Build Settings > Deployment > OS X Deployment Target (eg, from 10.9 to 10.8) depending on your system version
///
/// If you have installed libSBOL to a custom location and you would like to configure your Xcode project from scratch:
/// * Navigate to the File Menu and select OS X > Application > Command Line Tool.  Specify a Product Name and that you are using C++ language in the dropdown menu. Specify the path where you want your project created.
/// * In the Project Navigation pane, select the blue XCode icon next to your project name. This should expose the Build Settings in the main window.  Under Search Paths, specify the Header Search Path and Library Search Paths to point to your local build. You will also need to specify the library path to raptor, which should be in /usr/local/lib if you used a 3rd party package installer like Homebrew
/// * Also under Build Settings under the Linking sections, specify Other Linker Flags as "-lsbol -lraptor2"
/// * Fix path to the example file necessary.
/// * Add these lines to your client application and build:
///
/// ```
/// #include "sbol.h"
/// using namespace sbol;
/// ```
///
/// @section visual_studio Creating a Visual Studio project on Windows
///
/// 1) RUN THE INSTALLER
/// * Download and run the latest [installer](https://github.com/SynBioDex/libSBOL/releases)
/// By default this installs to "C:\Program Files (x86)\SBOL" with administrator privileges. If you don't have admin privileges, the installer will let you specify a custom install path.
///
/// 2) CREATE A NEW PROJECT IN VISUAL STUDIO
/// * Navigate to the File Menu and select New Project.  To jump there directly, hit Ctrl-Shift-N
/// * In the New Project window, navigate to > Installed > Templates > Visual C++ > Win32 and select Win32 Console Application.
/// * If you do not want to use defaults, specify a name and location for your client application.  Click OK.
/// * In the Application Settings tab of the Win32 Application Wizard window, select Console Application for Application type.  Deselect Precompiled Header & SDL Checks.  Click Finish.
///
/// 3) SPECIFY DEPENDENCIES
/// * Navigate to the Project Menu and select the project Properties. or hit Alt+F7 to jump there directly.
/// * In the dropdown menu in the upper left of the Property Pages window, select Release configuration.
/// * To specify link libraries, navigate to > Configuration Properties > Linker > Input.  Select the Additional Dependencies field and edit it.  Enter the libraries in this order:  sbol.lib; raptor2.lib; libxml2_a.lib; iconv_a.lib; zlib.lib; ws2_32.lib
/// * To specify the path where the libraries and header files are located, navigate to > Configuration Properties > VC++ Directories. Edit the  Library Directories field and enter the install path from Step 1.  In addition, edit the Include Directories field and enter the same path.  Click Apply.
///
/// 4) INCLUDE SBOL HEADER AND NAMESPACE IN THE CLIENT APP
/// * Add these lines to your client application and build:
///
/// ```
/// #include "sbol.h"
/// using namespace sbol;
/// ```
//////////////////////////////////////////////////////////////////////