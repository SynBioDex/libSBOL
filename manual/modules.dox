//////////////////////////////////////////////////////////////////////
/// @page modular_design
/// @section modular_design Biosystem Design
///
/// LibSBOL can help synthetic biologists design modular systems of biochemical interactions. Following is an example of such a circuit adapted from [Synthesizing AND gate genetic circuits based on CRISPR-Cas9 for identification of bladder cancer cells](http://www.nature.com/ncomms/2014/141106/ncomms6393/abs/ncomms6393.html). This circuit consists of a NAND gate coupled to a NOT gate. The NAND gate turns off in the presence of specific tumor markers and tissue markers, thus its behavior is targeted to specific tissue and tumor sites in the human body. When the NAND gate is shut off, the downstream NOT gate is turned on, thus the coupled effect of the two modules will activate the apoptotic (self-destruct) protein hBAX. Thus, the entire system behaves as a targeted tumor-killer.
/// ![](CRISPRTumorKiller.png)
/// A representation of this system in SBOL can be programmatically constructed. Starting at the highest level of abstraction, a tumor-killer circuit will be constructed from the NAND and NOT gates. At this stage the modules are black boxes without any internal specifications.
/// ```
/// ModuleDefinition& NandGate = *new ModuleDefinition("NandGate");
/// ModuleDefinition& NotGate = *new ModuleDefinition("NotGate");
/// ModuleDefinition& TumorKiller = *new ModuleDefinition("TumorKiller");
/// doc.add < ModuleDefinition > (NandGate);
/// doc.add < ModuleDefinition > (NotGate);
/// doc.add < ModuleDefinition > (TumorKiller);
/// TumorKiller.assemble({ &NotGate, &NandGate });
/// ```
/// In order to connect these black boxes, their inputs and outputs must be defined. The following process defines an interface for the modules, while their internal workings still remain abstract. First, configure the NAND gate:
/// ```
/// ComponentDefinition& TissueMarker = *new ComponentDefinition("TissueMarker", BIOPAX_PROTEIN);
/// ComponentDefinition& TumorMarker = *new ComponentDefinition("TumorMarker", BIOPAX_RNA);
/// ComponentDefinition& LacI = *new ComponentDefinition("LacI", BIOPAX_PROTEIN);
/// doc.add < ComponentDefinition > ({ &TissueMarker, &TumorMarker, &LacI });
/// FunctionalComponent& nand_input1 = NandGate.setInput(TissueMarker);
/// FunctionalComponent& nand_input2 = NandGate.setInput(TumorMarker);
/// FunctionalComponent& nand_output = NandGate.setOutput(LacI);
/// ```
/// Next configure the NOT gate. Note that LacI's ComponentDefinition was already defined above.
/// ```
/// ComponentDefinition& HBax = *new ComponentDefinition("HBax", BIOPAX_PROTEIN);
/// doc.add < ComponentDefinition > (HBax);
/// FunctionalComponent& not_input = NotGate.setInput(LacI);
/// FunctionalComponent& not_output = NandGate.setOutput(HBax);
/// ```
/// Finally, these two modules can be connected with a metaphorical, yet very satisfying, "click"."
/// ```
/// nand_output.connect(not_input);
/// ```
///
//////////////////////////////////////////////////////////////////////
