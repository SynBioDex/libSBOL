//////////////////////////////////////////////////////////////////////
/// @page sequences Sequence Assembly
/// See @ref sequence_example_code for full example code.
/// @section template_design Template Designs
/// One advantage of the SBOL standard over GenBank is the ability to represent DNA as components without knowing their exact sequence. A template design contains a component whose general function is known (represented by a Sequence Ontology type) while its sequence is currently either unknown or unspecified.  This feature of SBOL allows the synthetic biologist to design the functional characteristics of a biological system independently of its structural characteristics. This enables a computer-aided design (CAD) approach similar to electronics, in which the functional or schematic representation of an electronic circuit can be represented separately from the physical dimensions of the electronic components.
/// ![](gene_cassette.png)
/// The following code creates genetic components corresponding to parts in the [iGEM registry](http://parts.igem.org/Main_Page): a promoter, coding sequence (CDS), ribosome binding site (RBS), and transcriptional terminator.
/// ```
/// ComponentDefinition& gene = *new ComponentDefinition("BB0001");
/// ComponentDefinition& promoter = *new ComponentDefinition("R0010");
/// ComponentDefinition& CDS = *new ComponentDefinition("B0032");
/// ComponentDefinition& RBS = *new ComponentDefinition("E0040");
/// ComponentDefinition& terminator = *new ComponentDefinition("B0012");
/// promoter.roles.set(SO_PROMOTER);
/// CDS.roles.set(SO_CDS);
/// RBS.roles.set(SO_RBS);
/// terminator.roles.set(SO_TERMINATOR);
/// ```
/// @section hierarchical_dna Hierarchical DNA Assembly
/// LibSBOL includes methods for common high-level design tasks for synthetic biology such as assembly of components into functional hierarchies. This is another important advantage of the SBOL standard over GenBank. DNA sequences and biological structures in general exhibit hierarchical organization, from the genome, to operons, to genes, to lower level genetic operators. The following code example generates a hierarchical description of a gene which contains as subcomponents the previously created components. Note that these objects must be added to a Document before assembly.
/// ```
/// gene.assemble({ &promoter, &RBS, &CDS, &terminator});
/// ```
///
/// @section sequence_assembly Sequence Assembly
/// A complete design adds explicit sequence information to the components in a template design. In order to assemble a complete design, Sequence objects must first be created and associated with the promoter, CDS, RBS, terminator subcomponents. In contrast to the ComponentDefinition::assemble method, which assembles a template design, the Sequence::assemble method calculates the complete sequence of a design from the sequence of its subcomponents. You must assemble the template design prior to assembling the the complete sequence.
/// ```
/// Sequence& gene_seq = *new Sequence("BB0001_seq");
/// Sequence& promoter_seq = *new Sequence("R0010_seq", "ggctgca");
/// Sequence& RBS_seq = *new Sequence("B0032_seq", "aattatataaa");
/// Sequence& CDS_seq = *new Sequence("E0040_seq", "atgtaa");
/// Sequence& terminator_seq = *new Sequence("B0012_seq", "attcga");
///
/// gene.sequences.set(gene_seq.identity.get());
/// promoter.sequences.set(promoter_seq.identity.get());
/// CDS.sequences.set(CDS_seq.identity.get());
/// RBS.sequences.set(RBS_seq.identity.get());
/// terminator.sequences.set(terminator_seq.identity.get());
/// gene_seq.assemble();
/// cout << gene_seq.elements.get() << endl;
/// ```
/// @section sequence_annotations Sequence Annotations
/// SequenceAnnotations describe regions of interest on Sequence objects. SequenceAnnotations are primarily used to describe sequence features that are not structural components of a design.  Examples of SequenceAnnotations include start and stop codons, mutations, or restriction enzyme cut sites.
/// ```
/// ComponentDefinition& biobrick_prefix = *new ComponentDefinition("biobrick_prefix", BIOPAX_DNA);
/// SequenceAnnotation& ecori = biobrick_prefix.sequenceAnnotations.create("EcoRI");
/// ecori.roles.set(SO "0001975");  // five prime sticky end restriction enzyme cleavage site
///
/// Range& range = ecori.locations.create<Range>("range");
/// range.orientation.set(SBOL_ORIENTATION_INLINE);
/// range.start.set(1);
/// range.end.set(7);
///
/// Cut& cut = ecori.locations.create<Cut>("cut");
/// cut.at.set(4);
/// ```
/// @section sequence_example_code Full Example Code
/// ```
/// #define BASE_URI "http://sys-bio.org"
///
/// #include "sbol.h"
///
/// #include <iostream>
/// #include <vector>
///
/// using namespace std;
/// using namespace sbol;
///
/// int main()
/// {
/// setHomespace(BASE_URI);
/// Document& doc = *new Document();
///
/// ComponentDefinition& gene = *new ComponentDefinition("BB0001");
/// ComponentDefinition& promoter = *new ComponentDefinition("R0010");
/// ComponentDefinition& CDS = *new ComponentDefinition("B0032");
/// ComponentDefinition& RBS = *new ComponentDefinition("E0040");
/// ComponentDefinition& terminator = *new ComponentDefinition("B0012");
///
/// promoter.roles.set(SO_PROMOTER);
/// CDS.roles.set(SO_CDS);
/// RBS.roles.set(SO_RBS);
/// terminator.roles.set(SO_TERMINATOR);
///
/// doc.add<ComponentDefinition>(gene);
/// doc.add<ComponentDefinition>(promoter);
/// doc.add<ComponentDefinition>(CDS);
/// doc.add<ComponentDefinition>(RBS);
/// doc.add<ComponentDefinition>(terminator);
///
/// gene.assemble({ &promoter, &RBS, &CDS, &terminator});
///
/// Component& first = gene.getFirstComponent();
/// cout << first.identity.get() << endl;
/// Component& last = gene.getLastComponent();
/// cout << last.identity.get() << endl;
///
/// Sequence& promoter_seq = *new Sequence("R0010", "ggctgca");
/// Sequence& RBS_seq = *new Sequence("B0032", "aattatataaa");
/// Sequence& CDS_seq = *new Sequence("E0040", "atgtaa");
/// Sequence& terminator_seq = *new Sequence("B0012", "attcga");
/// Sequence& gene_seq = *new Sequence("BB0001");
///
/// doc.add<Sequence>({&promoter_seq, &CDS_seq, &RBS_seq, &terminator_seq, &gene_seq});
///
/// promoter.sequences.set(promoter_seq.identity.get());
/// CDS.sequences.set(CDS_seq.identity.get());
/// RBS.sequences.set(RBS_seq.identity.get());
/// terminator.sequences.set(terminator_seq.identity.get());
/// gene.sequences.set(gene_seq.identity.get());
///
/// gene_seq.assemble();
///
/// cout << promoter_seq.elements.get() << endl;
/// cout << RBS_seq.elements.get() << endl;
/// cout << CDS_seq.elements.get() << endl;
/// cout << terminator_seq.elements.get() << endl;
/// cout << gene_seq.elements.get() << endl;
/// }
/// ```
//////////////////////////////////////////////////////////////////////
