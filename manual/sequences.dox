//////////////////////////////////////////////////////////////////////
/// @page sequences Sequence Assembly
/// See @ref sequence_example_code for full example code.
/// @section parts_mining Part Mining from Online Repositories
/// One of the reasons the SBOL standard was developed is to make it easy for users to pull data about biological components from online databases. The [iGEM Registry of Standard Biological Parts](http://parts.igem.org/Main_Page) is an online database that catalogs a vast inventory of genetic parts, mostly contributed by students competing in iGEM. These parts are available in SBOL format in the [SynBioHub](http://synbiohub.org) knowledgebase, hosted by Newcastle University.
/// LibSBOL supports programmatic querying of iGEM parts in [SynBioHub](http://parts.igem.org/Main_Page). Using a part's web address, the user can fetch data about that part. Feel free to browse available parts online. Alternatively, users can use LibSBOL's search methods to locate interesting parts.
/// In today's modern technological society, a variety of interesting and complicated products are built from off-the-shelf components. Imagine searching for an automotive part at your local parts shop. You might tell the clerk which part you are looking for, at which point she will look that part up in the company database, and then assist you to pull the part from the shelves. LibSBOL puts an inventory of biological parts at your fingertips.
/// The following code example shows how to pull data about biological components from the SynBioHub repository. The SynBioHub repository is represented with a PartShop object. The following code retrieves parts  corresponding to promoter, coding sequence (CDS), ribosome binding site (RBS), and transcriptional terminator. These are imported into a Document object, which must be initialized first. See @ref getting_started for more about creating Documents.
/// ```
/// PartShop& igem = *new PartShop("http://synbiohub.org");
/// igem.pull("http://synbiohub.org/public/igem/BBa_R0010/1", doc);
/// igem.pull("http://synbiohub.org/public/igem/BBa_B0032/1", doc);
/// igem.pull("http://synbiohub.org/public/igem/BBa_E0040/1", doc);
/// igem.pull("http://synbiohub.org/public/igem/BBa_B0012/1", doc);
///
/// r0010 = doc.getComponentDefinition('http://synbiohub.org/public/igem/BBa_R0010/1');
/// b0032 = doc.getComponentDefinition('http://synbiohub.org/public/igem/BBa_B0032/1');
/// e0040 = doc.getComponentDefinition('http://synbiohub.org/public/igem/BBa_E0040/1');
/// b0012 = doc.getComponentDefinition('http://synbiohub.org/public/igem/BBa_B0012/1')
/// ```
///
/// @section template_design Design Abstraction with SBOL
/// Design abstraction enables the synthetic biologist to think about the high-level, functional characteristics of a biological system independently of its structural characteristics. This enables a computer-aided design (CAD) approach similar to electronics, in which the functional or schematic representation of an electronic circuit can be represented separately from the physical dimensions of the electronic components.
/// One advantage of the SBOL standard over GenBank is the ability to represent DNA as abstract components without knowing their exact sequence. An abstract design can be used as a template, with sequence information filled in later. A ComponentDefinition represents a biological component whose general function is known while its sequence is currently either unknown or unspecified. The intended function of a component is specified using a term from the Sequence Ontology (SO), a standard vocabulary for describing genetic parts. As the following example shows, some common SO terms are built in to libSBOL as pre-defined constants (see @file constants.h ). This code example defines the new component as a gene.  Other terms may be found by browsing the [Sequence Ontology](http://www.sequenceontology.org/browser/obob.cgi) online.
/// ![](gene_cassette.png)
/// ```
/// ComponentDefinition& bb1 = *new ComponentDefinition("BB1");
/// bb1.roles.set(SO_GENE);
/// ```
/// @section hierarchical_dna Hierarchical DNA Assembly
/// LibSBOL also includes methods for common high-level design tasks for synthetic biology such as assembly of components into functional hierarchies. This is another important advantage of the SBOL standard over GenBank. DNA sequences and biological structures in general exhibit hierarchical organization, from the genome, to operons, to genes, to lower level genetic operators. The following code example generates a hierarchical description of a gene which contains as subcomponents the previously created components. Note that these objects must be added to a Document for assembly.
/// ```
/// bb1.assemble({ &r0010, &b0032, &e0040, &b0012 }, doc);
/// ```
///
/// @section sequence_assembly Sequence Assembly
/// A complete design adds explicit sequence information to the components in a template design. In order to assemble a complete design, Sequence objects must first be created and associated with the promoter, CDS, RBS, terminator subcomponents. In contrast to the ComponentDefinition::assemble method, which assembles a template design, the Sequence::assemble method calculates the complete sequence of a design from the sequence of its subcomponents. You must assemble a template design from ComponentDefinitions prior to assembling a complete sequence.
/// ```
/// Sequence& bb1_seq = *new Sequence("BB1_seq");
/// bb1.sequences.set(bb1_seq.identity.get());
/// bb1_seq.assemble();
/// cout << gene_seq.elements.get() << endl;
/// ```
/// @section sequence_annotations Sequence Annotations
/// SequenceAnnotations describe regions of interest on Sequence objects. SequenceAnnotations are primarily used to describe sequence features that are not structural components of a design.  Examples of SequenceAnnotations include start and stop codons, mutations, or restriction enzyme cut sites.
/// ```
/// ComponentDefinition& biobrick_prefix = *new ComponentDefinition("biobrick_prefix", BIOPAX_DNA);
/// SequenceAnnotation& ecori = biobrick_prefix.sequenceAnnotations.create("EcoRI");
/// ecori.roles.set(SO "0001975");  // five prime sticky end restriction enzyme cleavage site
///
/// Range& range = ecori.locations.create<Range>("range");
/// range.orientation.set(SBOL_ORIENTATION_INLINE);
/// range.start.set(1);
/// range.end.set(7);
///
/// Cut& cut = ecori.locations.create<Cut>("cut");
/// cut.at.set(4);
/// ```
/// @section sequence_example_code Full Example Code
/// ```
/// #define BASE_URI "http://sys-bio.org"
///
/// #include "sbol.h"
///
/// #include <iostream>
/// #include <vector>
///
/// using namespace std;
/// using namespace sbol;
///
/// int main()
/// {
/// setHomespace(BASE_URI);
/// Document& doc = *new Document();
///
/// ComponentDefinition& gene = *new ComponentDefinition("BB0001");
/// ComponentDefinition& promoter = *new ComponentDefinition("R0010");
/// ComponentDefinition& CDS = *new ComponentDefinition("B0032");
/// ComponentDefinition& RBS = *new ComponentDefinition("E0040");
/// ComponentDefinition& terminator = *new ComponentDefinition("B0012");
///
/// promoter.roles.set(SO_PROMOTER);
/// CDS.roles.set(SO_CDS);
/// RBS.roles.set(SO_RBS);
/// terminator.roles.set(SO_TERMINATOR);
///
/// doc.add<ComponentDefinition>(gene);
/// doc.add<ComponentDefinition>(promoter);
/// doc.add<ComponentDefinition>(CDS);
/// doc.add<ComponentDefinition>(RBS);
/// doc.add<ComponentDefinition>(terminator);
///
/// gene.assemble({ &promoter, &RBS, &CDS, &terminator});
///
/// Component& first = gene.getFirstComponent();
/// cout << first.identity.get() << endl;
/// Component& last = gene.getLastComponent();
/// cout << last.identity.get() << endl;
///
/// Sequence& promoter_seq = *new Sequence("R0010", "ggctgca");
/// Sequence& RBS_seq = *new Sequence("B0032", "aattatataaa");
/// Sequence& CDS_seq = *new Sequence("E0040", "atgtaa");
/// Sequence& terminator_seq = *new Sequence("B0012", "attcga");
/// Sequence& gene_seq = *new Sequence("BB0001");
///
/// doc.add<Sequence>({&promoter_seq, &CDS_seq, &RBS_seq, &terminator_seq, &gene_seq});
///
/// promoter.sequences.set(promoter_seq.identity.get());
/// CDS.sequences.set(CDS_seq.identity.get());
/// RBS.sequences.set(RBS_seq.identity.get());
/// terminator.sequences.set(terminator_seq.identity.get());
/// gene.sequences.set(gene_seq.identity.get());
///
/// gene_seq.assemble();
///
/// cout << promoter_seq.elements.get() << endl;
/// cout << RBS_seq.elements.get() << endl;
/// cout << CDS_seq.elements.get() << endl;
/// cout << terminator_seq.elements.get() << endl;
/// cout << gene_seq.elements.get() << endl;
/// }
/// ```
//////////////////////////////////////////////////////////////////////
