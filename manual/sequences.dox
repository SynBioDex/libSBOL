//////////////////////////////////////////////////////////////////////
/// @page sequences
/// @section sequences Sequence Assembly
///
/// LibSBOL also includes methods for high-level design for synthetic biology. The most important advantage of SBOL over GenBank for DNA representation is the ability to represent hierarchical sequences. DNA sequences and biological structures in general exhibit hierarchical organization, from the genome, to operons, to genes, to lower level genetic operators. The following code example generates a hierarchical description of a gene which contains a promoter, coding sequence (CDS), ribosome binding site (RBS), and transcriptional terminator as subcomponents. Note that these objects must be added to a Document prior to assembly or else an error will occur.
/// ```
/// ComponentDefinition& gene = *new ComponentDefinition("BB0001");
/// ComponentDefinition& promoter = *new ComponentDefinition("R0010");
/// ComponentDefinition& CDS = *new ComponentDefinition("B0032");
/// ComponentDefinition& RBS = *new ComponentDefinition("E0040");
/// ComponentDefinition& terminator = *new ComponentDefinition("B0012");
/// promoter.roles.set(SO_PROMOTER);
/// CDS.roles.set(SO_CDS);
/// RBS.roles.set(SO_RBS);
/// terminator.roles.set(SO_TERMINATOR);
/// gene.assemble({ &promoter, &RBS, &CDS, &terminator});
/// ```
/// ![](gene_cassette.png)
/// @section partial_design Partial versus Complete Designs
/// Performing an assembly operation on a ComponentDefinition results in a partial design. A partial design contains a component whose general function is known (represented by a Sequence Ontology type) while its sequence is currently either unknown or unspecified.  The ability to represent partial designs is another advantage of SBOL over GenBank, because it allows the synthetic biologist to design the functional characteristics of a biological system independently of its structural characteristics. This approach is partly inspired by computer-aided design (CAD) of printed circuit boards.
///
/// In order to assemble a complete design, Sequence objects must first be created and associated with the promoter, CDS, RBS, terminator subcomponents. In contrast to the ComponentDefinition::assemble method, which assembles a partial design, the Sequence::assemble method calculates the complete sequence of a design from the sequence of its subcomponents.
/// ```
/// Sequence& gene_seq = *new Sequence("BB0001_seq");
/// Sequence& promoter_seq = *new Sequence("R0010_seq", "ggctgca");
/// Sequence& RBS_seq = *new Sequence("B0032_seq", "aattatataaa");
/// Sequence& CDS_seq = *new Sequence("E0040_seq", "atgtaa");
/// Sequence& terminator_seq = *new Sequence("B0012_seq", "attcga");
///
/// gene.sequence.set(gene_seq.identity.get());
/// promoter.sequence.set(promoter_seq.identity.get());
/// CDS.sequence.set(CDS_seq.identity.get());
/// RBS.sequence.set(RBS_seq.identity.get());
/// terminator.sequence.set(terminator_seq.identity.get());
/// gene_seq.assemble();
/// cout << gene_seq.elements.get() << endl;
/// ```
//////////////////////////////////////////////////////////////////////
