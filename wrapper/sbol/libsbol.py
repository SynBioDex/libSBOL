# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsbol', [dirname(__file__)])
        except ImportError:
            import _libsbol
            return _libsbol
        if fp is not None:
            try:
                _mod = imp.load_module('_libsbol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsbol = swig_import_helper()
    del swig_import_helper
else:
    import _libsbol
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbol.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libsbol.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsbol.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsbol.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsbol.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsbol.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsbol.SwigPyIterator_copy(self)

    def next(self):
        return _libsbol.SwigPyIterator_next(self)

    def __next__(self):
        return _libsbol.SwigPyIterator___next__(self)

    def previous(self):
        return _libsbol.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsbol.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsbol.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsbol.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsbol.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsbol.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsbol.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsbol.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libsbol.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class _IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._IntVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._IntVector___bool__(self)

    def __len__(self):
        return _libsbol._IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._IntVector___setitem__(self, *args)

    def pop(self):
        return _libsbol._IntVector_pop(self)

    def append(self, x):
        return _libsbol._IntVector_append(self, x)

    def empty(self):
        return _libsbol._IntVector_empty(self)

    def size(self):
        return _libsbol._IntVector_size(self)

    def swap(self, v):
        return _libsbol._IntVector_swap(self, v)

    def begin(self):
        return _libsbol._IntVector_begin(self)

    def end(self):
        return _libsbol._IntVector_end(self)

    def rbegin(self):
        return _libsbol._IntVector_rbegin(self)

    def rend(self):
        return _libsbol._IntVector_rend(self)

    def clear(self):
        return _libsbol._IntVector_clear(self)

    def get_allocator(self):
        return _libsbol._IntVector_get_allocator(self)

    def pop_back(self):
        return _libsbol._IntVector_pop_back(self)

    def erase(self, *args):
        return _libsbol._IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._IntVector_push_back(self, x)

    def front(self):
        return _libsbol._IntVector_front(self)

    def back(self):
        return _libsbol._IntVector_back(self)

    def assign(self, n, x):
        return _libsbol._IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._IntVector_resize(self, *args)

    def insert(self, *args):
        return _libsbol._IntVector_insert(self, *args)

    def reserve(self, n):
        return _libsbol._IntVector_reserve(self, n)

    def capacity(self):
        return _libsbol._IntVector_capacity(self)
    __swig_destroy__ = _libsbol.delete__IntVector
    __del__ = lambda self: None
_IntVector_swigregister = _libsbol._IntVector_swigregister
_IntVector_swigregister(_IntVector)

class _StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._StringVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._StringVector___bool__(self)

    def __len__(self):
        return _libsbol._StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._StringVector___setitem__(self, *args)

    def pop(self):
        return _libsbol._StringVector_pop(self)

    def append(self, x):
        return _libsbol._StringVector_append(self, x)

    def empty(self):
        return _libsbol._StringVector_empty(self)

    def size(self):
        return _libsbol._StringVector_size(self)

    def swap(self, v):
        return _libsbol._StringVector_swap(self, v)

    def begin(self):
        return _libsbol._StringVector_begin(self)

    def end(self):
        return _libsbol._StringVector_end(self)

    def rbegin(self):
        return _libsbol._StringVector_rbegin(self)

    def rend(self):
        return _libsbol._StringVector_rend(self)

    def clear(self):
        return _libsbol._StringVector_clear(self)

    def get_allocator(self):
        return _libsbol._StringVector_get_allocator(self)

    def pop_back(self):
        return _libsbol._StringVector_pop_back(self)

    def erase(self, *args):
        return _libsbol._StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._StringVector_push_back(self, x)

    def front(self):
        return _libsbol._StringVector_front(self)

    def back(self):
        return _libsbol._StringVector_back(self)

    def assign(self, n, x):
        return _libsbol._StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._StringVector_resize(self, *args)

    def insert(self, *args):
        return _libsbol._StringVector_insert(self, *args)

    def reserve(self, n):
        return _libsbol._StringVector_reserve(self, n)

    def capacity(self):
        return _libsbol._StringVector_capacity(self)
    __swig_destroy__ = _libsbol.delete__StringVector
    __del__ = lambda self: None
_StringVector_swigregister = _libsbol._StringVector_swigregister
_StringVector_swigregister(_StringVector)

class _SBOLObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _SBOLObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _SBOLObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._SBOLObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._SBOLObjectVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._SBOLObjectVector___bool__(self)

    def __len__(self):
        return _libsbol._SBOLObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._SBOLObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._SBOLObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._SBOLObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._SBOLObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._SBOLObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._SBOLObjectVector___setitem__(self, *args)

    def pop(self):
        return _libsbol._SBOLObjectVector_pop(self)

    def append(self, x):
        return _libsbol._SBOLObjectVector_append(self, x)

    def empty(self):
        return _libsbol._SBOLObjectVector_empty(self)

    def size(self):
        return _libsbol._SBOLObjectVector_size(self)

    def swap(self, v):
        return _libsbol._SBOLObjectVector_swap(self, v)

    def begin(self):
        return _libsbol._SBOLObjectVector_begin(self)

    def end(self):
        return _libsbol._SBOLObjectVector_end(self)

    def rbegin(self):
        return _libsbol._SBOLObjectVector_rbegin(self)

    def rend(self):
        return _libsbol._SBOLObjectVector_rend(self)

    def clear(self):
        return _libsbol._SBOLObjectVector_clear(self)

    def get_allocator(self):
        return _libsbol._SBOLObjectVector_get_allocator(self)

    def pop_back(self):
        return _libsbol._SBOLObjectVector_pop_back(self)

    def erase(self, *args):
        return _libsbol._SBOLObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__SBOLObjectVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._SBOLObjectVector_push_back(self, x)

    def front(self):
        return _libsbol._SBOLObjectVector_front(self)

    def back(self):
        return _libsbol._SBOLObjectVector_back(self)

    def assign(self, n, x):
        return _libsbol._SBOLObjectVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._SBOLObjectVector_resize(self, *args)

    def insert(self, *args):
        return _libsbol._SBOLObjectVector_insert(self, *args)

    def reserve(self, n):
        return _libsbol._SBOLObjectVector_reserve(self, n)

    def capacity(self):
        return _libsbol._SBOLObjectVector_capacity(self)
    __swig_destroy__ = _libsbol.delete__SBOLObjectVector
    __del__ = lambda self: None
_SBOLObjectVector_swigregister = _libsbol._SBOLObjectVector_swigregister
_SBOLObjectVector_swigregister(_SBOLObjectVector)

class _MapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MapVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._MapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._MapVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._MapVector___bool__(self)

    def __len__(self):
        return _libsbol._MapVector___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsbol._MapVector___getitem__(self, key)

    def __delitem__(self, key):
        return _libsbol._MapVector___delitem__(self, key)

    def has_key(self, key):
        return _libsbol._MapVector_has_key(self, key)

    def keys(self):
        return _libsbol._MapVector_keys(self)

    def values(self):
        return _libsbol._MapVector_values(self)

    def items(self):
        return _libsbol._MapVector_items(self)

    def __contains__(self, key):
        return _libsbol._MapVector___contains__(self, key)

    def key_iterator(self):
        return _libsbol._MapVector_key_iterator(self)

    def value_iterator(self):
        return _libsbol._MapVector_value_iterator(self)

    def __setitem__(self, *args):
        return _libsbol._MapVector___setitem__(self, *args)

    def asdict(self):
        return _libsbol._MapVector_asdict(self)

    def __init__(self, *args):
        this = _libsbol.new__MapVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _libsbol._MapVector_empty(self)

    def size(self):
        return _libsbol._MapVector_size(self)

    def swap(self, v):
        return _libsbol._MapVector_swap(self, v)

    def begin(self):
        return _libsbol._MapVector_begin(self)

    def end(self):
        return _libsbol._MapVector_end(self)

    def rbegin(self):
        return _libsbol._MapVector_rbegin(self)

    def rend(self):
        return _libsbol._MapVector_rend(self)

    def clear(self):
        return _libsbol._MapVector_clear(self)

    def get_allocator(self):
        return _libsbol._MapVector_get_allocator(self)

    def count(self, x):
        return _libsbol._MapVector_count(self, x)

    def erase(self, *args):
        return _libsbol._MapVector_erase(self, *args)

    def find(self, x):
        return _libsbol._MapVector_find(self, x)

    def lower_bound(self, x):
        return _libsbol._MapVector_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsbol._MapVector_upper_bound(self, x)
    __swig_destroy__ = _libsbol.delete__MapVector
    __del__ = lambda self: None
_MapVector_swigregister = _libsbol._MapVector_swigregister
_MapVector_swigregister(_MapVector)

class _MapOfStringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MapOfStringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MapOfStringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._MapOfStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._MapOfStringVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._MapOfStringVector___bool__(self)

    def __len__(self):
        return _libsbol._MapOfStringVector___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsbol._MapOfStringVector___getitem__(self, key)

    def __delitem__(self, key):
        return _libsbol._MapOfStringVector___delitem__(self, key)

    def has_key(self, key):
        return _libsbol._MapOfStringVector_has_key(self, key)

    def keys(self):
        return _libsbol._MapOfStringVector_keys(self)

    def values(self):
        return _libsbol._MapOfStringVector_values(self)

    def items(self):
        return _libsbol._MapOfStringVector_items(self)

    def __contains__(self, key):
        return _libsbol._MapOfStringVector___contains__(self, key)

    def key_iterator(self):
        return _libsbol._MapOfStringVector_key_iterator(self)

    def value_iterator(self):
        return _libsbol._MapOfStringVector_value_iterator(self)

    def __setitem__(self, *args):
        return _libsbol._MapOfStringVector___setitem__(self, *args)

    def asdict(self):
        return _libsbol._MapOfStringVector_asdict(self)

    def __init__(self, *args):
        this = _libsbol.new__MapOfStringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _libsbol._MapOfStringVector_empty(self)

    def size(self):
        return _libsbol._MapOfStringVector_size(self)

    def swap(self, v):
        return _libsbol._MapOfStringVector_swap(self, v)

    def begin(self):
        return _libsbol._MapOfStringVector_begin(self)

    def end(self):
        return _libsbol._MapOfStringVector_end(self)

    def rbegin(self):
        return _libsbol._MapOfStringVector_rbegin(self)

    def rend(self):
        return _libsbol._MapOfStringVector_rend(self)

    def clear(self):
        return _libsbol._MapOfStringVector_clear(self)

    def get_allocator(self):
        return _libsbol._MapOfStringVector_get_allocator(self)

    def count(self, x):
        return _libsbol._MapOfStringVector_count(self, x)

    def erase(self, *args):
        return _libsbol._MapOfStringVector_erase(self, *args)

    def find(self, x):
        return _libsbol._MapOfStringVector_find(self, x)

    def lower_bound(self, x):
        return _libsbol._MapOfStringVector_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsbol._MapOfStringVector_upper_bound(self, x)
    __swig_destroy__ = _libsbol.delete__MapOfStringVector
    __del__ = lambda self: None
_MapOfStringVector_swigregister = _libsbol._MapOfStringVector_swigregister
_MapOfStringVector_swigregister(_MapOfStringVector)

class _MapOfSBOLObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MapOfSBOLObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MapOfSBOLObject, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._MapOfSBOLObject_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._MapOfSBOLObject___nonzero__(self)

    def __bool__(self):
        return _libsbol._MapOfSBOLObject___bool__(self)

    def __len__(self):
        return _libsbol._MapOfSBOLObject___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsbol._MapOfSBOLObject___getitem__(self, key)

    def __delitem__(self, key):
        return _libsbol._MapOfSBOLObject___delitem__(self, key)

    def has_key(self, key):
        return _libsbol._MapOfSBOLObject_has_key(self, key)

    def keys(self):
        return _libsbol._MapOfSBOLObject_keys(self)

    def values(self):
        return _libsbol._MapOfSBOLObject_values(self)

    def items(self):
        return _libsbol._MapOfSBOLObject_items(self)

    def __contains__(self, key):
        return _libsbol._MapOfSBOLObject___contains__(self, key)

    def key_iterator(self):
        return _libsbol._MapOfSBOLObject_key_iterator(self)

    def value_iterator(self):
        return _libsbol._MapOfSBOLObject_value_iterator(self)

    def __setitem__(self, *args):
        return _libsbol._MapOfSBOLObject___setitem__(self, *args)

    def asdict(self):
        return _libsbol._MapOfSBOLObject_asdict(self)

    def __init__(self, *args):
        this = _libsbol.new__MapOfSBOLObject(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _libsbol._MapOfSBOLObject_empty(self)

    def size(self):
        return _libsbol._MapOfSBOLObject_size(self)

    def swap(self, v):
        return _libsbol._MapOfSBOLObject_swap(self, v)

    def begin(self):
        return _libsbol._MapOfSBOLObject_begin(self)

    def end(self):
        return _libsbol._MapOfSBOLObject_end(self)

    def rbegin(self):
        return _libsbol._MapOfSBOLObject_rbegin(self)

    def rend(self):
        return _libsbol._MapOfSBOLObject_rend(self)

    def clear(self):
        return _libsbol._MapOfSBOLObject_clear(self)

    def get_allocator(self):
        return _libsbol._MapOfSBOLObject_get_allocator(self)

    def count(self, x):
        return _libsbol._MapOfSBOLObject_count(self, x)

    def erase(self, *args):
        return _libsbol._MapOfSBOLObject_erase(self, *args)

    def find(self, x):
        return _libsbol._MapOfSBOLObject_find(self, x)

    def lower_bound(self, x):
        return _libsbol._MapOfSBOLObject_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsbol._MapOfSBOLObject_upper_bound(self, x)
    __swig_destroy__ = _libsbol.delete__MapOfSBOLObject
    __del__ = lambda self: None
_MapOfSBOLObject_swigregister = _libsbol._MapOfSBOLObject_swigregister
_MapOfSBOLObject_swigregister(_MapOfSBOLObject)

class Config(_object):
    """


    A class which contains global configuration variables for the libSBOL
    environment. Intended to be used like a static class, configuration
    variables are accessed through the `config' object.

    C++ includes: config.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr

    def __init__(self):
        """Config() """
        this = _libsbol.new_Config()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setHomespace(self, ns):
        """
        void
        setHomespace(std::string ns) 
        """
        return _libsbol.Config_setHomespace(self, ns)


    def getHomespace(self):
        """
        std::string
        getHomespace() 
        """
        return _libsbol.Config_getHomespace(self)


    def hasHomespace(self):
        """
        int hasHomespace()

        """
        return _libsbol.Config_hasHomespace(self)


    def toggleSBOLCompliance(self):
        """
        void
        toggleSBOLCompliance() 
        """
        return _libsbol.Config_toggleSBOLCompliance(self)


    def isSBOLCompliant(self):
        """
        int
        isSBOLCompliant() 
        """
        return _libsbol.Config_isSBOLCompliant(self)


    def toggleSBOLCompliantTypes(self):
        return _libsbol.Config_toggleSBOLCompliantTypes(self)

    def compliantTypesEnabled(self):
        return _libsbol.Config_compliantTypesEnabled(self)

    def toggleExceptions(self):
        """
        void
        toggleExceptions() 
        """
        return _libsbol.Config_toggleExceptions(self)


    def exceptionsEnabled(self):
        """
        int
        exceptionsEnabled() 
        """
        return _libsbol.Config_exceptionsEnabled(self)


    def setFileFormat(self, file_format):
        return _libsbol.Config_setFileFormat(self, file_format)

    def getFileFormat(self):
        return _libsbol.Config_getFileFormat(self)
    __swig_destroy__ = _libsbol.delete_Config
    __del__ = lambda self: None
Config_swigregister = _libsbol.Config_swigregister
Config_swigregister(Config)


def setHomespace(ns):
    """
    void
    sbol::setHomespace(std::string ns)

    Set the default namespace for autocreation of URIs when a new SBOL
    object is created. 
    """
    return _libsbol.setHomespace(ns)

def getHomespace():
    """
    std::string
    sbol::getHomespace()

    Get the current default namespace for autocreation of URIs when a new
    SBOL object is created. 
    """
    return _libsbol.getHomespace()

def hasHomespace():
    """
    int sbol::hasHomespace()

    Checks if a valid default namespace has been defined. 
    """
    return _libsbol.hasHomespace()

def toggleSBOLCompliance():
    """
    void
    sbol::toggleSBOLCompliance()

    Enables SBOLCompliance, which simplifies creation of URIs in
    constructor calls. 
    """
    return _libsbol.toggleSBOLCompliance()

def isSBOLCompliant():
    """
    int
    sbol::isSBOLCompliant()

    Checks if SBOLCompliance is enabled. 
    """
    return _libsbol.isSBOLCompliant()

def toggleSBOLCompliantTypes():
    return _libsbol.toggleSBOLCompliantTypes()
toggleSBOLCompliantTypes = _libsbol.toggleSBOLCompliantTypes

def compliantTypesEnabled():
    return _libsbol.compliantTypesEnabled()
compliantTypesEnabled = _libsbol.compliantTypesEnabled

def setFileFormat(file_format):
    return _libsbol.setFileFormat(file_format)
setFileFormat = _libsbol.setFileFormat

def getFileFormat():
    return _libsbol.getFileFormat()
getFileFormat = _libsbol.getFileFormat

def toggleExceptions():
    """
    void
    sbol::toggleExceptions() 
    """
    return _libsbol.toggleExceptions()

def exceptionsEnabled():
    """
    int
    sbol::exceptionsEnabled() 
    """
    return _libsbol.exceptionsEnabled()

def randomIdentifier():
    """
    std::string
    sbol::randomIdentifier() 
    """
    return _libsbol.randomIdentifier()

def autoconstructURI():
    """
    std::string
    sbol::autoconstructURI() 
    """
    return _libsbol.autoconstructURI()

def constructNonCompliantURI(uri):
    """
    std::string
    sbol::constructNonCompliantURI(std::string uri) 
    """
    return _libsbol.constructNonCompliantURI(uri)

def constructCompliantURI(*args):
    """
    std::string
    sbol::constructCompliantURI(std::string parent_type, std::string
    child_type, std::string display_id, std::string version) 
    """
    return _libsbol.constructCompliantURI(*args)

def getCompliantURI(uri_prefix, sbol_class_name, display_id, version):
    """
    std::string
    sbol::getCompliantURI(std::string uri_prefix, std::string
    sbol_class_name, std::string display_id, std::string version) 
    """
    return _libsbol.getCompliantURI(uri_prefix, sbol_class_name, display_id, version)

def getClassName(type):
    """
    std::string
    sbol::getClassName(std::string type) 
    """
    return _libsbol.getClassName(type)

def getNameSpace(type):
    """
    std::string
    sbol::getNameSpace(std::string type) 
    """
    return _libsbol.getNameSpace(type)

_libsbol.DEFAULT_NS_swigconstant(_libsbol)
DEFAULT_NS = _libsbol.DEFAULT_NS

_libsbol.SBOL_URI_swigconstant(_libsbol)
SBOL_URI = _libsbol.SBOL_URI

_libsbol.RDF_URI_swigconstant(_libsbol)
RDF_URI = _libsbol.RDF_URI

_libsbol.PURL_URI_swigconstant(_libsbol)
PURL_URI = _libsbol.PURL_URI

_libsbol.PROV_URI_swigconstant(_libsbol)
PROV_URI = _libsbol.PROV_URI

_libsbol.NODENAME_ABOUT_swigconstant(_libsbol)
NODENAME_ABOUT = _libsbol.NODENAME_ABOUT

_libsbol.NODENAME_RESOURCE_swigconstant(_libsbol)
NODENAME_RESOURCE = _libsbol.NODENAME_RESOURCE

_libsbol.VERSION_STRING_swigconstant(_libsbol)
VERSION_STRING = _libsbol.VERSION_STRING

_libsbol.SBOL_IDENTIFIED_swigconstant(_libsbol)
SBOL_IDENTIFIED = _libsbol.SBOL_IDENTIFIED

_libsbol.SBOL_DOCUMENTED_swigconstant(_libsbol)
SBOL_DOCUMENTED = _libsbol.SBOL_DOCUMENTED

_libsbol.SBOL_TOP_LEVEL_swigconstant(_libsbol)
SBOL_TOP_LEVEL = _libsbol.SBOL_TOP_LEVEL

_libsbol.SBOL_GENERIC_TOP_LEVEL_swigconstant(_libsbol)
SBOL_GENERIC_TOP_LEVEL = _libsbol.SBOL_GENERIC_TOP_LEVEL

_libsbol.SBOL_SEQUENCE_ANNOTATION_swigconstant(_libsbol)
SBOL_SEQUENCE_ANNOTATION = _libsbol.SBOL_SEQUENCE_ANNOTATION

_libsbol.SBOL_COMPONENT_swigconstant(_libsbol)
SBOL_COMPONENT = _libsbol.SBOL_COMPONENT

_libsbol.SBOL_FUNCTIONAL_COMPONENT_swigconstant(_libsbol)
SBOL_FUNCTIONAL_COMPONENT = _libsbol.SBOL_FUNCTIONAL_COMPONENT

_libsbol.SBOL_COMPONENT_DEFINITION_swigconstant(_libsbol)
SBOL_COMPONENT_DEFINITION = _libsbol.SBOL_COMPONENT_DEFINITION

_libsbol.SBOL_SEQUENCE_swigconstant(_libsbol)
SBOL_SEQUENCE = _libsbol.SBOL_SEQUENCE

_libsbol.SBOL_MODULE_DEFINITION_swigconstant(_libsbol)
SBOL_MODULE_DEFINITION = _libsbol.SBOL_MODULE_DEFINITION

_libsbol.SBOL_MODULE_swigconstant(_libsbol)
SBOL_MODULE = _libsbol.SBOL_MODULE

_libsbol.SBOL_MODEL_swigconstant(_libsbol)
SBOL_MODEL = _libsbol.SBOL_MODEL

_libsbol.SBOL_MAPS_TO_swigconstant(_libsbol)
SBOL_MAPS_TO = _libsbol.SBOL_MAPS_TO

_libsbol.SBOL_INTERACTION_swigconstant(_libsbol)
SBOL_INTERACTION = _libsbol.SBOL_INTERACTION

_libsbol.SBOL_PARTICIPATION_swigconstant(_libsbol)
SBOL_PARTICIPATION = _libsbol.SBOL_PARTICIPATION

_libsbol.SBOL_SEQUENCE_CONSTRAINT_swigconstant(_libsbol)
SBOL_SEQUENCE_CONSTRAINT = _libsbol.SBOL_SEQUENCE_CONSTRAINT

_libsbol.SBOL_LOCATION_swigconstant(_libsbol)
SBOL_LOCATION = _libsbol.SBOL_LOCATION

_libsbol.SBOL_DOCUMENT_swigconstant(_libsbol)
SBOL_DOCUMENT = _libsbol.SBOL_DOCUMENT

_libsbol.SBOL_RANGE_swigconstant(_libsbol)
SBOL_RANGE = _libsbol.SBOL_RANGE

_libsbol.UNDEFINED_swigconstant(_libsbol)
UNDEFINED = _libsbol.UNDEFINED

_libsbol.SBOL_IDENTITY_swigconstant(_libsbol)
SBOL_IDENTITY = _libsbol.SBOL_IDENTITY

_libsbol.SBOL_PERSISTENT_IDENTITY_swigconstant(_libsbol)
SBOL_PERSISTENT_IDENTITY = _libsbol.SBOL_PERSISTENT_IDENTITY

_libsbol.SBOL_VERSION_swigconstant(_libsbol)
SBOL_VERSION = _libsbol.SBOL_VERSION

_libsbol.SBOL_DISPLAY_ID_swigconstant(_libsbol)
SBOL_DISPLAY_ID = _libsbol.SBOL_DISPLAY_ID

_libsbol.SBOL_NAME_swigconstant(_libsbol)
SBOL_NAME = _libsbol.SBOL_NAME

_libsbol.SBOL_DESCRIPTION_swigconstant(_libsbol)
SBOL_DESCRIPTION = _libsbol.SBOL_DESCRIPTION

_libsbol.SBOL_TYPES_swigconstant(_libsbol)
SBOL_TYPES = _libsbol.SBOL_TYPES

_libsbol.SBOL_START_swigconstant(_libsbol)
SBOL_START = _libsbol.SBOL_START

_libsbol.SBOL_END_swigconstant(_libsbol)
SBOL_END = _libsbol.SBOL_END

_libsbol.SBOL_SEQUENCE_ANNOTATIONS_swigconstant(_libsbol)
SBOL_SEQUENCE_ANNOTATIONS = _libsbol.SBOL_SEQUENCE_ANNOTATIONS

_libsbol.SBOL_COMPONENTS_swigconstant(_libsbol)
SBOL_COMPONENTS = _libsbol.SBOL_COMPONENTS

_libsbol.SBOL_COMPONENT_PROPERTY_swigconstant(_libsbol)
SBOL_COMPONENT_PROPERTY = _libsbol.SBOL_COMPONENT_PROPERTY

_libsbol.SBOL_ROLES_swigconstant(_libsbol)
SBOL_ROLES = _libsbol.SBOL_ROLES

_libsbol.SBOL_ELEMENTS_swigconstant(_libsbol)
SBOL_ELEMENTS = _libsbol.SBOL_ELEMENTS

_libsbol.SBOL_ENCODING_swigconstant(_libsbol)
SBOL_ENCODING = _libsbol.SBOL_ENCODING

_libsbol.SBOL_SEQUENCE_PROPERTY_swigconstant(_libsbol)
SBOL_SEQUENCE_PROPERTY = _libsbol.SBOL_SEQUENCE_PROPERTY

_libsbol.SBOL_WAS_DERIVED_FROM_swigconstant(_libsbol)
SBOL_WAS_DERIVED_FROM = _libsbol.SBOL_WAS_DERIVED_FROM

_libsbol.SBOL_DEFINITION_swigconstant(_libsbol)
SBOL_DEFINITION = _libsbol.SBOL_DEFINITION

_libsbol.SBOL_ACCESS_swigconstant(_libsbol)
SBOL_ACCESS = _libsbol.SBOL_ACCESS

_libsbol.SBOL_DIRECTION_swigconstant(_libsbol)
SBOL_DIRECTION = _libsbol.SBOL_DIRECTION

_libsbol.SBOL_MODELS_swigconstant(_libsbol)
SBOL_MODELS = _libsbol.SBOL_MODELS

_libsbol.SBOL_MODULES_swigconstant(_libsbol)
SBOL_MODULES = _libsbol.SBOL_MODULES

_libsbol.SBOL_FUNCTIONAL_COMPONENTS_swigconstant(_libsbol)
SBOL_FUNCTIONAL_COMPONENTS = _libsbol.SBOL_FUNCTIONAL_COMPONENTS

_libsbol.SBOL_INTERACTIONS_swigconstant(_libsbol)
SBOL_INTERACTIONS = _libsbol.SBOL_INTERACTIONS

_libsbol.SBOL_MAPS_TOS_swigconstant(_libsbol)
SBOL_MAPS_TOS = _libsbol.SBOL_MAPS_TOS

_libsbol.SBOL_PARTICIPATIONS_swigconstant(_libsbol)
SBOL_PARTICIPATIONS = _libsbol.SBOL_PARTICIPATIONS

_libsbol.SBOL_PARTICIPANT_swigconstant(_libsbol)
SBOL_PARTICIPANT = _libsbol.SBOL_PARTICIPANT

_libsbol.SBOL_LOCAL_swigconstant(_libsbol)
SBOL_LOCAL = _libsbol.SBOL_LOCAL

_libsbol.SBOL_REMOTE_swigconstant(_libsbol)
SBOL_REMOTE = _libsbol.SBOL_REMOTE

_libsbol.SBOL_REFINEMENT_swigconstant(_libsbol)
SBOL_REFINEMENT = _libsbol.SBOL_REFINEMENT

_libsbol.SBOL_SOURCE_swigconstant(_libsbol)
SBOL_SOURCE = _libsbol.SBOL_SOURCE

_libsbol.SBOL_LANGUAGE_swigconstant(_libsbol)
SBOL_LANGUAGE = _libsbol.SBOL_LANGUAGE

_libsbol.SBOL_FRAMEWORK_swigconstant(_libsbol)
SBOL_FRAMEWORK = _libsbol.SBOL_FRAMEWORK

_libsbol.SBOL_SEQUENCE_CONSTRAINTS_swigconstant(_libsbol)
SBOL_SEQUENCE_CONSTRAINTS = _libsbol.SBOL_SEQUENCE_CONSTRAINTS

_libsbol.SBOL_SUBJECT_swigconstant(_libsbol)
SBOL_SUBJECT = _libsbol.SBOL_SUBJECT

_libsbol.SBOL_OBJECT_swigconstant(_libsbol)
SBOL_OBJECT = _libsbol.SBOL_OBJECT

_libsbol.SBOL_RESTRICTION_swigconstant(_libsbol)
SBOL_RESTRICTION = _libsbol.SBOL_RESTRICTION

_libsbol.SBOL_ORIENTATION_swigconstant(_libsbol)
SBOL_ORIENTATION = _libsbol.SBOL_ORIENTATION

_libsbol.SBOL_LOCATIONS_swigconstant(_libsbol)
SBOL_LOCATIONS = _libsbol.SBOL_LOCATIONS

_libsbol.SBOL_ROLE_INTEGRATION_swigconstant(_libsbol)
SBOL_ROLE_INTEGRATION = _libsbol.SBOL_ROLE_INTEGRATION

_libsbol.SBOL_ACCESS_PRIVATE_swigconstant(_libsbol)
SBOL_ACCESS_PRIVATE = _libsbol.SBOL_ACCESS_PRIVATE

_libsbol.SBOL_ACCESS_PUBLIC_swigconstant(_libsbol)
SBOL_ACCESS_PUBLIC = _libsbol.SBOL_ACCESS_PUBLIC

_libsbol.SBOL_DIRECTION_IN_swigconstant(_libsbol)
SBOL_DIRECTION_IN = _libsbol.SBOL_DIRECTION_IN

_libsbol.SBOL_DIRECTION_OUT_swigconstant(_libsbol)
SBOL_DIRECTION_OUT = _libsbol.SBOL_DIRECTION_OUT

_libsbol.SBOL_DIRECTION_IN_OUT_swigconstant(_libsbol)
SBOL_DIRECTION_IN_OUT = _libsbol.SBOL_DIRECTION_IN_OUT

_libsbol.SBOL_DIRECTION_NONE_swigconstant(_libsbol)
SBOL_DIRECTION_NONE = _libsbol.SBOL_DIRECTION_NONE

_libsbol.SBOL_RESTRICTION_PRECEDES_swigconstant(_libsbol)
SBOL_RESTRICTION_PRECEDES = _libsbol.SBOL_RESTRICTION_PRECEDES

_libsbol.SBOL_RESTRICTION_SAME_ORIENTATION_AS_swigconstant(_libsbol)
SBOL_RESTRICTION_SAME_ORIENTATION_AS = _libsbol.SBOL_RESTRICTION_SAME_ORIENTATION_AS

_libsbol.SBOL_RESTRICTION_OPPOSITE_ORIENTATION_AS_swigconstant(_libsbol)
SBOL_RESTRICTION_OPPOSITE_ORIENTATION_AS = _libsbol.SBOL_RESTRICTION_OPPOSITE_ORIENTATION_AS

_libsbol.SBOL_ENCODING_IUPAC_swigconstant(_libsbol)
SBOL_ENCODING_IUPAC = _libsbol.SBOL_ENCODING_IUPAC

_libsbol.SBOL_ENCODING_IUPAC_PROTEIN_swigconstant(_libsbol)
SBOL_ENCODING_IUPAC_PROTEIN = _libsbol.SBOL_ENCODING_IUPAC_PROTEIN

_libsbol.SBOL_ENCODING_SMILES_swigconstant(_libsbol)
SBOL_ENCODING_SMILES = _libsbol.SBOL_ENCODING_SMILES

_libsbol.SBOL_ORIENTATION_INLINE_swigconstant(_libsbol)
SBOL_ORIENTATION_INLINE = _libsbol.SBOL_ORIENTATION_INLINE

_libsbol.SBOL_ORIENTATION_REVERSE_COMPLEMENT_swigconstant(_libsbol)
SBOL_ORIENTATION_REVERSE_COMPLEMENT = _libsbol.SBOL_ORIENTATION_REVERSE_COMPLEMENT

_libsbol.SBOL_REFINEMENT_USE_REMOTE_swigconstant(_libsbol)
SBOL_REFINEMENT_USE_REMOTE = _libsbol.SBOL_REFINEMENT_USE_REMOTE

_libsbol.SBOL_REFINEMENT_USE_LOCAL_swigconstant(_libsbol)
SBOL_REFINEMENT_USE_LOCAL = _libsbol.SBOL_REFINEMENT_USE_LOCAL

_libsbol.SBOL_REFINEMENT_VERIFY_IDENTICAL_swigconstant(_libsbol)
SBOL_REFINEMENT_VERIFY_IDENTICAL = _libsbol.SBOL_REFINEMENT_VERIFY_IDENTICAL

_libsbol.SBOL_REFINEMENT_MERGE_swigconstant(_libsbol)
SBOL_REFINEMENT_MERGE = _libsbol.SBOL_REFINEMENT_MERGE

_libsbol.SBOL_ROLE_INTEGRATION_MERGE_swigconstant(_libsbol)
SBOL_ROLE_INTEGRATION_MERGE = _libsbol.SBOL_ROLE_INTEGRATION_MERGE

_libsbol.SBOL_ROLE_INTEGRATION_OVERRIDE_swigconstant(_libsbol)
SBOL_ROLE_INTEGRATION_OVERRIDE = _libsbol.SBOL_ROLE_INTEGRATION_OVERRIDE

_libsbol.SBO_swigconstant(_libsbol)
SBO = _libsbol.SBO

_libsbol.SBO_INTERACTION_swigconstant(_libsbol)
SBO_INTERACTION = _libsbol.SBO_INTERACTION

_libsbol.SBO_INHIBITION_swigconstant(_libsbol)
SBO_INHIBITION = _libsbol.SBO_INHIBITION

_libsbol.SBO_GENETIC_PRODUCTION_swigconstant(_libsbol)
SBO_GENETIC_PRODUCTION = _libsbol.SBO_GENETIC_PRODUCTION

_libsbol.SBO_NONCOVALENT_BINDING_swigconstant(_libsbol)
SBO_NONCOVALENT_BINDING = _libsbol.SBO_NONCOVALENT_BINDING

_libsbol.SBO_STIMULATION_swigconstant(_libsbol)
SBO_STIMULATION = _libsbol.SBO_STIMULATION

_libsbol.SBO_DEGRADATION_swigconstant(_libsbol)
SBO_DEGRADATION = _libsbol.SBO_DEGRADATION

_libsbol.SBO_CONTROL_swigconstant(_libsbol)
SBO_CONTROL = _libsbol.SBO_CONTROL

_libsbol.SBO_BIOCHEMICAL_REACTION_swigconstant(_libsbol)
SBO_BIOCHEMICAL_REACTION = _libsbol.SBO_BIOCHEMICAL_REACTION

_libsbol.SBO_PROMOTER_swigconstant(_libsbol)
SBO_PROMOTER = _libsbol.SBO_PROMOTER

_libsbol.SBO_GENE_swigconstant(_libsbol)
SBO_GENE = _libsbol.SBO_GENE

_libsbol.SBO_INHIBITOR_swigconstant(_libsbol)
SBO_INHIBITOR = _libsbol.SBO_INHIBITOR

_libsbol.SBO_STIMULATOR_swigconstant(_libsbol)
SBO_STIMULATOR = _libsbol.SBO_STIMULATOR

_libsbol.SBO_REACTANT_swigconstant(_libsbol)
SBO_REACTANT = _libsbol.SBO_REACTANT

_libsbol.SBO_PRODUCT_swigconstant(_libsbol)
SBO_PRODUCT = _libsbol.SBO_PRODUCT

_libsbol.SBO_LIGAND_swigconstant(_libsbol)
SBO_LIGAND = _libsbol.SBO_LIGAND

_libsbol.SBO_NONCOVALENT_COMPLEX_swigconstant(_libsbol)
SBO_NONCOVALENT_COMPLEX = _libsbol.SBO_NONCOVALENT_COMPLEX

_libsbol.SBO_BINDING_SITE_swigconstant(_libsbol)
SBO_BINDING_SITE = _libsbol.SBO_BINDING_SITE

_libsbol.SO_swigconstant(_libsbol)
SO = _libsbol.SO

_libsbol.SO_MISC_swigconstant(_libsbol)
SO_MISC = _libsbol.SO_MISC

_libsbol.SO_PROMOTER_swigconstant(_libsbol)
SO_PROMOTER = _libsbol.SO_PROMOTER

_libsbol.SO_CDS_swigconstant(_libsbol)
SO_CDS = _libsbol.SO_CDS

_libsbol.SO_RBS_swigconstant(_libsbol)
SO_RBS = _libsbol.SO_RBS

_libsbol.SO_TERMINATOR_swigconstant(_libsbol)
SO_TERMINATOR = _libsbol.SO_TERMINATOR

_libsbol.BIOPAX_DNA_swigconstant(_libsbol)
BIOPAX_DNA = _libsbol.BIOPAX_DNA

_libsbol.BIOPAX_RNA_swigconstant(_libsbol)
BIOPAX_RNA = _libsbol.BIOPAX_RNA

_libsbol.BIOPAX_PROTEIN_swigconstant(_libsbol)
BIOPAX_PROTEIN = _libsbol.BIOPAX_PROTEIN

_libsbol.BIOPAX_SMALL_MOLECULE_swigconstant(_libsbol)
BIOPAX_SMALL_MOLECULE = _libsbol.BIOPAX_SMALL_MOLECULE

_libsbol.BIOPAX_COMPLEX_swigconstant(_libsbol)
BIOPAX_COMPLEX = _libsbol.BIOPAX_COMPLEX

_libsbol.EDAM_SBML_swigconstant(_libsbol)
EDAM_SBML = _libsbol.EDAM_SBML

_libsbol.EDAM_CELLML_swigconstant(_libsbol)
EDAM_CELLML = _libsbol.EDAM_CELLML

_libsbol.EDAM_BIOPAX_swigconstant(_libsbol)
EDAM_BIOPAX = _libsbol.EDAM_BIOPAX

_libsbol.SBO_CONTINUOUS_swigconstant(_libsbol)
SBO_CONTINUOUS = _libsbol.SBO_CONTINUOUS

_libsbol.SBO_DISCRETE_swigconstant(_libsbol)
SBO_DISCRETE = _libsbol.SBO_DISCRETE

def sbolRule10101(sbol_obj, arg):
    """
    void
    sbol::sbolRule10101(void *sbol_obj, void *arg) 
    """
    return _libsbol.sbolRule10101(sbol_obj, arg)

def sbolRule10102(sbol_obj, arg):
    """
    void
    sbol::sbolRule10102(void *sbol_obj, void *arg) 
    """
    return _libsbol.sbolRule10102(sbol_obj, arg)

def sbol_rule_10202(sbol_obj, arg):
    """
    void
    sbol::sbol_rule_10202(void *sbol_obj, void *arg) 
    """
    return _libsbol.sbol_rule_10202(sbol_obj, arg)

def libsbol_rule_1(sbol_obj, arg):
    """
    void
    sbol::libsbol_rule_1(void *sbol_obj, void *arg) 
    """
    return _libsbol.libsbol_rule_1(sbol_obj, arg)
class _StringProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _StringProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _StringProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new__StringProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete__StringProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol._StringProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol._StringProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol._StringProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol._StringProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol._StringProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol._StringProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol._StringProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol._StringProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol._StringProperty___iter__(self)

    def next(self):
        return _libsbol._StringProperty_next(self)

    def __next__(self):
        return _libsbol._StringProperty___next__(self)

    def __len__(self):
        return _libsbol._StringProperty___len__(self)
_StringProperty_swigregister = _libsbol._StringProperty_swigregister
_StringProperty_swigregister(_StringProperty)

class _IntProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _IntProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _IntProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new__IntProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete__IntProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol._IntProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol._IntProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol._IntProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol._IntProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol._IntProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol._IntProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol._IntProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol._IntProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol._IntProperty___iter__(self)

    def next(self):
        return _libsbol._IntProperty_next(self)

    def __next__(self):
        return _libsbol._IntProperty___next__(self)

    def __len__(self):
        return _libsbol._IntProperty___len__(self)
_IntProperty_swigregister = _libsbol._IntProperty_swigregister
_IntProperty_swigregister(_IntProperty)

class URIProperty(_StringProperty):
    """


    A URIProperty may contain a restricted type of string that conforms to
    the specification for a Uniform Resource Identifier (URI), typically
    consisting of a namespace authority followed by an identifier.

    A URIProperty often contains a reference to an SBOL object or may
    contain an ontology term.

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [_StringProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, URIProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [_StringProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, URIProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        URIProperty(sbol_type type_uri=UNDEFINED, void *property_owner=NULL,
        std::string initial_value="", ValidationRules validation_rules={})

        """
        this = _libsbol.new_URIProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_URIProperty
    __del__ = lambda self: None
URIProperty_swigregister = _libsbol.URIProperty_swigregister
URIProperty_swigregister(URIProperty)

class TextProperty(_StringProperty):
    """


    TextProperty objects are used to contain string literals.

    They can be used as member objects inside custom SBOL Extension
    classes.

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [_StringProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [_StringProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        TextProperty(sbol_type type_uri, void *property_owner, std::string
        initial_value="") 
        """
        this = _libsbol.new_TextProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_TextProperty
    __del__ = lambda self: None
TextProperty_swigregister = _libsbol.TextProperty_swigregister
TextProperty_swigregister(TextProperty)

class IntProperty(_IntProperty):
    """


    IntProperty objects are used to contain integers.

    They can be used as member objects inside custom SBOL Extension
    classes.

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [_IntProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [_IntProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntProperty, name)
    __repr__ = _swig_repr

    def __init__(self, type_uri, property_owner, initial_value=0):
        """
        IntProperty(sbol_type type_uri, void *property_owner, int
        initial_value=0) 
        """
        this = _libsbol.new_IntProperty(type_uri, property_owner, initial_value)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_IntProperty
    __del__ = lambda self: None
IntProperty_swigregister = _libsbol.IntProperty_swigregister
IntProperty_swigregister(IntProperty)

class VersionProperty(TextProperty):
    """


    Contains a version number for an SBOL object.

    The VersionProperty follows Maven versioning semantics and includes a
    major, minor, and patch version number. Specifically, libSBOL
    currently only supports using '.' as a delimiter. Ex: v2.0.1. If the
    user does not want to follow Maven versioning, they can specify an
    arbitrary version string using the set() method.

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [TextProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VersionProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [TextProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VersionProperty, name)
    __repr__ = _swig_repr

    def split(self):
        return _libsbol.VersionProperty_split(self)

    def incrementMajor(self):
        """
        void
        incrementMajor()

        Increment major version. 
        """
        return _libsbol.VersionProperty_incrementMajor(self)


    def incrementMinor(self):
        """
        void
        incrementMinor()

        Increment minor version. 
        """
        return _libsbol.VersionProperty_incrementMinor(self)


    def incrementPatch(self):
        """
        void
        incrementPatch()

        Increment patch version. 
        """
        return _libsbol.VersionProperty_incrementPatch(self)


    def decrementMinor(self):
        """
        void
        decrementMinor()

        Decrement major version. 
        """
        return _libsbol.VersionProperty_decrementMinor(self)


    def decrementMajor(self):
        """
        void
        decrementMajor()

        Decrement major version. 
        """
        return _libsbol.VersionProperty_decrementMajor(self)


    def decrementPatch(self):
        """
        void
        decrementPatch()

        Decrement major version. 
        """
        return _libsbol.VersionProperty_decrementPatch(self)


    def major(self):
        """
        int major()

        Get major version. 
        """
        return _libsbol.VersionProperty_major(self)


    def minor(self):
        """
        int minor()

        Get minor version. 
        """
        return _libsbol.VersionProperty_minor(self)


    def patch(self):
        """
        int patch()

        Get patch version. 
        """
        return _libsbol.VersionProperty_patch(self)


    def __init__(self, *args):
        """
        VersionProperty(sbol_type type_uri, void *property_owner, std::string
        initial_value="") 
        """
        this = _libsbol.new_VersionProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_VersionProperty
    __del__ = lambda self: None
VersionProperty_swigregister = _libsbol.VersionProperty_swigregister
VersionProperty_swigregister(VersionProperty)

class SBOLObject(_object):
    """


    An SBOLObject converts a C++ class data structure into an RDF triple
    store and contains methods for serializing and parsing RDF triples.

    C++ includes: object.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBOLObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBOLObject, name)
    __swig_setmethods__["doc"] = _libsbol.SBOLObject_doc_set
    __swig_getmethods__["doc"] = _libsbol.SBOLObject_doc_get
    if _newclass:
        doc = _swig_property(_libsbol.SBOLObject_doc_get, _libsbol.SBOLObject_doc_set)
    __swig_setmethods__["properties"] = _libsbol.SBOLObject_properties_set
    __swig_getmethods__["properties"] = _libsbol.SBOLObject_properties_get
    if _newclass:
        properties = _swig_property(_libsbol.SBOLObject_properties_get, _libsbol.SBOLObject_properties_set)
    __swig_setmethods__["list_properties"] = _libsbol.SBOLObject_list_properties_set
    __swig_getmethods__["list_properties"] = _libsbol.SBOLObject_list_properties_get
    if _newclass:
        list_properties = _swig_property(_libsbol.SBOLObject_list_properties_get, _libsbol.SBOLObject_list_properties_set)
    __swig_setmethods__["owned_objects"] = _libsbol.SBOLObject_owned_objects_set
    __swig_getmethods__["owned_objects"] = _libsbol.SBOLObject_owned_objects_get
    if _newclass:
        owned_objects = _swig_property(_libsbol.SBOLObject_owned_objects_get, _libsbol.SBOLObject_owned_objects_set)

    def __init__(self, *args):
        """
        SBOLObject(std::string uri_prefix, std::string display_id, std::string
        version) 
        """
        this = _libsbol.new_SBOLObject(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["type"] = _libsbol.SBOLObject_type_set
    __swig_getmethods__["type"] = _libsbol.SBOLObject_type_get
    if _newclass:
        type = _swig_property(_libsbol.SBOLObject_type_get, _libsbol.SBOLObject_type_set)
    __swig_setmethods__["identity"] = _libsbol.SBOLObject_identity_set
    __swig_getmethods__["identity"] = _libsbol.SBOLObject_identity_get
    if _newclass:
        identity = _swig_property(_libsbol.SBOLObject_identity_get, _libsbol.SBOLObject_identity_set)

    def getTypeURI(self):
        """
        virtual
        sbol_type getTypeURI() 
        """
        return _libsbol.SBOLObject_getTypeURI(self)


    def serialize(self, sbol_serializer, sbol_world=None):
        """
        void
        serialize(raptor_serializer *sbol_serializer, raptor_world
        *sbol_world=NULL) 
        """
        return _libsbol.SBOLObject_serialize(self, sbol_serializer, sbol_world)


    def nest(self, rdfxml_buffer):
        """
        std::string
        nest(std::string &rdfxml_buffer) 
        """
        return _libsbol.SBOLObject_nest(self, rdfxml_buffer)


    def find(self, uri):
        """
        int find(std::string
        uri) 
        """
        return _libsbol.SBOLObject_find(self, uri)


    def getClassName(self, type):
        """
        std::string
        getClassName(std::string type) 
        """
        return _libsbol.SBOLObject_getClassName(self, type)

    __swig_destroy__ = _libsbol.delete_SBOLObject
    __del__ = lambda self: None

    def close(self):
        """void close() """
        return _libsbol.SBOLObject_close(self)


    def __repr__(self):
        return _libsbol.SBOLObject___repr__(self)

    def __str__(self):
        return _libsbol.SBOLObject___str__(self)
SBOLObject_swigregister = _libsbol.SBOLObject_swigregister
SBOLObject_swigregister(SBOLObject)

class ReferencedObject(URIProperty):
    """


    A reference to another SBOL object Contains a Uniform Resource
    Identifier (URI) that refers to an an associated object.

    The object it points to may be another resource in this Document or an
    external reference, for example to an object in an external
    repository. In the SBOL specification, association by reference is
    indicated in class diagrams by arrows with open (white) diamonds.

    C++ includes: object.h 
    """

    __swig_setmethods__ = {}
    for _s in [URIProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferencedObject, name, value)
    __swig_getmethods__ = {}
    for _s in [URIProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferencedObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        ReferencedObject(sbol_type type_uri=UNDEFINED, SBOLObject
        *property_owner=NULL, std::string initial_value="") 
        """
        this = _libsbol.new_ReferencedObject(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def create(self, uri):
        """
        std::string
        create(std::string uri) 
        """
        return _libsbol.ReferencedObject_create(self, uri)


    def set(self, uri):
        """
        virtual void
        set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ReferencedObject_set(self, uri)


    def addReference(self, uri):
        """
        void
        addReference(const std::string uri) 
        """
        return _libsbol.ReferencedObject_addReference(self, uri)


    def setReference(self, uri):
        """
        void
        setReference(const std::string uri) 
        """
        return _libsbol.ReferencedObject_setReference(self, uri)


    def begin(self):
        """
        iterator
        begin() 
        """
        return _libsbol.ReferencedObject_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ReferencedObject_end(self)


    def size(self):
        """int size() """
        return _libsbol.ReferencedObject_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ReferencedObject_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ReferencedObject_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ReferencedObject_python_iter_get, _libsbol.ReferencedObject_python_iter_set)

    def __getitem__(self, nIndex):
        return _libsbol.ReferencedObject___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.ReferencedObject___iter__(self)

    def next(self):
        return _libsbol.ReferencedObject_next(self)

    def __next__(self):
        return _libsbol.ReferencedObject___next__(self)

    def __len__(self):
        return _libsbol.ReferencedObject___len__(self)
    __swig_destroy__ = _libsbol.delete_ReferencedObject
    __del__ = lambda self: None
ReferencedObject_swigregister = _libsbol.ReferencedObject_swigregister
ReferencedObject_swigregister(ReferencedObject)

class Identified(SBOLObject):
    """


    All SBOL-defined classes are directly or indirectly derived from the
    Identified abstract class.

    An Identified object is identified using a Uniform Resource Identifier
    (URI), a unique string that identifies and refers to a specific object
    in an SBOL document or in an online resource such as a DNA repository.

    C++ includes: identified.h 
    """

    __swig_setmethods__ = {}
    for _s in [SBOLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Identified, name, value)
    __swig_getmethods__ = {}
    for _s in [SBOLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Identified, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["persistentIdentity"] = _libsbol.Identified_persistentIdentity_set
    __swig_getmethods__["persistentIdentity"] = _libsbol.Identified_persistentIdentity_get
    if _newclass:
        persistentIdentity = _swig_property(_libsbol.Identified_persistentIdentity_get, _libsbol.Identified_persistentIdentity_set)
    __swig_setmethods__["displayId"] = _libsbol.Identified_displayId_set
    __swig_getmethods__["displayId"] = _libsbol.Identified_displayId_get
    if _newclass:
        displayId = _swig_property(_libsbol.Identified_displayId_get, _libsbol.Identified_displayId_set)
    __swig_setmethods__["version"] = _libsbol.Identified_version_set
    __swig_getmethods__["version"] = _libsbol.Identified_version_get
    if _newclass:
        version = _swig_property(_libsbol.Identified_version_get, _libsbol.Identified_version_set)
    __swig_setmethods__["wasDerivedFrom"] = _libsbol.Identified_wasDerivedFrom_set
    __swig_getmethods__["wasDerivedFrom"] = _libsbol.Identified_wasDerivedFrom_get
    if _newclass:
        wasDerivedFrom = _swig_property(_libsbol.Identified_wasDerivedFrom_get, _libsbol.Identified_wasDerivedFrom_set)
    __swig_setmethods__["name"] = _libsbol.Identified_name_set
    __swig_getmethods__["name"] = _libsbol.Identified_name_get
    if _newclass:
        name = _swig_property(_libsbol.Identified_name_get, _libsbol.Identified_name_set)
    __swig_setmethods__["description"] = _libsbol.Identified_description_set
    __swig_getmethods__["description"] = _libsbol.Identified_description_get
    if _newclass:
        description = _swig_property(_libsbol.Identified_description_get, _libsbol.Identified_description_set)
    __swig_destroy__ = _libsbol.delete_Identified
    __del__ = lambda self: None

    def copy(self, *args):
        return _libsbol.Identified_copy(self, *args)
Identified_swigregister = _libsbol.Identified_swigregister
Identified_swigregister(Identified)

class TopLevel(Identified):
    """


    All SBOL classes derived from TopLevel appear as top level nodes in
    the RDF/XML document tree and SBOL files. An abstract class.

    C++ includes: toplevel.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopLevel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addToDocument(self, arg2):
        """
        void
        addToDocument(sbol::Document &) 
        """
        return _libsbol.TopLevel_addToDocument(self, arg2)

    __swig_destroy__ = _libsbol.delete_TopLevel
    __del__ = lambda self: None
TopLevel_swigregister = _libsbol.TopLevel_swigregister
TopLevel_swigregister(TopLevel)

class Location(Identified):
    """


    The Location class specifies the strand orientation of a Component and
    can be further extended by the Range, Cut, and GenericLocation
    classes.

    C++ includes: location.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Location, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Location, name)
    __repr__ = _swig_repr
    __swig_setmethods__["orientation"] = _libsbol.Location_orientation_set
    __swig_getmethods__["orientation"] = _libsbol.Location_orientation_get
    if _newclass:
        orientation = _swig_property(_libsbol.Location_orientation_get, _libsbol.Location_orientation_set)

    def __init__(self, *args):
        """
        Location(sbol_type,
        std::string uri_prefix, std::string display_id, std::string version)

        """
        this = _libsbol.new_Location(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Location
    __del__ = lambda self: None
Location_swigregister = _libsbol.Location_swigregister
Location_swigregister(Location)

class Range(Location):
    """


    A Range object specifies a region via discrete, inclusive start and
    end positions that correspond to indices for characters in the
    elements String of a Sequence. Note that the index of the first
    location is 1, as is typical practice in biology, rather than 0, as is
    typical practice in computer science.

    C++ includes: location.h 
    """

    __swig_setmethods__ = {}
    for _s in [Location]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    for _s in [Location]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _libsbol.Range_start_set
    __swig_getmethods__["start"] = _libsbol.Range_start_get
    if _newclass:
        start = _swig_property(_libsbol.Range_start_get, _libsbol.Range_start_set)
    __swig_setmethods__["end"] = _libsbol.Range_end_set
    __swig_getmethods__["end"] = _libsbol.Range_end_get
    if _newclass:
        end = _swig_property(_libsbol.Range_end_get, _libsbol.Range_end_set)

    def __init__(self, *args):
        """
        Range(std::string
        uri_prefix, std::string display_id, std::string version, int start,
        int end) 
        """
        this = _libsbol.new_Range(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Range
    __del__ = lambda self: None
Range_swigregister = _libsbol.Range_swigregister
Range_swigregister(Range)

class locationProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, locationProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, locationProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_locationProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_locationProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.locationProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.locationProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.locationProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.locationProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.locationProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.locationProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.locationProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.locationProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.locationProperty___iter__(self)

    def next(self):
        return _libsbol.locationProperty_next(self)

    def __next__(self):
        return _libsbol.locationProperty___next__(self)

    def __len__(self):
        return _libsbol.locationProperty___len__(self)
locationProperty_swigregister = _libsbol.locationProperty_swigregister
locationProperty_swigregister(locationProperty)

class _VectorOfLocations(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _VectorOfLocations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _VectorOfLocations, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._VectorOfLocations_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._VectorOfLocations___nonzero__(self)

    def __bool__(self):
        return _libsbol._VectorOfLocations___bool__(self)

    def __len__(self):
        return _libsbol._VectorOfLocations___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._VectorOfLocations___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._VectorOfLocations___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._VectorOfLocations___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._VectorOfLocations___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._VectorOfLocations___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._VectorOfLocations___setitem__(self, *args)

    def pop(self):
        return _libsbol._VectorOfLocations_pop(self)

    def append(self, x):
        return _libsbol._VectorOfLocations_append(self, x)

    def empty(self):
        return _libsbol._VectorOfLocations_empty(self)

    def size(self):
        return _libsbol._VectorOfLocations_size(self)

    def swap(self, v):
        return _libsbol._VectorOfLocations_swap(self, v)

    def begin(self):
        return _libsbol._VectorOfLocations_begin(self)

    def end(self):
        return _libsbol._VectorOfLocations_end(self)

    def rbegin(self):
        return _libsbol._VectorOfLocations_rbegin(self)

    def rend(self):
        return _libsbol._VectorOfLocations_rend(self)

    def clear(self):
        return _libsbol._VectorOfLocations_clear(self)

    def get_allocator(self):
        return _libsbol._VectorOfLocations_get_allocator(self)

    def pop_back(self):
        return _libsbol._VectorOfLocations_pop_back(self)

    def erase(self, *args):
        return _libsbol._VectorOfLocations_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__VectorOfLocations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._VectorOfLocations_push_back(self, x)

    def front(self):
        return _libsbol._VectorOfLocations_front(self)

    def back(self):
        return _libsbol._VectorOfLocations_back(self)

    def assign(self, n, x):
        return _libsbol._VectorOfLocations_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._VectorOfLocations_resize(self, *args)

    def insert(self, *args):
        return _libsbol._VectorOfLocations_insert(self, *args)

    def reserve(self, n):
        return _libsbol._VectorOfLocations_reserve(self, n)

    def capacity(self):
        return _libsbol._VectorOfLocations_capacity(self)
    __swig_destroy__ = _libsbol.delete__VectorOfLocations
    __del__ = lambda self: None
_VectorOfLocations_swigregister = _libsbol._VectorOfLocations_swigregister
_VectorOfLocations_swigregister(_VectorOfLocations)

class _ownedLocation(locationProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [locationProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _ownedLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [locationProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _ownedLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new__ownedLocation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol._ownedLocation_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol._ownedLocation_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol._ownedLocation_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol._ownedLocation_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol._ownedLocation_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol._ownedLocation_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol._ownedLocation_end(self)


    def size(self):
        """int size() """
        return _libsbol._ownedLocation_size(self)

    __swig_setmethods__["python_iter"] = _libsbol._ownedLocation_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol._ownedLocation_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol._ownedLocation_python_iter_get, _libsbol._ownedLocation_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol._ownedLocation___getitem__(self, *args)

    def __iter__(self):
        return _libsbol._ownedLocation___iter__(self)

    def next(self):
        return _libsbol._ownedLocation_next(self)

    def __next__(self):
        return _libsbol._ownedLocation___next__(self)

    def __len__(self):
        return _libsbol._ownedLocation___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol._ownedLocation_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol._ownedLocation_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol._ownedLocation_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete__ownedLocation
    __del__ = lambda self: None
_ownedLocation_swigregister = _libsbol._ownedLocation_swigregister
_ownedLocation_swigregister(_ownedLocation)

class listOfOwnedLocations(_ownedLocation):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [_ownedLocation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedLocations, name, value)
    __swig_getmethods__ = {}
    for _s in [_ownedLocation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedLocations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedLocations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedLocations_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedLocations
    __del__ = lambda self: None
listOfOwnedLocations_swigregister = _libsbol.listOfOwnedLocations_swigregister
listOfOwnedLocations_swigregister(listOfOwnedLocations)

class SequenceAnnotation(Identified):
    """


    The SequenceAnnotation class describes one or more regions of interest
    on the Sequence objects referred to by its parent ComponentDefinition.
    In addition, SequenceAnnotation objects can describe the substructure
    of their parent ComponentDefinition through association with the
    Component objects contained by this ComponentDefinition.

    C++ includes: sequenceannotation.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceAnnotation, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceAnnotation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["component"] = _libsbol.SequenceAnnotation_component_set
    __swig_getmethods__["component"] = _libsbol.SequenceAnnotation_component_get
    if _newclass:
        component = _swig_property(_libsbol.SequenceAnnotation_component_get, _libsbol.SequenceAnnotation_component_set)
    __swig_setmethods__["locations"] = _libsbol.SequenceAnnotation_locations_set
    __swig_getmethods__["locations"] = _libsbol.SequenceAnnotation_locations_get
    if _newclass:
        locations = _swig_property(_libsbol.SequenceAnnotation_locations_get, _libsbol.SequenceAnnotation_locations_set)
    __swig_setmethods__["roles"] = _libsbol.SequenceAnnotation_roles_set
    __swig_getmethods__["roles"] = _libsbol.SequenceAnnotation_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.SequenceAnnotation_roles_get, _libsbol.SequenceAnnotation_roles_set)
    __swig_setmethods__["roleIntegration"] = _libsbol.SequenceAnnotation_roleIntegration_set
    __swig_getmethods__["roleIntegration"] = _libsbol.SequenceAnnotation_roleIntegration_get
    if _newclass:
        roleIntegration = _swig_property(_libsbol.SequenceAnnotation_roleIntegration_get, _libsbol.SequenceAnnotation_roleIntegration_set)

    def __init__(self, *args):
        """
        SequenceAnnotation(std::string
        uri=DEFAULT_NS"/SequenceAnnotation/example", std::string
        version="1.0.0") 
        """
        this = _libsbol.new_SequenceAnnotation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_SequenceAnnotation
    __del__ = lambda self: None
SequenceAnnotation_swigregister = _libsbol.SequenceAnnotation_swigregister
SequenceAnnotation_swigregister(SequenceAnnotation)

class MapsTo(Identified):
    """


    MapsTo objects provide a means to connect outputs and inputs of
    ModuleDefinitions.

    C++ includes: mapsto.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapsTo, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapsTo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refinement"] = _libsbol.MapsTo_refinement_set
    __swig_getmethods__["refinement"] = _libsbol.MapsTo_refinement_get
    if _newclass:
        refinement = _swig_property(_libsbol.MapsTo_refinement_get, _libsbol.MapsTo_refinement_set)
    __swig_setmethods__["local"] = _libsbol.MapsTo_local_set
    __swig_getmethods__["local"] = _libsbol.MapsTo_local_get
    if _newclass:
        local = _swig_property(_libsbol.MapsTo_local_get, _libsbol.MapsTo_local_set)
    __swig_setmethods__["remote"] = _libsbol.MapsTo_remote_set
    __swig_getmethods__["remote"] = _libsbol.MapsTo_remote_get
    if _newclass:
        remote = _swig_property(_libsbol.MapsTo_remote_get, _libsbol.MapsTo_remote_set)

    def __init__(self, *args):
        """
        MapsTo(std::string
        uri_prefix, std::string display_id, std::string version, std::string
        local, std::string remote, std::string refinement) 
        """
        this = _libsbol.new_MapsTo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_MapsTo
    __del__ = lambda self: None
MapsTo_swigregister = _libsbol.MapsTo_swigregister
MapsTo_swigregister(MapsTo)

class _VectorOfMapsTos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _VectorOfMapsTos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _VectorOfMapsTos, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._VectorOfMapsTos_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._VectorOfMapsTos___nonzero__(self)

    def __bool__(self):
        return _libsbol._VectorOfMapsTos___bool__(self)

    def __len__(self):
        return _libsbol._VectorOfMapsTos___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._VectorOfMapsTos___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._VectorOfMapsTos___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._VectorOfMapsTos___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._VectorOfMapsTos___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._VectorOfMapsTos___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._VectorOfMapsTos___setitem__(self, *args)

    def pop(self):
        return _libsbol._VectorOfMapsTos_pop(self)

    def append(self, x):
        return _libsbol._VectorOfMapsTos_append(self, x)

    def empty(self):
        return _libsbol._VectorOfMapsTos_empty(self)

    def size(self):
        return _libsbol._VectorOfMapsTos_size(self)

    def swap(self, v):
        return _libsbol._VectorOfMapsTos_swap(self, v)

    def begin(self):
        return _libsbol._VectorOfMapsTos_begin(self)

    def end(self):
        return _libsbol._VectorOfMapsTos_end(self)

    def rbegin(self):
        return _libsbol._VectorOfMapsTos_rbegin(self)

    def rend(self):
        return _libsbol._VectorOfMapsTos_rend(self)

    def clear(self):
        return _libsbol._VectorOfMapsTos_clear(self)

    def get_allocator(self):
        return _libsbol._VectorOfMapsTos_get_allocator(self)

    def pop_back(self):
        return _libsbol._VectorOfMapsTos_pop_back(self)

    def erase(self, *args):
        return _libsbol._VectorOfMapsTos_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__VectorOfMapsTos(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._VectorOfMapsTos_push_back(self, x)

    def front(self):
        return _libsbol._VectorOfMapsTos_front(self)

    def back(self):
        return _libsbol._VectorOfMapsTos_back(self)

    def assign(self, n, x):
        return _libsbol._VectorOfMapsTos_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._VectorOfMapsTos_resize(self, *args)

    def insert(self, *args):
        return _libsbol._VectorOfMapsTos_insert(self, *args)

    def reserve(self, n):
        return _libsbol._VectorOfMapsTos_reserve(self, n)

    def capacity(self):
        return _libsbol._VectorOfMapsTos_capacity(self)
    __swig_destroy__ = _libsbol.delete__VectorOfMapsTos
    __del__ = lambda self: None
_VectorOfMapsTos_swigregister = _libsbol._VectorOfMapsTos_swigregister
_VectorOfMapsTos_swigregister(_VectorOfMapsTos)

class mapsToProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapsToProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapsToProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_mapsToProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_mapsToProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.mapsToProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.mapsToProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.mapsToProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.mapsToProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.mapsToProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.mapsToProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.mapsToProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.mapsToProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.mapsToProperty___iter__(self)

    def next(self):
        return _libsbol.mapsToProperty_next(self)

    def __next__(self):
        return _libsbol.mapsToProperty___next__(self)

    def __len__(self):
        return _libsbol.mapsToProperty___len__(self)
mapsToProperty_swigregister = _libsbol.mapsToProperty_swigregister
mapsToProperty_swigregister(mapsToProperty)

class ownedMapsTo(mapsToProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [mapsToProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedMapsTo, name, value)
    __swig_getmethods__ = {}
    for _s in [mapsToProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedMapsTo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedMapsTo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedMapsTo_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedMapsTo_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedMapsTo_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedMapsTo_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedMapsTo_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedMapsTo_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedMapsTo_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedMapsTo_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedMapsTo_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedMapsTo_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedMapsTo_python_iter_get, _libsbol.ownedMapsTo_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedMapsTo___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedMapsTo___iter__(self)

    def next(self):
        return _libsbol.ownedMapsTo_next(self)

    def __next__(self):
        return _libsbol.ownedMapsTo___next__(self)

    def __len__(self):
        return _libsbol.ownedMapsTo___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedMapsTo_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedMapsTo_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedMapsTo_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedMapsTo
    __del__ = lambda self: None
ownedMapsTo_swigregister = _libsbol.ownedMapsTo_swigregister
ownedMapsTo_swigregister(ownedMapsTo)

class listOfOwnedMapsTos(ownedMapsTo):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedMapsTo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedMapsTos, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedMapsTo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedMapsTos, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedMapsTos(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedMapsTos_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedMapsTos
    __del__ = lambda self: None
listOfOwnedMapsTos_swigregister = _libsbol.listOfOwnedMapsTos_swigregister
listOfOwnedMapsTos_swigregister(listOfOwnedMapsTos)

class ComponentInstance(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentInstance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["definition"] = _libsbol.ComponentInstance_definition_set
    __swig_getmethods__["definition"] = _libsbol.ComponentInstance_definition_get
    if _newclass:
        definition = _swig_property(_libsbol.ComponentInstance_definition_get, _libsbol.ComponentInstance_definition_set)
    __swig_setmethods__["access"] = _libsbol.ComponentInstance_access_set
    __swig_getmethods__["access"] = _libsbol.ComponentInstance_access_get
    if _newclass:
        access = _swig_property(_libsbol.ComponentInstance_access_get, _libsbol.ComponentInstance_access_set)
    __swig_setmethods__["mapsTos"] = _libsbol.ComponentInstance_mapsTos_set
    __swig_getmethods__["mapsTos"] = _libsbol.ComponentInstance_mapsTos_get
    if _newclass:
        mapsTos = _swig_property(_libsbol.ComponentInstance_mapsTos_get, _libsbol.ComponentInstance_mapsTos_set)
    __swig_destroy__ = _libsbol.delete_ComponentInstance
    __del__ = lambda self: None
ComponentInstance_swigregister = _libsbol.ComponentInstance_swigregister
ComponentInstance_swigregister(ComponentInstance)

class Component(ComponentInstance):
    """


    The Component class is used to compose ComponentDefinition objects
    into a structural hierarchy. For example, the ComponentDefinition of a
    gene could contain four Component objects: a promoter, RBS, CDS, and
    terminator. In turn, the ComponentDefinition of the promoter Component
    could contain Component objects defined as various operator sites.

    C++ includes: component.h 
    """

    __swig_setmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)
    __repr__ = _swig_repr
    __swig_setmethods__["roles"] = _libsbol.Component_roles_set
    __swig_getmethods__["roles"] = _libsbol.Component_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.Component_roles_get, _libsbol.Component_roles_set)
    __swig_setmethods__["roleIntegration"] = _libsbol.Component_roleIntegration_set
    __swig_getmethods__["roleIntegration"] = _libsbol.Component_roleIntegration_get
    if _newclass:
        roleIntegration = _swig_property(_libsbol.Component_roleIntegration_get, _libsbol.Component_roleIntegration_set)

    def __init__(self, *args):
        """
        Component(std::string uri=DEFAULT_NS"/Component/example",
        std::string definition="", std::string access=SBOL_ACCESS_PUBLIC,
        std::string version="1.0.0") 
        """
        this = _libsbol.new_Component(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Component
    __del__ = lambda self: None
Component_swigregister = _libsbol.Component_swigregister
Component_swigregister(Component)

class FunctionalComponent(ComponentInstance):
    """


    The FunctionalComponent class is used to specify the functional usage
    of a ComponentDefinition inside a ModuleDefinition. The
    ModuleDefinition describes how the that describes how the
    FunctionalComponent interacts with others and summarizes their
    aggregate function.

    C++ includes: component.h 
    """

    __swig_setmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionalComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionalComponent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["direction"] = _libsbol.FunctionalComponent_direction_set
    __swig_getmethods__["direction"] = _libsbol.FunctionalComponent_direction_get
    if _newclass:
        direction = _swig_property(_libsbol.FunctionalComponent_direction_get, _libsbol.FunctionalComponent_direction_set)

    def __init__(self, *args):
        """
        FunctionalComponent(std::string
        uri=DEFAULT_NS"/FunctionalComponent/example", std::string
        definition="", std::string access=SBOL_ACCESS_PUBLIC, std::string
        direction=SBOL_DIRECTION_NONE, std::string version="1.0.0")

        Construct a FunctionalComponent.

        Parameters:
        -----------

        A:  full URI including a scheme, namespace, and identifier. If
        SBOLCompliance configuration is enabled, then this argument is simply
        the displayId for the new object and a full URI will automatically be
        constructed.

        definition:

        access:

        direction:  The direction property specifies whether a
        FunctionalComponent serves as an input, output, both, or neither for
        its parent ModuleDefinition object

        version:  An arbitrary version string. If SBOLCompliance is enabled,
        this should be a Maven version string of the form
        "major.minor.patch". 
        """
        this = _libsbol.new_FunctionalComponent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def connect(self, interface_component):
        """
        void
        connect(FunctionalComponent &interface_component)

        This method connects module inputs and outputs.

        Parameters:
        -----------

        interface_component:  An input or output component from another
        ModuleDefinition that corresponds with this component. 
        """
        return _libsbol.FunctionalComponent_connect(self, interface_component)


    def mask(self, masked_component):
        """
        void
        mask(FunctionalComponent &masked_component) 
        """
        return _libsbol.FunctionalComponent_mask(self, masked_component)


    def isMasked(self):
        """
        int
        isMasked() 
        """
        return _libsbol.FunctionalComponent_isMasked(self)

    __swig_destroy__ = _libsbol.delete_FunctionalComponent
    __del__ = lambda self: None
FunctionalComponent_swigregister = _libsbol.FunctionalComponent_swigregister
FunctionalComponent_swigregister(FunctionalComponent)

class SequenceConstraint(Identified):
    """


    The SequenceConstraint class can be used to assert restrictions on the
    relative, sequence- based positions of pairs of Component objects
    contained by the same parent ComponentDefinition. The primary purpose
    of this class is to enable the specification of partially designed
    ComponentDefinition objects, for which the precise positions or
    orientations of their contained Component objects are not yet fully
    determined.

    C++ includes: sequenceconstraint.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subject"] = _libsbol.SequenceConstraint_subject_set
    __swig_getmethods__["subject"] = _libsbol.SequenceConstraint_subject_get
    if _newclass:
        subject = _swig_property(_libsbol.SequenceConstraint_subject_get, _libsbol.SequenceConstraint_subject_set)
    __swig_setmethods__["object"] = _libsbol.SequenceConstraint_object_set
    __swig_getmethods__["object"] = _libsbol.SequenceConstraint_object_get
    if _newclass:
        object = _swig_property(_libsbol.SequenceConstraint_object_get, _libsbol.SequenceConstraint_object_set)
    __swig_setmethods__["restriction"] = _libsbol.SequenceConstraint_restriction_set
    __swig_getmethods__["restriction"] = _libsbol.SequenceConstraint_restriction_get
    if _newclass:
        restriction = _swig_property(_libsbol.SequenceConstraint_restriction_get, _libsbol.SequenceConstraint_restriction_set)

    def __init__(self, *args):
        """
        SequenceConstraint(std::string
        uri=DEFAULT_NS"/SequenceConstraint/example", std::string
        subject="", std::string object="", std::string
        restriction=SBOL_RESTRICTION_PRECEDES, std::string version="1.0.0")

        """
        this = _libsbol.new_SequenceConstraint(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_SequenceConstraint
    __del__ = lambda self: None
SequenceConstraint_swigregister = _libsbol.SequenceConstraint_swigregister
SequenceConstraint_swigregister(SequenceConstraint)

class _VectorOfSequenceConstraints(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _VectorOfSequenceConstraints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _VectorOfSequenceConstraints, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._VectorOfSequenceConstraints_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._VectorOfSequenceConstraints___nonzero__(self)

    def __bool__(self):
        return _libsbol._VectorOfSequenceConstraints___bool__(self)

    def __len__(self):
        return _libsbol._VectorOfSequenceConstraints___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._VectorOfSequenceConstraints___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._VectorOfSequenceConstraints___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._VectorOfSequenceConstraints___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._VectorOfSequenceConstraints___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._VectorOfSequenceConstraints___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._VectorOfSequenceConstraints___setitem__(self, *args)

    def pop(self):
        return _libsbol._VectorOfSequenceConstraints_pop(self)

    def append(self, x):
        return _libsbol._VectorOfSequenceConstraints_append(self, x)

    def empty(self):
        return _libsbol._VectorOfSequenceConstraints_empty(self)

    def size(self):
        return _libsbol._VectorOfSequenceConstraints_size(self)

    def swap(self, v):
        return _libsbol._VectorOfSequenceConstraints_swap(self, v)

    def begin(self):
        return _libsbol._VectorOfSequenceConstraints_begin(self)

    def end(self):
        return _libsbol._VectorOfSequenceConstraints_end(self)

    def rbegin(self):
        return _libsbol._VectorOfSequenceConstraints_rbegin(self)

    def rend(self):
        return _libsbol._VectorOfSequenceConstraints_rend(self)

    def clear(self):
        return _libsbol._VectorOfSequenceConstraints_clear(self)

    def get_allocator(self):
        return _libsbol._VectorOfSequenceConstraints_get_allocator(self)

    def pop_back(self):
        return _libsbol._VectorOfSequenceConstraints_pop_back(self)

    def erase(self, *args):
        return _libsbol._VectorOfSequenceConstraints_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__VectorOfSequenceConstraints(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._VectorOfSequenceConstraints_push_back(self, x)

    def front(self):
        return _libsbol._VectorOfSequenceConstraints_front(self)

    def back(self):
        return _libsbol._VectorOfSequenceConstraints_back(self)

    def assign(self, n, x):
        return _libsbol._VectorOfSequenceConstraints_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._VectorOfSequenceConstraints_resize(self, *args)

    def insert(self, *args):
        return _libsbol._VectorOfSequenceConstraints_insert(self, *args)

    def reserve(self, n):
        return _libsbol._VectorOfSequenceConstraints_reserve(self, n)

    def capacity(self):
        return _libsbol._VectorOfSequenceConstraints_capacity(self)
    __swig_destroy__ = _libsbol.delete__VectorOfSequenceConstraints
    __del__ = lambda self: None
_VectorOfSequenceConstraints_swigregister = _libsbol._VectorOfSequenceConstraints_swigregister
_VectorOfSequenceConstraints_swigregister(_VectorOfSequenceConstraints)

class sequenceConstraintProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequenceConstraintProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequenceConstraintProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_sequenceConstraintProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_sequenceConstraintProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.sequenceConstraintProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.sequenceConstraintProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.sequenceConstraintProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.sequenceConstraintProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.sequenceConstraintProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.sequenceConstraintProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.sequenceConstraintProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.sequenceConstraintProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.sequenceConstraintProperty___iter__(self)

    def next(self):
        return _libsbol.sequenceConstraintProperty_next(self)

    def __next__(self):
        return _libsbol.sequenceConstraintProperty___next__(self)

    def __len__(self):
        return _libsbol.sequenceConstraintProperty___len__(self)
sequenceConstraintProperty_swigregister = _libsbol.sequenceConstraintProperty_swigregister
sequenceConstraintProperty_swigregister(sequenceConstraintProperty)

class ownedSequenceConstraint(sequenceConstraintProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [sequenceConstraintProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedSequenceConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [sequenceConstraintProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedSequenceConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedSequenceConstraint(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedSequenceConstraint_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedSequenceConstraint_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedSequenceConstraint_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedSequenceConstraint_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedSequenceConstraint_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedSequenceConstraint_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedSequenceConstraint_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedSequenceConstraint_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedSequenceConstraint_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedSequenceConstraint_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedSequenceConstraint_python_iter_get, _libsbol.ownedSequenceConstraint_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedSequenceConstraint___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedSequenceConstraint___iter__(self)

    def next(self):
        return _libsbol.ownedSequenceConstraint_next(self)

    def __next__(self):
        return _libsbol.ownedSequenceConstraint___next__(self)

    def __len__(self):
        return _libsbol.ownedSequenceConstraint___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedSequenceConstraint_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedSequenceConstraint_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedSequenceConstraint_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedSequenceConstraint
    __del__ = lambda self: None
ownedSequenceConstraint_swigregister = _libsbol.ownedSequenceConstraint_swigregister
ownedSequenceConstraint_swigregister(ownedSequenceConstraint)

class listOfOwnedSequenceConstraints(ownedSequenceConstraint):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedSequenceConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedSequenceConstraints, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedSequenceConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedSequenceConstraints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedSequenceConstraints(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedSequenceConstraints_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedSequenceConstraints
    __del__ = lambda self: None
listOfOwnedSequenceConstraints_swigregister = _libsbol.listOfOwnedSequenceConstraints_swigregister
listOfOwnedSequenceConstraints_swigregister(listOfOwnedSequenceConstraints)

class _VectorOfSequenceAnnotations(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _VectorOfSequenceAnnotations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _VectorOfSequenceAnnotations, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._VectorOfSequenceAnnotations_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._VectorOfSequenceAnnotations___nonzero__(self)

    def __bool__(self):
        return _libsbol._VectorOfSequenceAnnotations___bool__(self)

    def __len__(self):
        return _libsbol._VectorOfSequenceAnnotations___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._VectorOfSequenceAnnotations___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._VectorOfSequenceAnnotations___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._VectorOfSequenceAnnotations___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._VectorOfSequenceAnnotations___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._VectorOfSequenceAnnotations___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._VectorOfSequenceAnnotations___setitem__(self, *args)

    def pop(self):
        return _libsbol._VectorOfSequenceAnnotations_pop(self)

    def append(self, x):
        return _libsbol._VectorOfSequenceAnnotations_append(self, x)

    def empty(self):
        return _libsbol._VectorOfSequenceAnnotations_empty(self)

    def size(self):
        return _libsbol._VectorOfSequenceAnnotations_size(self)

    def swap(self, v):
        return _libsbol._VectorOfSequenceAnnotations_swap(self, v)

    def begin(self):
        return _libsbol._VectorOfSequenceAnnotations_begin(self)

    def end(self):
        return _libsbol._VectorOfSequenceAnnotations_end(self)

    def rbegin(self):
        return _libsbol._VectorOfSequenceAnnotations_rbegin(self)

    def rend(self):
        return _libsbol._VectorOfSequenceAnnotations_rend(self)

    def clear(self):
        return _libsbol._VectorOfSequenceAnnotations_clear(self)

    def get_allocator(self):
        return _libsbol._VectorOfSequenceAnnotations_get_allocator(self)

    def pop_back(self):
        return _libsbol._VectorOfSequenceAnnotations_pop_back(self)

    def erase(self, *args):
        return _libsbol._VectorOfSequenceAnnotations_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__VectorOfSequenceAnnotations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._VectorOfSequenceAnnotations_push_back(self, x)

    def front(self):
        return _libsbol._VectorOfSequenceAnnotations_front(self)

    def back(self):
        return _libsbol._VectorOfSequenceAnnotations_back(self)

    def assign(self, n, x):
        return _libsbol._VectorOfSequenceAnnotations_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._VectorOfSequenceAnnotations_resize(self, *args)

    def insert(self, *args):
        return _libsbol._VectorOfSequenceAnnotations_insert(self, *args)

    def reserve(self, n):
        return _libsbol._VectorOfSequenceAnnotations_reserve(self, n)

    def capacity(self):
        return _libsbol._VectorOfSequenceAnnotations_capacity(self)
    __swig_destroy__ = _libsbol.delete__VectorOfSequenceAnnotations
    __del__ = lambda self: None
_VectorOfSequenceAnnotations_swigregister = _libsbol._VectorOfSequenceAnnotations_swigregister
_VectorOfSequenceAnnotations_swigregister(_VectorOfSequenceAnnotations)

class sequenceAnnotationProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequenceAnnotationProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequenceAnnotationProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_sequenceAnnotationProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_sequenceAnnotationProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.sequenceAnnotationProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.sequenceAnnotationProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.sequenceAnnotationProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.sequenceAnnotationProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.sequenceAnnotationProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.sequenceAnnotationProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.sequenceAnnotationProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.sequenceAnnotationProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.sequenceAnnotationProperty___iter__(self)

    def next(self):
        return _libsbol.sequenceAnnotationProperty_next(self)

    def __next__(self):
        return _libsbol.sequenceAnnotationProperty___next__(self)

    def __len__(self):
        return _libsbol.sequenceAnnotationProperty___len__(self)
sequenceAnnotationProperty_swigregister = _libsbol.sequenceAnnotationProperty_swigregister
sequenceAnnotationProperty_swigregister(sequenceAnnotationProperty)

class ownedSequenceAnnotation(sequenceAnnotationProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [sequenceAnnotationProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedSequenceAnnotation, name, value)
    __swig_getmethods__ = {}
    for _s in [sequenceAnnotationProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedSequenceAnnotation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedSequenceAnnotation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedSequenceAnnotation_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedSequenceAnnotation_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedSequenceAnnotation_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedSequenceAnnotation_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedSequenceAnnotation_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedSequenceAnnotation_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedSequenceAnnotation_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedSequenceAnnotation_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedSequenceAnnotation_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedSequenceAnnotation_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedSequenceAnnotation_python_iter_get, _libsbol.ownedSequenceAnnotation_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedSequenceAnnotation___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedSequenceAnnotation___iter__(self)

    def next(self):
        return _libsbol.ownedSequenceAnnotation_next(self)

    def __next__(self):
        return _libsbol.ownedSequenceAnnotation___next__(self)

    def __len__(self):
        return _libsbol.ownedSequenceAnnotation___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedSequenceAnnotation_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedSequenceAnnotation_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedSequenceAnnotation_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedSequenceAnnotation
    __del__ = lambda self: None
ownedSequenceAnnotation_swigregister = _libsbol.ownedSequenceAnnotation_swigregister
ownedSequenceAnnotation_swigregister(ownedSequenceAnnotation)

class listOfOwnedSequenceAnnotations(ownedSequenceAnnotation):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedSequenceAnnotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedSequenceAnnotations, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedSequenceAnnotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedSequenceAnnotations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedSequenceAnnotations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedSequenceAnnotations_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedSequenceAnnotations
    __del__ = lambda self: None
listOfOwnedSequenceAnnotations_swigregister = _libsbol.listOfOwnedSequenceAnnotations_swigregister
listOfOwnedSequenceAnnotations_swigregister(listOfOwnedSequenceAnnotations)

class _VectorOfComponents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _VectorOfComponents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _VectorOfComponents, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._VectorOfComponents_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._VectorOfComponents___nonzero__(self)

    def __bool__(self):
        return _libsbol._VectorOfComponents___bool__(self)

    def __len__(self):
        return _libsbol._VectorOfComponents___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._VectorOfComponents___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._VectorOfComponents___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._VectorOfComponents___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._VectorOfComponents___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._VectorOfComponents___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._VectorOfComponents___setitem__(self, *args)

    def pop(self):
        return _libsbol._VectorOfComponents_pop(self)

    def append(self, x):
        return _libsbol._VectorOfComponents_append(self, x)

    def empty(self):
        return _libsbol._VectorOfComponents_empty(self)

    def size(self):
        return _libsbol._VectorOfComponents_size(self)

    def swap(self, v):
        return _libsbol._VectorOfComponents_swap(self, v)

    def begin(self):
        return _libsbol._VectorOfComponents_begin(self)

    def end(self):
        return _libsbol._VectorOfComponents_end(self)

    def rbegin(self):
        return _libsbol._VectorOfComponents_rbegin(self)

    def rend(self):
        return _libsbol._VectorOfComponents_rend(self)

    def clear(self):
        return _libsbol._VectorOfComponents_clear(self)

    def get_allocator(self):
        return _libsbol._VectorOfComponents_get_allocator(self)

    def pop_back(self):
        return _libsbol._VectorOfComponents_pop_back(self)

    def erase(self, *args):
        return _libsbol._VectorOfComponents_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__VectorOfComponents(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._VectorOfComponents_push_back(self, x)

    def front(self):
        return _libsbol._VectorOfComponents_front(self)

    def back(self):
        return _libsbol._VectorOfComponents_back(self)

    def assign(self, n, x):
        return _libsbol._VectorOfComponents_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._VectorOfComponents_resize(self, *args)

    def insert(self, *args):
        return _libsbol._VectorOfComponents_insert(self, *args)

    def reserve(self, n):
        return _libsbol._VectorOfComponents_reserve(self, n)

    def capacity(self):
        return _libsbol._VectorOfComponents_capacity(self)
    __swig_destroy__ = _libsbol.delete__VectorOfComponents
    __del__ = lambda self: None
_VectorOfComponents_swigregister = _libsbol._VectorOfComponents_swigregister
_VectorOfComponents_swigregister(_VectorOfComponents)

class componentsProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, componentsProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, componentsProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_componentsProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_componentsProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.componentsProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.componentsProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.componentsProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.componentsProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.componentsProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.componentsProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.componentsProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.componentsProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.componentsProperty___iter__(self)

    def next(self):
        return _libsbol.componentsProperty_next(self)

    def __next__(self):
        return _libsbol.componentsProperty___next__(self)

    def __len__(self):
        return _libsbol.componentsProperty___len__(self)
componentsProperty_swigregister = _libsbol.componentsProperty_swigregister
componentsProperty_swigregister(componentsProperty)

class ownedComponents(componentsProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [componentsProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [componentsProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedComponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedComponents(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedComponents_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedComponents_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedComponents_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedComponents_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedComponents_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedComponents_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedComponents_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedComponents_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedComponents_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedComponents_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedComponents_python_iter_get, _libsbol.ownedComponents_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedComponents___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedComponents___iter__(self)

    def next(self):
        return _libsbol.ownedComponents_next(self)

    def __next__(self):
        return _libsbol.ownedComponents___next__(self)

    def __len__(self):
        return _libsbol.ownedComponents___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedComponents_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedComponents_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedComponents_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedComponents
    __del__ = lambda self: None
ownedComponents_swigregister = _libsbol.ownedComponents_swigregister
ownedComponents_swigregister(ownedComponents)

class listOfOwnedComponents(ownedComponents):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedComponents]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedComponents]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedComponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedComponents(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedComponents_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedComponents
    __del__ = lambda self: None
listOfOwnedComponents_swigregister = _libsbol.listOfOwnedComponents_swigregister
listOfOwnedComponents_swigregister(listOfOwnedComponents)

class ComponentDefinition(TopLevel):
    """


    The ComponentDefinition class represents the structural entities of a
    biological design.

    The primary usage of this class is to represent structural entities
    with designed sequences, such as DNA, RNA, and proteins, but it can
    also be used to represent any other entity that is part of a design,
    such as small molecules, proteins, and complexes

    C++ includes: componentdefinition.h 
    """

    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentDefinition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["types"] = _libsbol.ComponentDefinition_types_set
    __swig_getmethods__["types"] = _libsbol.ComponentDefinition_types_get
    if _newclass:
        types = _swig_property(_libsbol.ComponentDefinition_types_get, _libsbol.ComponentDefinition_types_set)
    __swig_setmethods__["roles"] = _libsbol.ComponentDefinition_roles_set
    __swig_getmethods__["roles"] = _libsbol.ComponentDefinition_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.ComponentDefinition_roles_get, _libsbol.ComponentDefinition_roles_set)
    __swig_setmethods__["components"] = _libsbol.ComponentDefinition_components_set
    __swig_getmethods__["components"] = _libsbol.ComponentDefinition_components_get
    if _newclass:
        components = _swig_property(_libsbol.ComponentDefinition_components_get, _libsbol.ComponentDefinition_components_set)
    __swig_setmethods__["sequence"] = _libsbol.ComponentDefinition_sequence_set
    __swig_getmethods__["sequence"] = _libsbol.ComponentDefinition_sequence_get
    if _newclass:
        sequence = _swig_property(_libsbol.ComponentDefinition_sequence_get, _libsbol.ComponentDefinition_sequence_set)
    __swig_setmethods__["sequenceAnnotations"] = _libsbol.ComponentDefinition_sequenceAnnotations_set
    __swig_getmethods__["sequenceAnnotations"] = _libsbol.ComponentDefinition_sequenceAnnotations_get
    if _newclass:
        sequenceAnnotations = _swig_property(_libsbol.ComponentDefinition_sequenceAnnotations_get, _libsbol.ComponentDefinition_sequenceAnnotations_set)
    __swig_setmethods__["sequenceConstraints"] = _libsbol.ComponentDefinition_sequenceConstraints_set
    __swig_getmethods__["sequenceConstraints"] = _libsbol.ComponentDefinition_sequenceConstraints_get
    if _newclass:
        sequenceConstraints = _swig_property(_libsbol.ComponentDefinition_sequenceConstraints_get, _libsbol.ComponentDefinition_sequenceConstraints_set)

    def __init__(self, *args):
        """
        ComponentDefinition(std::string
        uri=DEFAULT_NS"/ComponentDefinition/example", std::string
        type=BIOPAX_DNA, std::string version="1.0.0")

        Construct a ComponentDefinition.

        Parameters:
        -----------

        uri:  A full URI including a scheme, namespace, and identifier. If
        SBOLCompliance configuration is enabled, then this argument is simply
        the displayId for the new object and a full URI will automatically be
        constructed.

        type:  A BioPAX ontology term that indicates whether the
        ComponentDefinition is DNA, RNA, protein, or some other molecule type.

        version:  An arbitrary version string. If SBOLCompliance is enabled,
        this should be a Maven version string of the form
        "major.minor.patch". 
        """
        this = _libsbol.new_ComponentDefinition(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def updateSequence(self, *args):
        """std::string updateSequence(std::string composite_sequence="") """
        return _libsbol.ComponentDefinition_updateSequence(self, *args)


    def getInSequentialOrder(self):
        """
        std::vector<Component*> getInSequentialOrder()

        Orders this ComponentDefinition's member Components into a linear
        arrangement based on Sequence Constraints.

        Primary sequence structure 
        """
        return _libsbol.ComponentDefinition_getInSequentialOrder(self)


    def hasUpstreamComponent(self, current_component):
        """
        int hasUpstreamComponent(Component &current_component)

        Checks if the specified Component has a Component upstream in linear
        arrangement on the DNA strand.

        Checks that the appropriate SequenceConstraint exists.

        Parameters:
        -----------

        current_component:  A Component in this ComponentDefinition

        1 if found, 0 if not 
        """
        return _libsbol.ComponentDefinition_hasUpstreamComponent(self, current_component)


    def getUpstreamComponent(self, current_component):
        """
        Component& getUpstreamComponent(Component &current_component)

        Get the upstream Component.

        The upstream component 
        """
        return _libsbol.ComponentDefinition_getUpstreamComponent(self, current_component)


    def hasDownstreamComponent(self, current_component):
        """
        int
        hasDownstreamComponent(Component &current_component)

        Checks if the specified Component has a Component downstream in linear
        arrangement on the DNA strand.

        Checks that the appropriate SequenceConstraint exists.

        Parameters:
        -----------

        current_component:  A Component in this ComponentDefinition

        1 if found, 0 if not 
        """
        return _libsbol.ComponentDefinition_hasDownstreamComponent(self, current_component)


    def getDownstreamComponent(self, current_component):
        """
        Component&
        getDownstreamComponent(Component &current_component)

        Get the downstream Component.

        The downstream component 
        """
        return _libsbol.ComponentDefinition_getDownstreamComponent(self, current_component)


    def getFirstComponent(self):
        """
        Component& getFirstComponent()

        Gets the first Component in a linear sequence.

        The first component in sequential order 
        """
        return _libsbol.ComponentDefinition_getFirstComponent(self)


    def getLastComponent(self):
        """
        Component& getLastComponent()

        Gets the last Component in a linear sequence.

        The last component in sequential order 
        """
        return _libsbol.ComponentDefinition_getLastComponent(self)


    def participate(self, species):
        """
        void
        participate(Participation &species)

        A convenience method that assigns a component to participate in a
        biochemical reaction.

        Behind the scenes, it auto-constructs a FunctionalComponent for this
        ComponentDefinition and assigns it to a Participation

        Parameters:
        -----------

        species:  A Participation object (ie, participant species in a
        biochemical Interaction). 
        """
        return _libsbol.ComponentDefinition_participate(self, species)

    __swig_destroy__ = _libsbol.delete_ComponentDefinition
    __del__ = lambda self: None

    def assemble(self, *args):
        """
        void
        assemble(std::vector< ComponentDefinition * > list_of_components)

        Assembles the provided vector of Components into a structural
        hierarchy.

        Autoconstructs the required Components and SequenceConstraints. The
        resulting data structure is a partial design, still lacking a specific
        DNA (or other) sequence. To fully realize a design, use
        Sequence::assemble().

        Parameters:
        -----------

        list_of_components:  A list of subcomponents that will compose this
        ComponentDefinition 
        """
        return _libsbol.ComponentDefinition_assemble(self, *args)

ComponentDefinition_swigregister = _libsbol.ComponentDefinition_swigregister
ComponentDefinition_swigregister(ComponentDefinition)

class Sequence(TopLevel):
    """


    The primary structure (eg, nucleotide or amino acid sequence) of a
    ComponentDefinition object.

    C++ includes: sequence.h 
    """

    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sequence, name)
    __repr__ = _swig_repr
    __swig_setmethods__["elements"] = _libsbol.Sequence_elements_set
    __swig_getmethods__["elements"] = _libsbol.Sequence_elements_get
    if _newclass:
        elements = _swig_property(_libsbol.Sequence_elements_get, _libsbol.Sequence_elements_set)
    __swig_setmethods__["encoding"] = _libsbol.Sequence_encoding_set
    __swig_getmethods__["encoding"] = _libsbol.Sequence_encoding_get
    if _newclass:
        encoding = _swig_property(_libsbol.Sequence_encoding_get, _libsbol.Sequence_encoding_set)

    def __init__(self, *args):
        """
        Sequence(std::string
        uri=DEFAULT_NS"/Sequence/example", std::string elements="",
        std::string encoding=SBOL_ENCODING_IUPAC, std::string
        version="1.0.0") 
        """
        this = _libsbol.new_Sequence(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def assemble(self, *args):
        """
        std::string
        assemble(std::string composite_sequence="") 
        """
        return _libsbol.Sequence_assemble(self, *args)

    __swig_destroy__ = _libsbol.delete_Sequence
    __del__ = lambda self: None
Sequence_swigregister = _libsbol.Sequence_swigregister
Sequence_swigregister(Sequence)

class listOfURIs(URIProperty):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [URIProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfURIs, name, value)
    __swig_getmethods__ = {}
    for _s in [URIProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfURIs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfURIs(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfURIs_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfURIs
    __del__ = lambda self: None
listOfURIs_swigregister = _libsbol.listOfURIs_swigregister
listOfURIs_swigregister(listOfURIs)

class Participation(Identified):
    """


    Each Participation represents how a particular FunctionalComponent
    behaves in its parent Interaction.

    C++ includes: participation.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Participation, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Participation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["roles"] = _libsbol.Participation_roles_set
    __swig_getmethods__["roles"] = _libsbol.Participation_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.Participation_roles_get, _libsbol.Participation_roles_set)
    __swig_setmethods__["participant"] = _libsbol.Participation_participant_set
    __swig_getmethods__["participant"] = _libsbol.Participation_participant_get
    if _newclass:
        participant = _swig_property(_libsbol.Participation_participant_get, _libsbol.Participation_participant_set)

    def __init__(self, *args):
        """
        Participation(std::string uri, ComponentDefinition &species,
        std::string version="1.0.0") 
        """
        this = _libsbol.new_Participation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def define(self, *args):
        """
        void
        define(ComponentDefinition &species, std::string role="") 
        """
        return _libsbol.Participation_define(self, *args)

    __swig_destroy__ = _libsbol.delete_Participation
    __del__ = lambda self: None
Participation_swigregister = _libsbol.Participation_swigregister
Participation_swigregister(Participation)

class participationProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, participationProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, participationProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_participationProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_participationProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.participationProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.participationProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.participationProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.participationProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.participationProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.participationProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.participationProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.participationProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.participationProperty___iter__(self)

    def next(self):
        return _libsbol.participationProperty_next(self)

    def __next__(self):
        return _libsbol.participationProperty___next__(self)

    def __len__(self):
        return _libsbol.participationProperty___len__(self)
participationProperty_swigregister = _libsbol.participationProperty_swigregister
participationProperty_swigregister(participationProperty)

class ownedParticipation(participationProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [participationProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedParticipation, name, value)
    __swig_getmethods__ = {}
    for _s in [participationProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedParticipation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedParticipation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedParticipation_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedParticipation_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedParticipation_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedParticipation_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedParticipation_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedParticipation_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedParticipation_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedParticipation_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedParticipation_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedParticipation_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedParticipation_python_iter_get, _libsbol.ownedParticipation_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedParticipation___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedParticipation___iter__(self)

    def next(self):
        return _libsbol.ownedParticipation_next(self)

    def __next__(self):
        return _libsbol.ownedParticipation___next__(self)

    def __len__(self):
        return _libsbol.ownedParticipation___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedParticipation_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedParticipation_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedParticipation_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedParticipation
    __del__ = lambda self: None
ownedParticipation_swigregister = _libsbol.ownedParticipation_swigregister
ownedParticipation_swigregister(ownedParticipation)

class listOfOwnedParticipations(ownedParticipation):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedParticipation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedParticipations, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedParticipation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedParticipations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedParticipations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedParticipations_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedParticipations
    __del__ = lambda self: None
listOfOwnedParticipations_swigregister = _libsbol.listOfOwnedParticipations_swigregister
listOfOwnedParticipations_swigregister(listOfOwnedParticipations)

class Interaction(Identified):
    """


    The Interaction class provides more detailed descriptionof how the
    FunctionalComponents are intended to work together. For example, this
    class can be used to represent different forms of genetic regulation
    (e.g., transcriptional activation or repression), processes from the
    central dogma of biology (e.g. transcription and translation), and
    other basic molecular interactions (e.g., non-covalent binding or
    enzymatic phosphorylation).

    C++ includes: interaction.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interaction, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Interaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["types"] = _libsbol.Interaction_types_set
    __swig_getmethods__["types"] = _libsbol.Interaction_types_get
    if _newclass:
        types = _swig_property(_libsbol.Interaction_types_get, _libsbol.Interaction_types_set)
    __swig_setmethods__["participations"] = _libsbol.Interaction_participations_set
    __swig_getmethods__["participations"] = _libsbol.Interaction_participations_get
    if _newclass:
        participations = _swig_property(_libsbol.Interaction_participations_get, _libsbol.Interaction_participations_set)

    def __init__(self, *args):
        """
        Interaction(std::string uri=DEFAULT_NS"/Interaction/example",
        std::string interaction_type=SBO_INTERACTION)

        Construct an Interaction.

        Parameters:
        -----------

        uri:  A full URI including a scheme, namespace, and identifier. If
        SBOLCompliance configuration is enabled, then this argument is simply
        the displayId for the new object and a full URI will automatically be
        constructed.

        interaction_type:  A Systems Biology Ontology term that describes a
        biochemical interaction 
        """
        this = _libsbol.new_Interaction(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Interaction
    __del__ = lambda self: None
Interaction_swigregister = _libsbol.Interaction_swigregister
Interaction_swigregister(Interaction)

class Module(Identified):
    """


    The Module class represents a submodule of a ModuleDefinition within a
    hierarchical design.

    C++ includes: module.h 
    """

    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    __swig_setmethods__["definition"] = _libsbol.Module_definition_set
    __swig_getmethods__["definition"] = _libsbol.Module_definition_get
    if _newclass:
        definition = _swig_property(_libsbol.Module_definition_get, _libsbol.Module_definition_set)
    __swig_setmethods__["mapsTos"] = _libsbol.Module_mapsTos_set
    __swig_getmethods__["mapsTos"] = _libsbol.Module_mapsTos_get
    if _newclass:
        mapsTos = _swig_property(_libsbol.Module_mapsTos_get, _libsbol.Module_mapsTos_set)

    def __init__(self, *args):
        """
        Module(std::string
        uri=DEFAULT_NS"/Module/example", std::string definition="",
        std::string version="1.0.0") 
        """
        this = _libsbol.new_Module(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Module
    __del__ = lambda self: None
Module_swigregister = _libsbol.Module_swigregister
Module_swigregister(Module)

class Model(TopLevel):
    """


    The purpose of the Model class is to serve as a placeholder for an
    external computational model and provide additional meta-data to
    enable better reasoning about the contents of this model.

    In this way, there is minimal duplication of standardization efforts
    and users of SBOL can formalize the function of a ModuleDefinition in
    the language of their choice.

    C++ includes: model.h 
    """

    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _libsbol.Model_source_set
    __swig_getmethods__["source"] = _libsbol.Model_source_get
    if _newclass:
        source = _swig_property(_libsbol.Model_source_get, _libsbol.Model_source_set)
    __swig_setmethods__["language"] = _libsbol.Model_language_set
    __swig_getmethods__["language"] = _libsbol.Model_language_get
    if _newclass:
        language = _swig_property(_libsbol.Model_language_get, _libsbol.Model_language_set)
    __swig_setmethods__["framework"] = _libsbol.Model_framework_set
    __swig_getmethods__["framework"] = _libsbol.Model_framework_get
    if _newclass:
        framework = _swig_property(_libsbol.Model_framework_get, _libsbol.Model_framework_set)

    def __init__(self, *args):
        """
        Model(std::string
        uri=DEFAULT_NS"/Model/example", std::string source="", std::string
        language=EDAM_SBML, std::string framework=SBO_CONTINUOUS, std::string
        version="1.0.0") 
        """
        this = _libsbol.new_Model(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Model
    __del__ = lambda self: None
Model_swigregister = _libsbol.Model_swigregister
Model_swigregister(Model)

class moduleProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, moduleProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, moduleProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_moduleProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_moduleProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.moduleProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.moduleProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.moduleProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.moduleProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.moduleProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.moduleProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.moduleProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.moduleProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.moduleProperty___iter__(self)

    def next(self):
        return _libsbol.moduleProperty_next(self)

    def __next__(self):
        return _libsbol.moduleProperty___next__(self)

    def __len__(self):
        return _libsbol.moduleProperty___len__(self)
moduleProperty_swigregister = _libsbol.moduleProperty_swigregister
moduleProperty_swigregister(moduleProperty)

class ownedModule(moduleProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [moduleProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedModule, name, value)
    __swig_getmethods__ = {}
    for _s in [moduleProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedModule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedModule(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedModule_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedModule_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedModule_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedModule_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedModule_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedModule_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedModule_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedModule_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedModule_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedModule_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedModule_python_iter_get, _libsbol.ownedModule_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedModule___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedModule___iter__(self)

    def next(self):
        return _libsbol.ownedModule_next(self)

    def __next__(self):
        return _libsbol.ownedModule___next__(self)

    def __len__(self):
        return _libsbol.ownedModule___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedModule_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedModule_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedModule_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedModule
    __del__ = lambda self: None
ownedModule_swigregister = _libsbol.ownedModule_swigregister
ownedModule_swigregister(ownedModule)

class listOfOwnedModules(ownedModule):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedModules, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedModules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedModules(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedModules_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedModules
    __del__ = lambda self: None
listOfOwnedModules_swigregister = _libsbol.listOfOwnedModules_swigregister
listOfOwnedModules_swigregister(listOfOwnedModules)

class interactionProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interactionProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interactionProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_interactionProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_interactionProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.interactionProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.interactionProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.interactionProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.interactionProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.interactionProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.interactionProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.interactionProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.interactionProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.interactionProperty___iter__(self)

    def next(self):
        return _libsbol.interactionProperty_next(self)

    def __next__(self):
        return _libsbol.interactionProperty___next__(self)

    def __len__(self):
        return _libsbol.interactionProperty___len__(self)
interactionProperty_swigregister = _libsbol.interactionProperty_swigregister
interactionProperty_swigregister(interactionProperty)

class ownedInteraction(interactionProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [interactionProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedInteraction, name, value)
    __swig_getmethods__ = {}
    for _s in [interactionProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedInteraction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedInteraction(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedInteraction_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedInteraction_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedInteraction_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedInteraction_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedInteraction_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedInteraction_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedInteraction_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedInteraction_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedInteraction_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedInteraction_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedInteraction_python_iter_get, _libsbol.ownedInteraction_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedInteraction___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedInteraction___iter__(self)

    def next(self):
        return _libsbol.ownedInteraction_next(self)

    def __next__(self):
        return _libsbol.ownedInteraction___next__(self)

    def __len__(self):
        return _libsbol.ownedInteraction___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedInteraction_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedInteraction_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedInteraction_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedInteraction
    __del__ = lambda self: None
ownedInteraction_swigregister = _libsbol.ownedInteraction_swigregister
ownedInteraction_swigregister(ownedInteraction)

class listOfOwnedInteractions(ownedInteraction):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedInteraction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedInteractions, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedInteraction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedInteractions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedInteractions(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedInteractions_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedInteractions
    __del__ = lambda self: None
listOfOwnedInteractions_swigregister = _libsbol.listOfOwnedInteractions_swigregister
listOfOwnedInteractions_swigregister(listOfOwnedInteractions)

class functionalComponentProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, functionalComponentProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, functionalComponentProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_functionalComponentProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_functionalComponentProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.functionalComponentProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.functionalComponentProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.functionalComponentProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.functionalComponentProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.functionalComponentProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.functionalComponentProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.functionalComponentProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.functionalComponentProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.functionalComponentProperty___iter__(self)

    def next(self):
        return _libsbol.functionalComponentProperty_next(self)

    def __next__(self):
        return _libsbol.functionalComponentProperty___next__(self)

    def __len__(self):
        return _libsbol.functionalComponentProperty___len__(self)
functionalComponentProperty_swigregister = _libsbol.functionalComponentProperty_swigregister
functionalComponentProperty_swigregister(functionalComponentProperty)

class ownedFunctionalComponent(functionalComponentProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [functionalComponentProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedFunctionalComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [functionalComponentProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedFunctionalComponent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedFunctionalComponent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedFunctionalComponent_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedFunctionalComponent_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedFunctionalComponent_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedFunctionalComponent_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedFunctionalComponent_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedFunctionalComponent_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedFunctionalComponent_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedFunctionalComponent_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedFunctionalComponent_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedFunctionalComponent_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedFunctionalComponent_python_iter_get, _libsbol.ownedFunctionalComponent_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedFunctionalComponent___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedFunctionalComponent___iter__(self)

    def next(self):
        return _libsbol.ownedFunctionalComponent_next(self)

    def __next__(self):
        return _libsbol.ownedFunctionalComponent___next__(self)

    def __len__(self):
        return _libsbol.ownedFunctionalComponent___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedFunctionalComponent_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedFunctionalComponent_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedFunctionalComponent_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedFunctionalComponent
    __del__ = lambda self: None
ownedFunctionalComponent_swigregister = _libsbol.ownedFunctionalComponent_swigregister
ownedFunctionalComponent_swigregister(ownedFunctionalComponent)

class listOfOwnedFunctionalComponents(ownedFunctionalComponent):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedFunctionalComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedFunctionalComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedFunctionalComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedFunctionalComponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedFunctionalComponents(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedFunctionalComponents_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedFunctionalComponents
    __del__ = lambda self: None
listOfOwnedFunctionalComponents_swigregister = _libsbol.listOfOwnedFunctionalComponents_swigregister
listOfOwnedFunctionalComponents_swigregister(listOfOwnedFunctionalComponents)

class ModuleDefinition(TopLevel):
    """


    The ModuleDefinition class represents a grouping of structural and
    functional entities in a biological design. The primary usage of this
    class is to assert the molecular interactions and abstract function of
    its child entities.

    C++ includes: moduledefinition.h 
    """

    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDefinition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["roles"] = _libsbol.ModuleDefinition_roles_set
    __swig_getmethods__["roles"] = _libsbol.ModuleDefinition_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.ModuleDefinition_roles_get, _libsbol.ModuleDefinition_roles_set)
    __swig_setmethods__["modules"] = _libsbol.ModuleDefinition_modules_set
    __swig_getmethods__["modules"] = _libsbol.ModuleDefinition_modules_get
    if _newclass:
        modules = _swig_property(_libsbol.ModuleDefinition_modules_get, _libsbol.ModuleDefinition_modules_set)
    __swig_setmethods__["interactions"] = _libsbol.ModuleDefinition_interactions_set
    __swig_getmethods__["interactions"] = _libsbol.ModuleDefinition_interactions_get
    if _newclass:
        interactions = _swig_property(_libsbol.ModuleDefinition_interactions_get, _libsbol.ModuleDefinition_interactions_set)
    __swig_setmethods__["functionalComponents"] = _libsbol.ModuleDefinition_functionalComponents_set
    __swig_getmethods__["functionalComponents"] = _libsbol.ModuleDefinition_functionalComponents_get
    if _newclass:
        functionalComponents = _swig_property(_libsbol.ModuleDefinition_functionalComponents_get, _libsbol.ModuleDefinition_functionalComponents_set)
    __swig_setmethods__["models"] = _libsbol.ModuleDefinition_models_set
    __swig_getmethods__["models"] = _libsbol.ModuleDefinition_models_get
    if _newclass:
        models = _swig_property(_libsbol.ModuleDefinition_models_get, _libsbol.ModuleDefinition_models_set)

    def __init__(self, *args):
        """
        ModuleDefinition(std::string
        uri=DEFAULT_NS"/ModuleDefinition/example", std::string
        version="1.0.0") 
        """
        this = _libsbol.new_ModuleDefinition(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setOutput(self, output):
        """FunctionalComponent& setOutput(ComponentDefinition &output) """
        return _libsbol.ModuleDefinition_setOutput(self, output)


    def setInput(self, input):
        """FunctionalComponent& setInput(ComponentDefinition &input) """
        return _libsbol.ModuleDefinition_setInput(self, input)

    __swig_destroy__ = _libsbol.delete_ModuleDefinition
    __del__ = lambda self: None

    def assemble(self, *args):
        """
        void
        assemble(std::vector< ModuleDefinition * > list_of_modules) 
        """
        return _libsbol.ModuleDefinition_assemble(self, *args)

ModuleDefinition_swigregister = _libsbol.ModuleDefinition_swigregister
ModuleDefinition_swigregister(ModuleDefinition)

class componentDefinitionProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, componentDefinitionProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, componentDefinitionProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_componentDefinitionProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_componentDefinitionProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.componentDefinitionProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.componentDefinitionProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.componentDefinitionProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.componentDefinitionProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.componentDefinitionProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.componentDefinitionProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.componentDefinitionProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.componentDefinitionProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.componentDefinitionProperty___iter__(self)

    def next(self):
        return _libsbol.componentDefinitionProperty_next(self)

    def __next__(self):
        return _libsbol.componentDefinitionProperty___next__(self)

    def __len__(self):
        return _libsbol.componentDefinitionProperty___len__(self)
componentDefinitionProperty_swigregister = _libsbol.componentDefinitionProperty_swigregister
componentDefinitionProperty_swigregister(componentDefinitionProperty)

class ownedComponentDefinition(componentDefinitionProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [componentDefinitionProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedComponentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [componentDefinitionProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedComponentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedComponentDefinition(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedComponentDefinition_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedComponentDefinition_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedComponentDefinition_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedComponentDefinition_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedComponentDefinition_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedComponentDefinition_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedComponentDefinition_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedComponentDefinition_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedComponentDefinition_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedComponentDefinition_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedComponentDefinition_python_iter_get, _libsbol.ownedComponentDefinition_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedComponentDefinition___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedComponentDefinition___iter__(self)

    def next(self):
        return _libsbol.ownedComponentDefinition_next(self)

    def __next__(self):
        return _libsbol.ownedComponentDefinition___next__(self)

    def __len__(self):
        return _libsbol.ownedComponentDefinition___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedComponentDefinition_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedComponentDefinition_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedComponentDefinition_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedComponentDefinition
    __del__ = lambda self: None
ownedComponentDefinition_swigregister = _libsbol.ownedComponentDefinition_swigregister
ownedComponentDefinition_swigregister(ownedComponentDefinition)

class listOfOwnedComponentDefinitions(ownedComponentDefinition):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedComponentDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedComponentDefinitions, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedComponentDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedComponentDefinitions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedComponentDefinitions(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedComponentDefinitions_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedComponentDefinitions
    __del__ = lambda self: None
listOfOwnedComponentDefinitions_swigregister = _libsbol.listOfOwnedComponentDefinitions_swigregister
listOfOwnedComponentDefinitions_swigregister(listOfOwnedComponentDefinitions)

class moduleDefinitionProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, moduleDefinitionProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, moduleDefinitionProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_moduleDefinitionProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_moduleDefinitionProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.moduleDefinitionProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.moduleDefinitionProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.moduleDefinitionProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.moduleDefinitionProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.moduleDefinitionProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.moduleDefinitionProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.moduleDefinitionProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.moduleDefinitionProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.moduleDefinitionProperty___iter__(self)

    def next(self):
        return _libsbol.moduleDefinitionProperty_next(self)

    def __next__(self):
        return _libsbol.moduleDefinitionProperty___next__(self)

    def __len__(self):
        return _libsbol.moduleDefinitionProperty___len__(self)
moduleDefinitionProperty_swigregister = _libsbol.moduleDefinitionProperty_swigregister
moduleDefinitionProperty_swigregister(moduleDefinitionProperty)

class ownedModuleDefinition(moduleDefinitionProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [moduleDefinitionProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedModuleDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [moduleDefinitionProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedModuleDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedModuleDefinition(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedModuleDefinition_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedModuleDefinition_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedModuleDefinition_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedModuleDefinition_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedModuleDefinition_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedModuleDefinition_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedModuleDefinition_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedModuleDefinition_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedModuleDefinition_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedModuleDefinition_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedModuleDefinition_python_iter_get, _libsbol.ownedModuleDefinition_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedModuleDefinition___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedModuleDefinition___iter__(self)

    def next(self):
        return _libsbol.ownedModuleDefinition_next(self)

    def __next__(self):
        return _libsbol.ownedModuleDefinition___next__(self)

    def __len__(self):
        return _libsbol.ownedModuleDefinition___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedModuleDefinition_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedModuleDefinition_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedModuleDefinition_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedModuleDefinition
    __del__ = lambda self: None
ownedModuleDefinition_swigregister = _libsbol.ownedModuleDefinition_swigregister
ownedModuleDefinition_swigregister(ownedModuleDefinition)

class listOfOwnedModuleDefinitions(ownedModuleDefinition):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedModuleDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedModuleDefinitions, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedModuleDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedModuleDefinitions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedModuleDefinitions(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedModuleDefinitions_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedModuleDefinitions
    __del__ = lambda self: None
listOfOwnedModuleDefinitions_swigregister = _libsbol.listOfOwnedModuleDefinitions_swigregister
listOfOwnedModuleDefinitions_swigregister(listOfOwnedModuleDefinitions)

class sequenceProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequenceProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequenceProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_sequenceProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_sequenceProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.sequenceProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.sequenceProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.sequenceProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.sequenceProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.sequenceProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.sequenceProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.sequenceProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.sequenceProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.sequenceProperty___iter__(self)

    def next(self):
        return _libsbol.sequenceProperty_next(self)

    def __next__(self):
        return _libsbol.sequenceProperty___next__(self)

    def __len__(self):
        return _libsbol.sequenceProperty___len__(self)
sequenceProperty_swigregister = _libsbol.sequenceProperty_swigregister
sequenceProperty_swigregister(sequenceProperty)

class ownedSequence(sequenceProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [sequenceProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedSequence, name, value)
    __swig_getmethods__ = {}
    for _s in [sequenceProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedSequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedSequence(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedSequence_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedSequence_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedSequence_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedSequence_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedSequence_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedSequence_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedSequence_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedSequence_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedSequence_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedSequence_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedSequence_python_iter_get, _libsbol.ownedSequence_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedSequence___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedSequence___iter__(self)

    def next(self):
        return _libsbol.ownedSequence_next(self)

    def __next__(self):
        return _libsbol.ownedSequence___next__(self)

    def __len__(self):
        return _libsbol.ownedSequence___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedSequence_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedSequence_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedSequence_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedSequence
    __del__ = lambda self: None
ownedSequence_swigregister = _libsbol.ownedSequence_swigregister
ownedSequence_swigregister(ownedSequence)

class listOfOwnedSequences(ownedSequence):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedSequences, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedSequences, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedSequences(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedSequences_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedSequences
    __del__ = lambda self: None
listOfOwnedSequences_swigregister = _libsbol.listOfOwnedSequences_swigregister
listOfOwnedSequences_swigregister(listOfOwnedSequences)

class modelProperty(_object):
    """


    Member properties of all SBOL objects are defined using a Property
    object.

    The Property class provides a generic interface for accessing SBOL
    objects. At a low level, the Property class converts SBOL data
    structures into RDF triples.

    Parameters:
    -----------

    The:  SBOL specification currently supports string, URI, and integer
    literal values.

    C++ includes: property.h 
    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, modelProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, modelProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Property(sbol_type
        type_uri=UNDEFINED, void *property_owner=NULL, ValidationRules
        validation_rules={}) 
        """
        this = _libsbol.new_modelProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_modelProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        """
        sbol_type
        getTypeURI() 
        """
        return _libsbol.modelProperty_getTypeURI(self)


    def getOwner(self):
        """
        SBOLObject &
        getOwner() 
        """
        return _libsbol.modelProperty_getOwner(self)


    def get(self):
        """
        std::string get()

        Basic getter for all SBOL literal properties.

        All properties are initially read from an SBOL file as a raw string
        containing the property value. 
        """
        return _libsbol.modelProperty_get(self)


    def set(self, *args):
        """
        void set(int new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.modelProperty_set(self, *args)


    def add(self, new_value):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.modelProperty_add(self, new_value)


    def write(self):
        """void write() """
        return _libsbol.modelProperty_write(self)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL) 
        """
        return _libsbol.modelProperty_validate(self, arg)


    def __getitem__(self, nIndex):
        return _libsbol.modelProperty___getitem__(self, nIndex)

    def __iter__(self):
        return _libsbol.modelProperty___iter__(self)

    def next(self):
        return _libsbol.modelProperty_next(self)

    def __next__(self):
        return _libsbol.modelProperty___next__(self)

    def __len__(self):
        return _libsbol.modelProperty___len__(self)
modelProperty_swigregister = _libsbol.modelProperty_swigregister
modelProperty_swigregister(modelProperty)

class ownedModel(modelProperty):
    """


    A container property that contains child objects.

    Creates a composition out of two or more classes. In the SBOL
    specification, compositional relationships are indicated in class
    diagrams by arrows with black diamonds. A compositional relationship
    means that deleting the parent object will delete the child objects,
    and adding the parent object to a Document will also add the child
    object. Owned objects are stored in arbitrary order.

    Parameters:
    -----------

    SBOLClass:  The type of child SBOL object contained by this Property

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [modelProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedModel, name, value)
    __swig_getmethods__ = {}
    for _s in [modelProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        OwnedObject(sbol_type type_uri, void *property_owner, SBOLObject
        &first_object) 
        """
        this = _libsbol.new_ownedModel(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set(self, sbol_obj):
        """
        virtual void set(int
        new_value)

        Basic setter for SBOL IntProperty, but can be used with TextProperty
        as well.

        Parameters:
        -----------

        new_value:  A new integer value for the property, which is converted
        to a raw string during serialization. 
        """
        return _libsbol.ownedModel_set(self, sbol_obj)


    def get(self, object_id):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedModel_get(self, object_id)


    def add(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedModel_add(self, sbol_obj)


    def copy(self):
        """
        std::vector<
        SBOLClass * > copy() 
        """
        return _libsbol.ownedModel_copy(self)


    def create(self, *args):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedModel_create(self, *args)


    def begin(self):
        """iterator begin() """
        return _libsbol.ownedModel_begin(self)


    def end(self):
        """iterator end() """
        return _libsbol.ownedModel_end(self)


    def size(self):
        """int size() """
        return _libsbol.ownedModel_size(self)

    __swig_setmethods__["python_iter"] = _libsbol.ownedModel_python_iter_set
    __swig_getmethods__["python_iter"] = _libsbol.ownedModel_python_iter_get
    if _newclass:
        python_iter = _swig_property(_libsbol.ownedModel_python_iter_get, _libsbol.ownedModel_python_iter_set)

    def __getitem__(self, *args):
        return _libsbol.ownedModel___getitem__(self, *args)

    def __iter__(self):
        return _libsbol.ownedModel___iter__(self)

    def next(self):
        return _libsbol.ownedModel_next(self)

    def __next__(self):
        return _libsbol.ownedModel___next__(self)

    def __len__(self):
        return _libsbol.ownedModel___len__(self)

    def addRange(self, sbol_obj):
        """
        void add(std::string
        new_value)

        Appends the new value to a list of values, for properties that allow
        it.

        Parameters:
        -----------

        new_value:  A new string which will be added to a list of values. 
        """
        return _libsbol.ownedModel_addRange(self, sbol_obj)


    def getRange(self, *args):
        """
        SBOLSubClass & get()

        """
        return _libsbol.ownedModel_getRange(self, *args)


    def createRange(self, uri):
        """
        void
        create(std::string uri_prefix, std::string display_id, std::string
        version)

        Deprecate this 
        """
        return _libsbol.ownedModel_createRange(self, uri)

    __swig_destroy__ = _libsbol.delete_ownedModel
    __del__ = lambda self: None
ownedModel_swigregister = _libsbol.ownedModel_swigregister
ownedModel_swigregister(ownedModel)

class listOfOwnedModels(ownedModel):
    """


    Provides interface for an SBOL container Property that is allowed to
    have more than one object or value.

    Parameters:
    -----------

    PropertyType:  The type of SBOL Property, eg, Text, Int, OwnedObject,
    etc

    C++ includes: properties.h 
    """

    __swig_setmethods__ = {}
    for _s in [ownedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedModels, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedModels, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        List(sbol_type type_uri,
        SBOLObject *property_owner, std::string initial_value="") 
        """
        this = _libsbol.new_listOfOwnedModels(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        """void remove(int index) """
        return _libsbol.listOfOwnedModels_remove(self, index)

    __swig_destroy__ = _libsbol.delete_listOfOwnedModels
    __del__ = lambda self: None
listOfOwnedModels_swigregister = _libsbol.listOfOwnedModels_swigregister
listOfOwnedModels_swigregister(listOfOwnedModels)


def raptor_error_handler(user_data, message):
    """
    void
    sbol::raptor_error_handler(void *user_data, raptor_log_message
    *message) 
    """
    return _libsbol.raptor_error_handler(user_data, message)
class Document(SBOLObject):
    """


    Read and write SBOL using a Document class. The Document is a
    container for Components, Modules, and all other SBOLObjects.

    C++ includes: document.h 
    """

    __swig_setmethods__ = {}
    for _s in [SBOLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    for _s in [SBOLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        Document()

        Construct a Document. The Document is a container for Components,
        Modules, and all other SBOLObjects. 
        """
        this = _libsbol.new_Document()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["SBOLObjects"] = _libsbol.Document_SBOLObjects_set
    __swig_getmethods__["SBOLObjects"] = _libsbol.Document_SBOLObjects_get
    if _newclass:
        SBOLObjects = _swig_property(_libsbol.Document_SBOLObjects_get, _libsbol.Document_SBOLObjects_set)
    __swig_setmethods__["componentDefinitions"] = _libsbol.Document_componentDefinitions_set
    __swig_getmethods__["componentDefinitions"] = _libsbol.Document_componentDefinitions_get
    if _newclass:
        componentDefinitions = _swig_property(_libsbol.Document_componentDefinitions_get, _libsbol.Document_componentDefinitions_set)
    __swig_setmethods__["moduleDefinitions"] = _libsbol.Document_moduleDefinitions_set
    __swig_getmethods__["moduleDefinitions"] = _libsbol.Document_moduleDefinitions_get
    if _newclass:
        moduleDefinitions = _swig_property(_libsbol.Document_moduleDefinitions_get, _libsbol.Document_moduleDefinitions_set)
    __swig_setmethods__["models"] = _libsbol.Document_models_set
    __swig_getmethods__["models"] = _libsbol.Document_models_get
    if _newclass:
        models = _swig_property(_libsbol.Document_models_get, _libsbol.Document_models_set)
    __swig_setmethods__["sequences"] = _libsbol.Document_sequences_set
    __swig_getmethods__["sequences"] = _libsbol.Document_sequences_get
    if _newclass:
        sequences = _swig_property(_libsbol.Document_sequences_get, _libsbol.Document_sequences_set)
    __swig_setmethods__["sequenceAnnotations"] = _libsbol.Document_sequenceAnnotations_set
    __swig_getmethods__["sequenceAnnotations"] = _libsbol.Document_sequenceAnnotations_get
    if _newclass:
        sequenceAnnotations = _swig_property(_libsbol.Document_sequenceAnnotations_get, _libsbol.Document_sequenceAnnotations_set)

    def getTopLevel(self, arg2):
        """
        TopLevel&
        getTopLevel(std::string) 
        """
        return _libsbol.Document_getTopLevel(self, arg2)


    def getWorld(self):
        """
        raptor_world*
        getWorld() 
        """
        return _libsbol.Document_getWorld(self)


    def write(self, filename):
        """
        void write(std::string
        filename)

        Serialize all objects in this Document to an RDF/XML file.

        Parameters:
        -----------

        filename:  The full name of the file you want to write (including file
        extension) 
        """
        val = _libsbol.Document_write(self, filename)

        import json
        import urllib2

        sbol = open(filename, 'r')
        data = {"validationOptions": {"output" : "SBOL2",
                "diff": False,
                "noncompliantUrisAllowed": False,
                "incompleteDocumentsAllowed": False,
                "bestPracticesCheck": False,
                "failOnFirstError": False,
                "displayFullErrorStackTrace": False,
                "topLevelToConvert": "",
                "uriPrefix": "",
                "version": ""},
                "wantFileBack": False,
                "mainFile": sbol.read()
            }
        sbol.close()
        data = json.dumps(data)
        url = 'http://www.async.ece.utah.edu/sbol-validator/endpoint.php'
        headers = {'content-type': 'application/json'}

        req = urllib2.Request(url, data, {'Content-Type': 'application/json'})
        f = urllib2.urlopen(req)
        response = json.loads(f.read(), strict=False)
        if not response['result'] == '':
            print (response['result'])
        else:
            print ('Validation successful. No errors found')
        f.close()



        return val


    def read(self, filename):
        """
        void read(std::string
        filename)

        Read an RDF/XML file and attach the SBOL objects to this Document.

        Existing contents of the Document will be wiped.

        Parameters:
        -----------

        filename:  The full name of the file you want to read (including file
        extension) 
        """
        return _libsbol.Document_read(self, filename)


    def append(self, filename):
        """
        void
        append(std::string filename)

        Read an RDF/XML file and attach the SBOL objects to this Document.

        New objects will be added to the existing contents of the Document

        Parameters:
        -----------

        filename:  The full name of the file you want to read (including file
        extension) 
        """
        return _libsbol.Document_append(self, filename)


    def validate(self, arg=None):
        """
        void validate(void
        *arg=NULL)

        Run validation rules on this Document. Validation rules are called
        automatically during parsing and serialization. 
        """
        return _libsbol.Document_validate(self, arg)


    def find(self, uri):
        """
        int find(std::string
        uri) 
        """
        return _libsbol.Document_find(self, uri)

    __swig_getmethods__["parse_objects"] = lambda x: _libsbol.Document_parse_objects
    if _newclass:
        parse_objects = staticmethod(_libsbol.Document_parse_objects)
    __swig_getmethods__["parse_properties"] = lambda x: _libsbol.Document_parse_properties
    if _newclass:
        parse_properties = staticmethod(_libsbol.Document_parse_properties)
    __swig_getmethods__["namespaceHandler"] = lambda x: _libsbol.Document_namespaceHandler
    if _newclass:
        namespaceHandler = staticmethod(_libsbol.Document_namespaceHandler)

    def getNamespaces(self):
        """std::vector<std::string> getNamespaces() """
        return _libsbol.Document_getNamespaces(self)


    def addNamespace(self, *args):
        """
        void
        addNamespace(std::string ns, std::string prefix) 
        """
        return _libsbol.Document_addNamespace(self, *args)


    def flatten(self):
        """std::vector<SBOLObject*> flatten() """
        return _libsbol.Document_flatten(self)


    def close(self, *args):
        """void close() """
        return _libsbol.Document_close(self, *args)


    def addModel(self, *args):
        """
        void add(std::vector<
        SBOLClass * > sbol_objects)

        Register an object in the Document.

        Parameters:
        -----------

        sbol_objects:  A list of pointers to the SBOL objects you want to
        serialize

        Parameters:
        -----------

        SBOLClass:  The type of SBOL object 
        """
        return _libsbol.Document_addModel(self, *args)


    def getComponentDefinition(self, uri):
        """
        SBOLClass &
        get(std::string uri)

        Retrieve an object from the Document.

        Parameters:
        -----------

        uri:  The identity of the SBOL object you want to retrieve

        Parameters:
        -----------

        SBOLClass:  The type of SBOL object 
        """
        return _libsbol.Document_getComponentDefinition(self, uri)


    def getSequence(self, uri):
        """
        SBOLClass &
        get(std::string uri)

        Retrieve an object from the Document.

        Parameters:
        -----------

        uri:  The identity of the SBOL object you want to retrieve

        Parameters:
        -----------

        SBOLClass:  The type of SBOL object 
        """
        return _libsbol.Document_getSequence(self, uri)


    def getModel(self, uri):
        """
        SBOLClass &
        get(std::string uri)

        Retrieve an object from the Document.

        Parameters:
        -----------

        uri:  The identity of the SBOL object you want to retrieve

        Parameters:
        -----------

        SBOLClass:  The type of SBOL object 
        """
        return _libsbol.Document_getModel(self, uri)


    def getModuleDefinition(self, uri):
        """
        SBOLClass &
        get(std::string uri)

        Retrieve an object from the Document.

        Parameters:
        -----------

        uri:  The identity of the SBOL object you want to retrieve

        Parameters:
        -----------

        SBOLClass:  The type of SBOL object 
        """
        return _libsbol.Document_getModuleDefinition(self, uri)


    def addComponentDefinition(self, *args):
        return _libsbol.Document_addComponentDefinition(self, *args)

    def addSequence(self, *args):
        return _libsbol.Document_addSequence(self, *args)

    def addModuleDefinition(self, *args):
        return _libsbol.Document_addModuleDefinition(self, *args)
    __swig_destroy__ = _libsbol.delete_Document
    __del__ = lambda self: None
Document_swigregister = _libsbol.Document_swigregister
Document_swigregister(Document)
cvar = _libsbol.cvar

def Document_parse_objects(user_data, triple):
    return _libsbol.Document_parse_objects(user_data, triple)
Document_parse_objects = _libsbol.Document_parse_objects

def Document_parse_properties(user_data, triple):
    return _libsbol.Document_parse_properties(user_data, triple)
Document_parse_properties = _libsbol.Document_parse_properties

def Document_namespaceHandler(user_data, nspace):
    return _libsbol.Document_namespaceHandler(user_data, nspace)
Document_namespaceHandler = _libsbol.Document_namespaceHandler


def cut_sbol_resource(xml_string, resource_id):
    """
    std::string
    sbol::cut_sbol_resource(std::string &xml_string, const std::string
    resource_id) 
    """
    return _libsbol.cut_sbol_resource(xml_string, resource_id)

def replace_reference_to_resource(xml_string, property_name, resource_id, replacement_text):
    """
    void
    sbol::replace_reference_to_resource(std::string &xml_string, const
    std::string property_name, const std::string resource_id, std::string
    &replacement_text) 
    """
    return _libsbol.replace_reference_to_resource(xml_string, property_name, resource_id, replacement_text)

def seek_element(xml_buffer, uri):
    """
    void
    sbol::seek_element(std::istringstream &xml_buffer, std::string uri) 
    """
    return _libsbol.seek_element(xml_buffer, uri)

def seek_property_element(xml_buffer, property_name):
    """
    void
    sbol::seek_property_element(std::istringstream &xml_buffer,
    std::string property_name) 
    """
    return _libsbol.seek_property_element(xml_buffer, property_name)

def seek_next_element(xml_buffer):
    """
    void
    sbol::seek_next_element(std::istringstream &xml_buffer) 
    """
    return _libsbol.seek_next_element(xml_buffer)

def seek_new_line(xml_buffer):
    """
    void
    sbol::seek_new_line(std::istringstream &xml_buffer) 
    """
    return _libsbol.seek_new_line(xml_buffer)

def seek_end_of_line(xml_buffer):
    """
    void
    sbol::seek_end_of_line(std::istringstream &xml_buffer) 
    """
    return _libsbol.seek_end_of_line(xml_buffer)

def seek_end_of_element(xml_buffer):
    """
    void
    sbol::seek_end_of_element(std::istringstream &xml_buffer) 
    """
    return _libsbol.seek_end_of_element(xml_buffer)

def seek_end_of_node(xml_buffer, uri):
    """
    void
    sbol::seek_end_of_node(std::istringstream &xml_buffer, std::string
    uri) 
    """
    return _libsbol.seek_end_of_node(xml_buffer, uri)

def seek_resource(xml_buffer, property_name, uri):
    """
    void
    sbol::seek_resource(std::istringstream &xml_buffer, std::string
    property_name, std::string uri) 
    """
    return _libsbol.seek_resource(xml_buffer, property_name, uri)

def is_open_node(xml_buffer):
    """
    bool
    sbol::is_open_node(std::istringstream &xml_buffer) 
    """
    return _libsbol.is_open_node(xml_buffer)

def indent(text, indentation):
    """
    void sbol::indent(std::string
    &text, int indentation) 
    """
    return _libsbol.indent(text, indentation)

def get_qname(xml_buffer):
    """
    std::string
    sbol::get_qname(std::istringstream &xml_buffer) 
    """
    return _libsbol.get_qname(xml_buffer)

def get_local_part(qname):
    """
    std::string
    sbol::get_local_part(std::string qname) 
    """
    return _libsbol.get_local_part(qname)

def get_prefix(qname):
    """
    std::string
    sbol::get_prefix(std::string qname) 
    """
    return _libsbol.get_prefix(qname)

def parse_element(xml_buffer):
    """
    std::vector<std::string>
    sbol::parse_element(std::istringstream &xml_buffer) 
    """
    return _libsbol.parse_element(xml_buffer)
# This file is compatible with both classic and new-style classes.


